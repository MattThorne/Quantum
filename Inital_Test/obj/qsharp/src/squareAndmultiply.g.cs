//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"SquareAndMultiply\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs\",\"Position\":{\"Item1\":14,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":28}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"a\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":29},\"Item2\":{\"Line\":1,\"Column\":30}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"m\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":39},\"Item2\":{\"Line\":1,\"Column\":40}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"j\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":49},\"Item2\":{\"Line\":1,\"Column\":50}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"result\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":59},\"Item2\":{\"Line\":1,\"Column\":65}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\"SQUARE AND MULTIPLY/////////////\",\"NEEDS REFACTORING////////////////\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"SquareAndMultiply\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs\",\"Position\":{\"Item1\":15,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":5}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"SquareAndMultiply\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs\",\"Position\":{\"Item1\":291,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":11}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"SquareAndMultiplyIteration\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs\",\"Position\":{\"Item1\":571,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":37}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"a\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":38},\"Item2\":{\"Line\":1,\"Column\":39}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"v\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":48},\"Item2\":{\"Line\":1,\"Column\":49}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"m\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":58},\"Item2\":{\"Line\":1,\"Column\":59}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"c\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":68},\"Item2\":{\"Line\":1,\"Column\":69}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"z\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":76},\"Item2\":{\"Line\":1,\"Column\":77}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"ld\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":84},\"Item2\":{\"Line\":1,\"Column\":86}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"t\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":93},\"Item2\":{\"Line\":1,\"Column\":94}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"},{\"Case\":\"Qubit\"},{\"Case\":\"Qubit\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"SquareAndMultiplyIteration\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs\",\"Position\":{\"Item1\":571,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":37}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"SquareAndMultiplyIteration\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs\",\"Position\":{\"Item1\":571,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":114},\"Item2\":{\"Line\":1,\"Column\":123}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Quantum.Bell.SquareAndMultiplyIteration\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"SquareAndMultiplyIteration\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs\",\"Position\":{\"Item1\":571,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":114},\"Item2\":{\"Line\":1,\"Column\":123}},\"Documentation\":[\"automatically generated QsControlled specialization for Quantum.Bell.SquareAndMultiplyIteration\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"SquareAndMultiplyIteration\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs\",\"Position\":{\"Item1\":571,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":114},\"Item2\":{\"Line\":1,\"Column\":123}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for Quantum.Bell.SquareAndMultiplyIteration\"]}")]
#line hidden
namespace Quantum.Bell
{
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs", OperationFunctor.Body, 16, 292)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs", OperationFunctor.Controlled, 292, 572)]
    public partial class SquareAndMultiply : Controllable<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)>, ICallable
    {
        public SquareAndMultiply(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)>, IApplyData
        {
            public In((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3)?.Qubits, ((IApplyData)Data.Item4)?.Qubits);
                }
            }
        }

        String ICallable.Name => "SquareAndMultiply";
        String ICallable.FullName => "Quantum.Bell.SquareAndMultiply";
        protected ICallable Length
        {
            get;
            set;
        }

        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected IAdjointable MicrosoftQuantumCanonApplyToEachA
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Qubit,IQArray<Qubit>)> SquareAndMultiplyIteration
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> AddI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> MicrosoftQuantumIntrinsicSWAP
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid> Body => (__in__) =>
        {
            var (a,m,j,result) = __in__;
#line 17 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
            var len = (j.Length - 1L);
#line 18 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
            var numAnc = 0L;
#line 19 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
            var sum = 0L;
#line 20 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
            var add = 1L;
#line 21 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
            while (true)
            {
#line 22 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                sum = (sum + add);
#line 23 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                add = (add + 1L);
#line 24 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                numAnc = (numAnc + 1L);
                if ((len <= sum))
                {
                    break;
                }
                else
                {
                }
            }

#line 26 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
            var origNumAnc = numAnc;
#line 29 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
            var lenA = a.Length;
#line hidden
            {
#line 30 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                var (v,c,z,az,ld) = (Allocate.Apply((lenA * numAnc)), Allocate.Apply(), Allocate.Apply(), Allocate.Apply(), Allocate.Apply());
#line hidden
                bool __arg1__ = true;
                try
                {
#line 32 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    var curr = 0L;
#line 33 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    var curReg = 0L;
#line 36 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j));
#line 37 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    MicrosoftQuantumIntrinsicX.Controlled.Apply((j, az));
#line 38 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j));
#line 39 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    MicrosoftQuantumIntrinsicX.Apply(az);
#line 41 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    while (true)
                    {
#line 42 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                        foreach (var i in new QRange(0L, (numAnc - 1L)))
#line hidden
                        {
#line 45 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                            if ((((i + curr) + 1L) <= (j.Length - 1L)))
                            {
#line 47 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((i + curr) + 1L), (j.Length - 1L)))));
#line 48 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((j?.Slice(new QRange(((i + curr) + 1L), (j.Length - 1L))), z));
#line 49 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((i + curr) + 1L), (j.Length - 1L)))));
#line 50 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(z);
#line 53 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((i + curr) + 2L), (j.Length - 1L)))));
#line 54 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 55 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((QArray<Qubit>.Add(QArray<Qubit>.Add(j?.Slice(new QRange(((i + curr) + 2L), (j.Length - 1L))), new QArray<Qubit>(j[0L])), new QArray<Qubit>(j[((i + curr) + 1L)])), ld));
#line 56 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 57 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((i + curr) + 2L), (j.Length - 1L)))));
#line 58 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(ld);
#line 61 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(j[((i + curr) + 1L)]), c));
#line 65 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                SquareAndMultiplyIteration.Controlled.Apply((new QArray<Qubit>(az), (a, QArray<Qubit>.Add(a, v)?.Slice(new QRange(((i + curReg) * lenA), ((((i + curReg) * lenA) + lenA) - 1L))), m, c, z, ld, v?.Slice(new QRange(((i + curReg) * lenA), ((((i + curReg) * lenA) + lenA) - 1L))))));
#line 67 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(az);
#line 68 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(az), v[((i + curReg) * lenA)]));
#line 69 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(az);
#line 74 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(j[((i + curr) + 1L)]), c));
#line 77 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(ld);
#line 78 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((i + curr) + 2L), (j.Length - 1L)))));
#line 79 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 80 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((QArray<Qubit>.Add(QArray<Qubit>.Add(j?.Slice(new QRange(((i + curr) + 2L), (j.Length - 1L))), new QArray<Qubit>(j[0L])), new QArray<Qubit>(j[((i + curr) + 1L)])), ld));
#line 81 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 82 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((i + curr) + 2L), (j.Length - 1L)))));
#line 87 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(z);
#line 88 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((i + curr) + 1L), (j.Length - 1L)))));
#line 89 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((j?.Slice(new QRange(((i + curr) + 1L), (j.Length - 1L))), z));
#line 90 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((i + curr) + 1L), (j.Length - 1L)))));
                            }

#line 92 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                            if ((((i + curr) + 1L) == (j.Length - 1L)))
                            {
#line 93 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                AddI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(v?.Slice(new QRange(((i + curReg) * lenA), ((((i + curReg) * lenA) + lenA) - 1L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(result)));
                            }
                        }

#line 97 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                        var q = 0L;
#line 99 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                        foreach (var k in new QRange(0L, (numAnc - 2L)))
#line hidden
                        {
#line 100 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                            q = ((numAnc - 2L) - k);
#line 101 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                            if ((((q + curr) + 1L) <= (j.Length - 1L)))
                            {
#line 103 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 1L), (j.Length - 1L)))));
#line 104 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((j?.Slice(new QRange(((q + curr) + 1L), (j.Length - 1L))), z));
#line 105 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 1L), (j.Length - 1L)))));
#line 106 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(z);
#line 109 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 2L), (j.Length - 1L)))));
#line 110 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 111 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((QArray<Qubit>.Add(QArray<Qubit>.Add(j?.Slice(new QRange(((q + curr) + 2L), (j.Length - 1L))), new QArray<Qubit>(j[0L])), new QArray<Qubit>(j[((q + curr) + 1L)])), ld));
#line 112 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 113 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 2L), (j.Length - 1L)))));
#line 114 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(ld);
#line 117 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(j[((q + curr) + 1L)]), c));
#line 121 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                SquareAndMultiplyIteration.Adjoint.Controlled.Apply((new QArray<Qubit>(az), (a, QArray<Qubit>.Add(a, v)?.Slice(new QRange(((q + curReg) * lenA), ((((q + curReg) * lenA) + lenA) - 1L))), m, c, z, ld, v?.Slice(new QRange(((q + curReg) * lenA), ((((q + curReg) * lenA) + lenA) - 1L))))));
#line 123 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(az);
#line 124 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(az), v[((q + curReg) * lenA)]));
#line 125 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(az);
#line 128 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(j[((q + curr) + 1L)]), c));
#line 131 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(ld);
#line 132 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 2L), (j.Length - 1L)))));
#line 133 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 134 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((QArray<Qubit>.Add(QArray<Qubit>.Add(j?.Slice(new QRange(((q + curr) + 2L), (j.Length - 1L))), new QArray<Qubit>(j[0L])), new QArray<Qubit>(j[((q + curr) + 1L)])), ld));
#line 135 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 136 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 2L), (j.Length - 1L)))));
#line 140 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(z);
#line 141 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 1L), (j.Length - 1L)))));
#line 142 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((j?.Slice(new QRange(((q + curr) + 1L), (j.Length - 1L))), z));
#line 143 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 1L), (j.Length - 1L)))));
                            }
                        }

#line 149 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                        if ((curReg != (origNumAnc - 1L)))
                        {
#line 150 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                            foreach (var i in new QRange(0L, (lenA - 1L)))
#line hidden
                            {
#line 151 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicSWAP.Apply((v[(i + (curReg * lenA))], v[(i + ((origNumAnc - 1L) * lenA))]));
                            }
                        }

#line 155 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                        curr = (curr + numAnc);
#line 156 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                        curReg = (curReg + 1L);
#line 157 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                        numAnc = (numAnc - 1L);
                        if ((numAnc == 0L))
                        {
                            break;
                        }
                        else
                        {
                        }
                    }

#line 162 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    while (true)
                    {
#line 163 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                        numAnc = (numAnc + 1L);
#line 164 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                        curReg = (curReg - 1L);
#line 165 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                        curr = (curr - numAnc);
#line 167 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                        if ((curReg != (origNumAnc - 1L)))
                        {
#line 168 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                            foreach (var i in new QRange(0L, (lenA - 1L)))
#line hidden
                            {
#line 169 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicSWAP.Apply((v[(i + (curReg * lenA))], v[(i + ((origNumAnc - 1L) * lenA))]));
                            }
                        }

#line 172 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                        foreach (var q in new QRange(0L, (numAnc - 2L)))
#line hidden
                        {
#line 173 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                            if ((((q + curr) + 1L) <= (j.Length - 1L)))
                            {
#line 175 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 1L), (j.Length - 1L)))));
#line 176 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((j?.Slice(new QRange(((q + curr) + 1L), (j.Length - 1L))), z));
#line 177 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 1L), (j.Length - 1L)))));
#line 178 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(z);
#line 181 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 2L), (j.Length - 1L)))));
#line 182 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 183 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((QArray<Qubit>.Add(QArray<Qubit>.Add(j?.Slice(new QRange(((q + curr) + 2L), (j.Length - 1L))), new QArray<Qubit>(j[0L])), new QArray<Qubit>(j[((q + curr) + 1L)])), ld));
#line 184 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 185 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 2L), (j.Length - 1L)))));
#line 186 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(ld);
#line 189 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(j[((q + curr) + 1L)]), c));
#line 193 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                SquareAndMultiplyIteration.Controlled.Apply((new QArray<Qubit>(az), (a, QArray<Qubit>.Add(a, v)?.Slice(new QRange(((q + curReg) * lenA), ((((q + curReg) * lenA) + lenA) - 1L))), m, c, z, ld, v?.Slice(new QRange(((q + curReg) * lenA), ((((q + curReg) * lenA) + lenA) - 1L))))));
#line 195 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(az);
#line 196 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(az), v[((q + curReg) * lenA)]));
#line 197 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(az);
#line 201 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(j[((q + curr) + 1L)]), c));
#line 204 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(ld);
#line 205 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 2L), (j.Length - 1L)))));
#line 206 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 207 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((QArray<Qubit>.Add(QArray<Qubit>.Add(j?.Slice(new QRange(((q + curr) + 2L), (j.Length - 1L))), new QArray<Qubit>(j[0L])), new QArray<Qubit>(j[((q + curr) + 1L)])), ld));
#line 208 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 209 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 2L), (j.Length - 1L)))));
#line 213 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(z);
#line 214 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 1L), (j.Length - 1L)))));
#line 215 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((j?.Slice(new QRange(((q + curr) + 1L), (j.Length - 1L))), z));
#line 216 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 1L), (j.Length - 1L)))));
                            }
                        }

#line 221 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                        var g = 0L;
#line 222 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                        foreach (var k in new QRange(0L, (numAnc - 1L)))
#line hidden
                        {
#line 223 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                            g = ((numAnc - 1L) - k);
#line 225 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                            if ((((g + curr) + 1L) <= (j.Length - 1L)))
                            {
#line 227 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((g + curr) + 1L), (j.Length - 1L)))));
#line 228 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((j?.Slice(new QRange(((g + curr) + 1L), (j.Length - 1L))), z));
#line 229 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((g + curr) + 1L), (j.Length - 1L)))));
#line 230 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(z);
#line 233 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((g + curr) + 2L), (j.Length - 1L)))));
#line 234 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 235 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((QArray<Qubit>.Add(QArray<Qubit>.Add(j?.Slice(new QRange(((g + curr) + 2L), (j.Length - 1L))), new QArray<Qubit>(j[0L])), new QArray<Qubit>(j[((g + curr) + 1L)])), ld));
#line 236 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 237 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((g + curr) + 2L), (j.Length - 1L)))));
#line 238 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(ld);
#line 241 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(j[((g + curr) + 1L)]), c));
#line 245 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                SquareAndMultiplyIteration.Adjoint.Controlled.Apply((new QArray<Qubit>(az), (a, QArray<Qubit>.Add(a, v)?.Slice(new QRange(((g + curReg) * lenA), ((((g + curReg) * lenA) + lenA) - 1L))), m, c, z, ld, v?.Slice(new QRange(((g + curReg) * lenA), ((((g + curReg) * lenA) + lenA) - 1L))))));
#line 248 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(az);
#line 249 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(az), v[((g + curReg) * lenA)]));
#line 250 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(az);
#line 255 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(j[((g + curr) + 1L)]), c));
#line 258 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(ld);
#line 259 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((g + curr) + 2L), (j.Length - 1L)))));
#line 260 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 261 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((QArray<Qubit>.Add(QArray<Qubit>.Add(j?.Slice(new QRange(((g + curr) + 2L), (j.Length - 1L))), new QArray<Qubit>(j[0L])), new QArray<Qubit>(j[((g + curr) + 1L)])), ld));
#line 262 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 263 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((g + curr) + 2L), (j.Length - 1L)))));
#line 268 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(z);
#line 269 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((g + curr) + 1L), (j.Length - 1L)))));
#line 270 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((j?.Slice(new QRange(((g + curr) + 1L), (j.Length - 1L))), z));
#line 271 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((g + curr) + 1L), (j.Length - 1L)))));
                            }
                        }

                        if ((numAnc == origNumAnc))
                        {
                            break;
                        }
                        else
                        {
                        }
                    }

#line 281 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    MicrosoftQuantumIntrinsicX.Apply(az);
#line 282 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j));
#line 283 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    MicrosoftQuantumIntrinsicX.Controlled.Apply((j, az));
#line 284 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(v);
#line hidden
                        Release.Apply(c);
#line hidden
                        Release.Apply(z);
#line hidden
                        Release.Apply(az);
#line hidden
                        Release.Apply(ld);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)), QVoid> ControlledBody => (__in__) =>
        {
            var (cs,(a,m,j,result)) = __in__;
#line 294 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
            var len = (j.Length - 1L);
#line 295 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
            var numAnc = 0L;
#line 296 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
            var sum = 0L;
#line 297 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
            var add = 1L;
#line 298 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
            while (true)
            {
#line 299 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                sum = (sum + add);
#line 300 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                add = (add + 1L);
#line 301 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                numAnc = (numAnc + 1L);
                if ((len <= sum))
                {
                    break;
                }
                else
                {
                }
            }

#line 303 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
            var origNumAnc = numAnc;
#line 306 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
            var lenA = a.Length;
#line hidden
            {
#line 307 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                var (v,c,z,az,ld) = (Allocate.Apply((lenA * numAnc)), Allocate.Apply(), Allocate.Apply(), Allocate.Apply(), Allocate.Apply());
#line hidden
                bool __arg1__ = true;
                try
                {
#line 309 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    var curr = 0L;
#line 310 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    var curReg = 0L;
#line 313 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j));
#line 314 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    MicrosoftQuantumIntrinsicX.Controlled.Apply((j, az));
#line 315 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j));
#line 316 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    MicrosoftQuantumIntrinsicX.Apply(az);
#line 318 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    while (true)
                    {
#line 319 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                        foreach (var i in new QRange(0L, (numAnc - 1L)))
#line hidden
                        {
#line 322 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                            if ((((i + curr) + 1L) <= (j.Length - 1L)))
                            {
#line 324 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((i + curr) + 1L), (j.Length - 1L)))));
#line 325 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((j?.Slice(new QRange(((i + curr) + 1L), (j.Length - 1L))), z));
#line 326 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((i + curr) + 1L), (j.Length - 1L)))));
#line 327 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(z);
#line 330 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((i + curr) + 2L), (j.Length - 1L)))));
#line 331 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 332 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((QArray<Qubit>.Add(QArray<Qubit>.Add(j?.Slice(new QRange(((i + curr) + 2L), (j.Length - 1L))), new QArray<Qubit>(j[0L])), new QArray<Qubit>(j[((i + curr) + 1L)])), ld));
#line 333 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 334 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((i + curr) + 2L), (j.Length - 1L)))));
#line 335 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(ld);
#line 338 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(j[((i + curr) + 1L)]), c));
#line 342 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                SquareAndMultiplyIteration.Controlled.Apply((new QArray<Qubit>(az), (a, QArray<Qubit>.Add(a, v)?.Slice(new QRange(((i + curReg) * lenA), ((((i + curReg) * lenA) + lenA) - 1L))), m, c, z, ld, v?.Slice(new QRange(((i + curReg) * lenA), ((((i + curReg) * lenA) + lenA) - 1L))))));
#line 344 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(az);
#line 345 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(az), v[((i + curReg) * lenA)]));
#line 346 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(az);
#line 351 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(j[((i + curr) + 1L)]), c));
#line 354 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(ld);
#line 355 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((i + curr) + 2L), (j.Length - 1L)))));
#line 356 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 357 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((QArray<Qubit>.Add(QArray<Qubit>.Add(j?.Slice(new QRange(((i + curr) + 2L), (j.Length - 1L))), new QArray<Qubit>(j[0L])), new QArray<Qubit>(j[((i + curr) + 1L)])), ld));
#line 358 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 359 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((i + curr) + 2L), (j.Length - 1L)))));
#line 364 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(z);
#line 365 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((i + curr) + 1L), (j.Length - 1L)))));
#line 366 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((j?.Slice(new QRange(((i + curr) + 1L), (j.Length - 1L))), z));
#line 367 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((i + curr) + 1L), (j.Length - 1L)))));
                            }

#line 369 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                            if ((((i + curr) + 1L) == (j.Length - 1L)))
                            {
#line 370 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                AddI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(v?.Slice(new QRange(((i + curReg) * lenA), ((((i + curReg) * lenA) + lenA) - 1L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(result)));
                            }
                        }

#line 374 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                        var q = 0L;
#line 376 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                        foreach (var k in new QRange(0L, (numAnc - 2L)))
#line hidden
                        {
#line 377 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                            q = ((numAnc - 2L) - k);
#line 378 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                            if ((((q + curr) + 1L) <= (j.Length - 1L)))
                            {
#line 380 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 1L), (j.Length - 1L)))));
#line 381 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((j?.Slice(new QRange(((q + curr) + 1L), (j.Length - 1L))), z));
#line 382 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 1L), (j.Length - 1L)))));
#line 383 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(z);
#line 386 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 2L), (j.Length - 1L)))));
#line 387 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 388 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((QArray<Qubit>.Add(QArray<Qubit>.Add(j?.Slice(new QRange(((q + curr) + 2L), (j.Length - 1L))), new QArray<Qubit>(j[0L])), new QArray<Qubit>(j[((q + curr) + 1L)])), ld));
#line 389 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 390 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 2L), (j.Length - 1L)))));
#line 391 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(ld);
#line 394 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(j[((q + curr) + 1L)]), c));
#line 398 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                SquareAndMultiplyIteration.Adjoint.Controlled.Apply((new QArray<Qubit>(az), (a, QArray<Qubit>.Add(a, v)?.Slice(new QRange(((q + curReg) * lenA), ((((q + curReg) * lenA) + lenA) - 1L))), m, c, z, ld, v?.Slice(new QRange(((q + curReg) * lenA), ((((q + curReg) * lenA) + lenA) - 1L))))));
#line 400 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(az);
#line 401 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(az), v[((q + curReg) * lenA)]));
#line 402 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(az);
#line 405 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(j[((q + curr) + 1L)]), c));
#line 408 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(ld);
#line 409 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 2L), (j.Length - 1L)))));
#line 410 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 411 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((QArray<Qubit>.Add(QArray<Qubit>.Add(j?.Slice(new QRange(((q + curr) + 2L), (j.Length - 1L))), new QArray<Qubit>(j[0L])), new QArray<Qubit>(j[((q + curr) + 1L)])), ld));
#line 412 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 413 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 2L), (j.Length - 1L)))));
#line 417 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(z);
#line 418 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 1L), (j.Length - 1L)))));
#line 419 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((j?.Slice(new QRange(((q + curr) + 1L), (j.Length - 1L))), z));
#line 420 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 1L), (j.Length - 1L)))));
                            }
                        }

#line 426 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                        if ((curReg != (origNumAnc - 1L)))
                        {
#line 427 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                            foreach (var i in new QRange(0L, (lenA - 1L)))
#line hidden
                            {
#line 428 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicSWAP.Apply((v[(i + (curReg * lenA))], v[(i + ((origNumAnc - 1L) * lenA))]));
                            }
                        }

#line 432 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                        curr = (curr + numAnc);
#line 433 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                        curReg = (curReg + 1L);
#line 434 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                        numAnc = (numAnc - 1L);
                        if ((numAnc == 0L))
                        {
                            break;
                        }
                        else
                        {
                        }
                    }

#line 439 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    while (true)
                    {
#line 440 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                        numAnc = (numAnc + 1L);
#line 441 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                        curReg = (curReg - 1L);
#line 442 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                        curr = (curr - numAnc);
#line 444 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                        if ((curReg != (origNumAnc - 1L)))
                        {
#line 445 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                            foreach (var i in new QRange(0L, (lenA - 1L)))
#line hidden
                            {
#line 446 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicSWAP.Apply((v[(i + (curReg * lenA))], v[(i + ((origNumAnc - 1L) * lenA))]));
                            }
                        }

#line 449 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                        foreach (var q in new QRange(0L, (numAnc - 2L)))
#line hidden
                        {
#line 450 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                            if ((((q + curr) + 1L) <= (j.Length - 1L)))
                            {
#line 452 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 1L), (j.Length - 1L)))));
#line 453 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((j?.Slice(new QRange(((q + curr) + 1L), (j.Length - 1L))), z));
#line 454 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 1L), (j.Length - 1L)))));
#line 455 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(z);
#line 458 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 2L), (j.Length - 1L)))));
#line 459 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 460 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((QArray<Qubit>.Add(QArray<Qubit>.Add(j?.Slice(new QRange(((q + curr) + 2L), (j.Length - 1L))), new QArray<Qubit>(j[0L])), new QArray<Qubit>(j[((q + curr) + 1L)])), ld));
#line 461 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 462 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 2L), (j.Length - 1L)))));
#line 463 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(ld);
#line 466 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(j[((q + curr) + 1L)]), c));
#line 470 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                SquareAndMultiplyIteration.Controlled.Apply((new QArray<Qubit>(az), (a, QArray<Qubit>.Add(a, v)?.Slice(new QRange(((q + curReg) * lenA), ((((q + curReg) * lenA) + lenA) - 1L))), m, c, z, ld, v?.Slice(new QRange(((q + curReg) * lenA), ((((q + curReg) * lenA) + lenA) - 1L))))));
#line 472 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(az);
#line 473 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(az), v[((q + curReg) * lenA)]));
#line 474 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(az);
#line 478 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(j[((q + curr) + 1L)]), c));
#line 481 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(ld);
#line 482 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 2L), (j.Length - 1L)))));
#line 483 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 484 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((QArray<Qubit>.Add(QArray<Qubit>.Add(j?.Slice(new QRange(((q + curr) + 2L), (j.Length - 1L))), new QArray<Qubit>(j[0L])), new QArray<Qubit>(j[((q + curr) + 1L)])), ld));
#line 485 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 486 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 2L), (j.Length - 1L)))));
#line 490 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(z);
#line 491 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 1L), (j.Length - 1L)))));
#line 492 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((j?.Slice(new QRange(((q + curr) + 1L), (j.Length - 1L))), z));
#line 493 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 1L), (j.Length - 1L)))));
                            }
                        }

#line 498 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                        var g = 0L;
#line 499 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                        foreach (var k in new QRange(0L, (numAnc - 1L)))
#line hidden
                        {
#line 500 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                            g = ((numAnc - 1L) - k);
#line 502 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                            if ((((g + curr) + 1L) <= (j.Length - 1L)))
                            {
#line 504 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((g + curr) + 1L), (j.Length - 1L)))));
#line 505 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((j?.Slice(new QRange(((g + curr) + 1L), (j.Length - 1L))), z));
#line 506 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((g + curr) + 1L), (j.Length - 1L)))));
#line 507 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(z);
#line 510 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((g + curr) + 2L), (j.Length - 1L)))));
#line 511 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 512 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((QArray<Qubit>.Add(QArray<Qubit>.Add(j?.Slice(new QRange(((g + curr) + 2L), (j.Length - 1L))), new QArray<Qubit>(j[0L])), new QArray<Qubit>(j[((g + curr) + 1L)])), ld));
#line 513 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 514 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((g + curr) + 2L), (j.Length - 1L)))));
#line 515 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(ld);
#line 518 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(j[((g + curr) + 1L)]), c));
#line 522 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                SquareAndMultiplyIteration.Adjoint.Controlled.Apply((new QArray<Qubit>(az), (a, QArray<Qubit>.Add(a, v)?.Slice(new QRange(((g + curReg) * lenA), ((((g + curReg) * lenA) + lenA) - 1L))), m, c, z, ld, v?.Slice(new QRange(((g + curReg) * lenA), ((((g + curReg) * lenA) + lenA) - 1L))))));
#line 525 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(az);
#line 526 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(az), v[((g + curReg) * lenA)]));
#line 527 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(az);
#line 532 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(j[((g + curr) + 1L)]), c));
#line 535 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(ld);
#line 536 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((g + curr) + 2L), (j.Length - 1L)))));
#line 537 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 538 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((QArray<Qubit>.Add(QArray<Qubit>.Add(j?.Slice(new QRange(((g + curr) + 2L), (j.Length - 1L))), new QArray<Qubit>(j[0L])), new QArray<Qubit>(j[((g + curr) + 1L)])), ld));
#line 539 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 540 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((g + curr) + 2L), (j.Length - 1L)))));
#line 545 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Apply(z);
#line 546 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((g + curr) + 1L), (j.Length - 1L)))));
#line 547 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumIntrinsicX.Controlled.Apply((j?.Slice(new QRange(((g + curr) + 1L), (j.Length - 1L))), z));
#line 548 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                                MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((g + curr) + 1L), (j.Length - 1L)))));
                            }
                        }

                        if ((numAnc == origNumAnc))
                        {
                            break;
                        }
                        else
                        {
                        }
                    }

#line 558 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    MicrosoftQuantumIntrinsicX.Apply(az);
#line 559 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j));
#line 560 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    MicrosoftQuantumIntrinsicX.Controlled.Apply((j, az));
#line 561 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(v);
#line hidden
                        Release.Apply(c);
#line hidden
                        Release.Apply(z);
#line hidden
                        Release.Apply(az);
#line hidden
                        Release.Apply(ld);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MicrosoftQuantumCanonApplyToEachA = this.Factory.Get<IAdjointable>(typeof(Microsoft.Quantum.Canon.ApplyToEachA<>));
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
            this.SquareAndMultiplyIteration = this.Factory.Get<IUnitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Qubit,IQArray<Qubit>)>>(typeof(SquareAndMultiplyIteration));
            this.AddI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(AddI));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
            this.MicrosoftQuantumIntrinsicSWAP = this.Factory.Get<IUnitary<(Qubit,Qubit)>>(typeof(Microsoft.Quantum.Intrinsic.SWAP));
        }

        public override IApplyData __dataIn((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> a, IQArray<Qubit> m, IQArray<Qubit> j, IQArray<Qubit> result)
        {
            return __m__.Run<SquareAndMultiply, (IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid>((a, m, j, result));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs", OperationFunctor.Body, 572, -1)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs", OperationFunctor.Adjoint, 572, -1)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs", OperationFunctor.Controlled, 572, -1)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs", OperationFunctor.ControlledAdjoint, 572, -1)]
    public partial class SquareAndMultiplyIteration : Unitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Qubit,IQArray<Qubit>)>, ICallable
    {
        public SquareAndMultiplyIteration(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Qubit,IQArray<Qubit>)>, IApplyData
        {
            public In((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Qubit,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3)?.Qubits, ((IApplyData)Data.Item4)?.Qubits, ((IApplyData)Data.Item5)?.Qubits, ((IApplyData)Data.Item6)?.Qubits, ((IApplyData)Data.Item7)?.Qubits);
                }
            }
        }

        String ICallable.Name => "SquareAndMultiplyIteration";
        String ICallable.FullName => "Quantum.Bell.SquareAndMultiplyIteration";
        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> AddI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected ICallable Length
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)> SquareModM
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)> MultiplyModM
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Qubit,IQArray<Qubit>), QVoid> Body => (__in__) =>
        {
            var (a,v,m,c,z,ld,t) = __in__;
#line 573 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
            MicrosoftQuantumIntrinsicX.Apply(z);
#line 574 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
            AddI.Controlled.Apply((new QArray<Qubit>(z), (new Microsoft.Quantum.Arithmetic.LittleEndian(v), new Microsoft.Quantum.Arithmetic.LittleEndian(t))));
#line 575 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
            MicrosoftQuantumIntrinsicX.Apply(z);
#line hidden
            {
#line 576 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                var anc = Allocate.Apply(v.Length);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 577 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    SquareModM.Controlled.Apply((new QArray<Qubit>(z), (v, m, anc)));
#line 578 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    MultiplyModM.Controlled.Apply((new QArray<Qubit>(z, c, ld), (a, anc, m, t)));
#line 579 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    MicrosoftQuantumIntrinsicX.Apply(c);
#line 580 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    AddI.Controlled.Apply((new QArray<Qubit>(z, c), (new Microsoft.Quantum.Arithmetic.LittleEndian(anc), new Microsoft.Quantum.Arithmetic.LittleEndian(t))));
#line 581 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    MicrosoftQuantumIntrinsicX.Apply(c);
#line 582 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    MicrosoftQuantumIntrinsicX.Apply(ld);
#line 583 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    AddI.Controlled.Apply((new QArray<Qubit>(ld), (new Microsoft.Quantum.Arithmetic.LittleEndian(anc), new Microsoft.Quantum.Arithmetic.LittleEndian(t))));
#line 584 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    MicrosoftQuantumIntrinsicX.Apply(ld);
#line 586 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    SquareModM.Adjoint.Controlled.Apply((new QArray<Qubit>(z), (v, m, anc)));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(anc);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Qubit,IQArray<Qubit>), QVoid> AdjointBody => (__in__) =>
        {
            var (a,v,m,c,z,ld,t) = __in__;
#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
            {
#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                var __qsVar0__anc__ = Allocate.Apply(v.Length);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    SquareModM.Adjoint.Controlled.Adjoint.Apply((new QArray<Qubit>(z), (v, m, __qsVar0__anc__)));
#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    MicrosoftQuantumIntrinsicX.Adjoint.Apply(ld);
#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    AddI.Controlled.Adjoint.Apply((new QArray<Qubit>(ld), (new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar0__anc__), new Microsoft.Quantum.Arithmetic.LittleEndian(t))));
#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    MicrosoftQuantumIntrinsicX.Adjoint.Apply(ld);
#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    MicrosoftQuantumIntrinsicX.Adjoint.Apply(c);
#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    AddI.Controlled.Adjoint.Apply((new QArray<Qubit>(z, c), (new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar0__anc__), new Microsoft.Quantum.Arithmetic.LittleEndian(t))));
#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    MicrosoftQuantumIntrinsicX.Adjoint.Apply(c);
#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    MultiplyModM.Controlled.Adjoint.Apply((new QArray<Qubit>(z, c, ld), (a, __qsVar0__anc__, m, t)));
#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    SquareModM.Controlled.Adjoint.Apply((new QArray<Qubit>(z), (v, m, __qsVar0__anc__)));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(__qsVar0__anc__);
                    }
                }
            }

#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
            MicrosoftQuantumIntrinsicX.Adjoint.Apply(z);
#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
            AddI.Controlled.Adjoint.Apply((new QArray<Qubit>(z), (new Microsoft.Quantum.Arithmetic.LittleEndian(v), new Microsoft.Quantum.Arithmetic.LittleEndian(t))));
#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
            MicrosoftQuantumIntrinsicX.Adjoint.Apply(z);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Qubit,IQArray<Qubit>)), QVoid> ControlledBody => (__in__) =>
        {
            var (__controlQubits__,(a,v,m,c,z,ld,t)) = __in__;
#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
            MicrosoftQuantumIntrinsicX.Controlled.Apply((__controlQubits__, z));
#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
            AddI.Controlled.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(z), (new Microsoft.Quantum.Arithmetic.LittleEndian(v), new Microsoft.Quantum.Arithmetic.LittleEndian(t)))));
#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
            MicrosoftQuantumIntrinsicX.Controlled.Apply((__controlQubits__, z));
#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
            {
#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                var anc = Allocate.Apply(v.Length);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    SquareModM.Controlled.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(z), (v, m, anc))));
#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    MultiplyModM.Controlled.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(z, c, ld), (a, anc, m, t))));
#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    MicrosoftQuantumIntrinsicX.Controlled.Apply((__controlQubits__, c));
#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    AddI.Controlled.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(z, c), (new Microsoft.Quantum.Arithmetic.LittleEndian(anc), new Microsoft.Quantum.Arithmetic.LittleEndian(t)))));
#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    MicrosoftQuantumIntrinsicX.Controlled.Apply((__controlQubits__, c));
#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    MicrosoftQuantumIntrinsicX.Controlled.Apply((__controlQubits__, ld));
#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    AddI.Controlled.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(ld), (new Microsoft.Quantum.Arithmetic.LittleEndian(anc), new Microsoft.Quantum.Arithmetic.LittleEndian(t)))));
#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    MicrosoftQuantumIntrinsicX.Controlled.Apply((__controlQubits__, ld));
#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    SquareModM.Adjoint.Controlled.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(z), (v, m, anc))));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(anc);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Qubit,IQArray<Qubit>)), QVoid> ControlledAdjointBody => (__in__) =>
        {
            var (__controlQubits__,(a,v,m,c,z,ld,t)) = __in__;
#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
            {
#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                var __qsVar0__anc__ = Allocate.Apply(v.Length);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    SquareModM.Adjoint.Controlled.Adjoint.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(z), (v, m, __qsVar0__anc__))));
#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    MicrosoftQuantumIntrinsicX.Adjoint.Controlled.Apply((__controlQubits__, ld));
#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    AddI.Controlled.Adjoint.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(ld), (new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar0__anc__), new Microsoft.Quantum.Arithmetic.LittleEndian(t)))));
#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    MicrosoftQuantumIntrinsicX.Adjoint.Controlled.Apply((__controlQubits__, ld));
#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    MicrosoftQuantumIntrinsicX.Adjoint.Controlled.Apply((__controlQubits__, c));
#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    AddI.Controlled.Adjoint.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(z, c), (new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar0__anc__), new Microsoft.Quantum.Arithmetic.LittleEndian(t)))));
#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    MicrosoftQuantumIntrinsicX.Adjoint.Controlled.Apply((__controlQubits__, c));
#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    MultiplyModM.Controlled.Adjoint.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(z, c, ld), (a, __qsVar0__anc__, m, t))));
#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
                    SquareModM.Controlled.Adjoint.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(z), (v, m, __qsVar0__anc__))));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(__qsVar0__anc__);
                    }
                }
            }

#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
            MicrosoftQuantumIntrinsicX.Adjoint.Controlled.Apply((__controlQubits__, z));
#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
            AddI.Controlled.Adjoint.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(z), (new Microsoft.Quantum.Arithmetic.LittleEndian(v), new Microsoft.Quantum.Arithmetic.LittleEndian(t)))));
#line 572 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Inital_Test/squareAndmultiply.qs"
            MicrosoftQuantumIntrinsicX.Adjoint.Controlled.Apply((__controlQubits__, z));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
            this.AddI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(AddI));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.SquareModM = this.Factory.Get<IUnitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)>>(typeof(SquareModM));
            this.MultiplyModM = this.Factory.Get<IUnitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)>>(typeof(MultiplyModM));
        }

        public override IApplyData __dataIn((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Qubit,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> a, IQArray<Qubit> v, IQArray<Qubit> m, Qubit c, Qubit z, Qubit ld, IQArray<Qubit> t)
        {
            return __m__.Run<SquareAndMultiplyIteration, (IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Qubit,IQArray<Qubit>), QVoid>((a, v, m, c, z, ld, t));
        }
    }
}