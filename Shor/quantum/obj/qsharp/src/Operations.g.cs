//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Shor\",\"Name\":\"FactorInteger\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor/quantum/Operations.qs\",\"Position\":{\"Item1\":10,\"Item2\":2},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"N\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":25},\"Item2\":{\"Line\":1,\"Column\":26}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"Int\"},\"ReturnType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"FactorInteger\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor/quantum/Operations.qs\",\"Position\":{\"Item1\":10,\"Item2\":2},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"Documentation\":[]}")]
#line hidden
namespace Shor
{
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor/quantum/Operations.qs", OperationFunctor.Body, 11, -1)]
    public partial class FactorInteger : Operation<Int64, (Int64,Int64)>, ICallable
    {
        public FactorInteger(IOperationFactory m) : base(m)
        {
        }

        public class Out : QTuple<(Int64,Int64)>, IApplyData
        {
            public Out((Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "FactorInteger";
        String ICallable.FullName => "Shor.FactorInteger";
        protected ICallable<String, QVoid> MicrosoftQuantumIntrinsicMessage
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64), Int64> MicrosoftQuantumMathGreatestCommonDivisorI
        {
            get;
            set;
        }

        protected ICallable<Int64, Int64> MicrosoftQuantumMathBitSizeI
        {
            get;
            set;
        }

        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected IAdjointable MicrosoftQuantumCanonApplyToEachA
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicH
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        protected ICallable Length
        {
            get;
            set;
        }

        protected IUnitary<(Int64,Int64,Microsoft.Quantum.Arithmetic.LittleEndian)> MicrosoftQuantumArithmeticMultiplyByModularInteger
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        protected IUnitary<Microsoft.Quantum.Arithmetic.BigEndian> MicrosoftQuantumCanonQFT
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.BigEndian> MicrosoftQuantumArithmeticBigEndian
        {
            get;
            set;
        }

        protected ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64> MicrosoftQuantumArithmeticMeasureInteger
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> MicrosoftQuantumIntrinsicResetAll
        {
            get;
            set;
        }

        protected ICallable<(Microsoft.Quantum.Math.BigFraction,System.Numerics.BigInteger), Microsoft.Quantum.Math.BigFraction> MicrosoftQuantumMathContinuedFractionConvergentL
        {
            get;
            set;
        }

        protected ICallable<(System.Numerics.BigInteger,System.Numerics.BigInteger), Microsoft.Quantum.Math.BigFraction> MicrosoftQuantumMathBigFraction
        {
            get;
            set;
        }

        protected ICallable<Int64, System.Numerics.BigInteger> MicrosoftQuantumConvertIntAsBigInt
        {
            get;
            set;
        }

        protected ICallable<System.Numerics.BigInteger, System.Numerics.BigInteger> MicrosoftQuantumMathAbsL
        {
            get;
            set;
        }

        protected ICallable<System.Numerics.BigInteger, Int64> ReduceBigIntToInt
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,Int64), Int64> MicrosoftQuantumMathExpModI
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64), Int64> MicrosoftQuantumMathMaxI
        {
            get;
            set;
        }

        public override Func<Int64, (Int64,Int64)> Body => (__in__) =>
        {
            var N = __in__;
#line 14 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor/quantum/Operations.qs"
            var x = 7L;
#line 15 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor/quantum/Operations.qs"
            MicrosoftQuantumIntrinsicMessage.Apply(String.Format("checking {0}", x));
#line 17 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor/quantum/Operations.qs"
            var gcd = MicrosoftQuantumMathGreatestCommonDivisorI.Apply((N, x));
#line 18 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor/quantum/Operations.qs"
            if ((gcd > 1L))
            {
#line 18 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor/quantum/Operations.qs"
                return (gcd, (N / gcd));
            }

#line 23 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor/quantum/Operations.qs"
            var numBits = MicrosoftQuantumMathBitSizeI.Apply(N);
#line 24 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor/quantum/Operations.qs"
            var estimateBitPrecision = ((2L * numBits) + 1L);
#line 25 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor/quantum/Operations.qs"
            MicrosoftQuantumIntrinsicMessage.Apply(String.Format("Need {0} qubits for register 1", numBits));
#line 26 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor/quantum/Operations.qs"
            var result = 0L;
#line 27 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor/quantum/Operations.qs"
            var period = 0L;
#line 29 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor/quantum/Operations.qs"
            while (true)
            {
#line 30 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor/quantum/Operations.qs"
                MicrosoftQuantumIntrinsicMessage.Apply("============");
#line hidden
                {
#line 31 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor/quantum/Operations.qs"
                    var (q1,q2) = (Allocate.Apply(estimateBitPrecision), Allocate.Apply(numBits));
#line hidden
                    bool __arg1__ = true;
                    try
                    {
#line 33 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor/quantum/Operations.qs"
                        MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicH, q1));
#line 35 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor/quantum/Operations.qs"
                        MicrosoftQuantumIntrinsicX.Apply(q2[0L]);
#line 38 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor/quantum/Operations.qs"
                        foreach (var i in new QRange(0L, (q1.Length - 1L)))
#line hidden
                        {
#line 39 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor/quantum/Operations.qs"
                            var x_modN = 1L;
#line 40 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor/quantum/Operations.qs"
                            foreach (var pow in new QRange(0L, 2L.Pow(((q1.Length - 1L) - i))))
#line hidden
                            {
#line 41 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor/quantum/Operations.qs"
                                x_modN = ((x_modN * x) % N);
                            }

#line 44 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor/quantum/Operations.qs"
                            MicrosoftQuantumArithmeticMultiplyByModularInteger.Controlled.Apply((new QArray<Qubit>(q1[i]), (x_modN, N, new Microsoft.Quantum.Arithmetic.LittleEndian(q2))));
                        }

#line 48 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor/quantum/Operations.qs"
                        MicrosoftQuantumCanonQFT.Adjoint.Apply(new Microsoft.Quantum.Arithmetic.BigEndian(q1));
#line 50 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor/quantum/Operations.qs"
                        result = MicrosoftQuantumArithmeticMeasureInteger.Apply(new Microsoft.Quantum.Arithmetic.LittleEndian(q1));
#line 51 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor/quantum/Operations.qs"
                        MicrosoftQuantumIntrinsicResetAll.Apply(q1);
#line 52 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor/quantum/Operations.qs"
                        MicrosoftQuantumIntrinsicResetAll.Apply(q2);
                    }
#line hidden
                    catch
                    {
                        __arg1__ = false;
                        throw;
                    }
#line hidden
                    finally
                    {
                        if (__arg1__)
                        {
#line hidden
                            Release.Apply(q1);
#line hidden
                            Release.Apply(q2);
                        }
                    }
                }

#line 55 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor/quantum/Operations.qs"
                MicrosoftQuantumIntrinsicMessage.Apply(String.Format("The result is {0}", result));
#line 56 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor/quantum/Operations.qs"
                var gcdResult = MicrosoftQuantumMathGreatestCommonDivisorI.Apply((result, 2L.Pow(numBits)));
#line 57 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor/quantum/Operations.qs"
                var numerator = (result / gcdResult);
#line 58 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor/quantum/Operations.qs"
                var denominator = (2L.Pow(numBits) / gcdResult);
#line 60 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor/quantum/Operations.qs"
                MicrosoftQuantumIntrinsicMessage.Apply(String.Format("s/r = {0}/{1}", numerator, denominator));
#line 61 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor/quantum/Operations.qs"
                var aFraction = MicrosoftQuantumMathContinuedFractionConvergentL.Apply((new Microsoft.Quantum.Math.BigFraction((MicrosoftQuantumConvertIntAsBigInt.Apply(numerator), MicrosoftQuantumConvertIntAsBigInt.Apply(denominator))), MicrosoftQuantumConvertIntAsBigInt.Apply(N)));
#line 62 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor/quantum/Operations.qs"
                var (aNumerator,aDenominator) = aFraction.Data;
#line 63 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor/quantum/Operations.qs"
                var periodL = MicrosoftQuantumMathAbsL.Apply(aDenominator);
#line 64 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor/quantum/Operations.qs"
                period = ReduceBigIntToInt.Apply(periodL);
                if ((((period != 0L) && (MicrosoftQuantumMathExpModI.Apply((x, period, N)) == 1L)) && ((period % 2L) == 0L)))
                {
                    break;
                }
                else
                {
                }
            }

#line 69 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor/quantum/Operations.qs"
            var halfPower = MicrosoftQuantumMathExpModI.Apply((x, (period / 2L), N));
#line 70 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor/quantum/Operations.qs"
            if ((halfPower != -(1L)))
            {
#line 71 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor/quantum/Operations.qs"
                var factor = MicrosoftQuantumMathMaxI.Apply((MicrosoftQuantumMathGreatestCommonDivisorI.Apply(((halfPower - 1L), N)), MicrosoftQuantumMathGreatestCommonDivisorI.Apply(((halfPower + 1L), N))));
#line 76 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor/quantum/Operations.qs"
                return (factor, (N / factor));
            }

#line 79 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor/quantum/Operations.qs"
            return (0L, 0L);
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumIntrinsicMessage = this.Factory.Get<ICallable<String, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.Message));
            this.MicrosoftQuantumMathGreatestCommonDivisorI = this.Factory.Get<ICallable<(Int64,Int64), Int64>>(typeof(Microsoft.Quantum.Math.GreatestCommonDivisorI));
            this.MicrosoftQuantumMathBitSizeI = this.Factory.Get<ICallable<Int64, Int64>>(typeof(Microsoft.Quantum.Math.BitSizeI));
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MicrosoftQuantumCanonApplyToEachA = this.Factory.Get<IAdjointable>(typeof(Microsoft.Quantum.Canon.ApplyToEachA<>));
            this.MicrosoftQuantumIntrinsicH = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.H));
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumArithmeticMultiplyByModularInteger = this.Factory.Get<IUnitary<(Int64,Int64,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(Microsoft.Quantum.Arithmetic.MultiplyByModularInteger));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
            this.MicrosoftQuantumCanonQFT = this.Factory.Get<IUnitary<Microsoft.Quantum.Arithmetic.BigEndian>>(typeof(Microsoft.Quantum.Canon.QFT));
            this.MicrosoftQuantumArithmeticBigEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.BigEndian>>(typeof(Microsoft.Quantum.Arithmetic.BigEndian));
            this.MicrosoftQuantumArithmeticMeasureInteger = this.Factory.Get<ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64>>(typeof(Microsoft.Quantum.Arithmetic.MeasureInteger));
            this.MicrosoftQuantumIntrinsicResetAll = this.Factory.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.ResetAll));
            this.MicrosoftQuantumMathContinuedFractionConvergentL = this.Factory.Get<ICallable<(Microsoft.Quantum.Math.BigFraction,System.Numerics.BigInteger), Microsoft.Quantum.Math.BigFraction>>(typeof(Microsoft.Quantum.Math.ContinuedFractionConvergentL));
            this.MicrosoftQuantumMathBigFraction = this.Factory.Get<ICallable<(System.Numerics.BigInteger,System.Numerics.BigInteger), Microsoft.Quantum.Math.BigFraction>>(typeof(Microsoft.Quantum.Math.BigFraction));
            this.MicrosoftQuantumConvertIntAsBigInt = this.Factory.Get<ICallable<Int64, System.Numerics.BigInteger>>(typeof(Microsoft.Quantum.Convert.IntAsBigInt));
            this.MicrosoftQuantumMathAbsL = this.Factory.Get<ICallable<System.Numerics.BigInteger, System.Numerics.BigInteger>>(typeof(Microsoft.Quantum.Math.AbsL));
            this.ReduceBigIntToInt = this.Factory.Get<ICallable<System.Numerics.BigInteger, Int64>>(typeof(ReduceBigIntToInt));
            this.MicrosoftQuantumMathExpModI = this.Factory.Get<ICallable<(Int64,Int64,Int64), Int64>>(typeof(Microsoft.Quantum.Math.ExpModI));
            this.MicrosoftQuantumMathMaxI = this.Factory.Get<ICallable<(Int64,Int64), Int64>>(typeof(Microsoft.Quantum.Math.MaxI));
        }

        public override IApplyData __dataIn(Int64 data) => new QTuple<Int64>(data);
        public override IApplyData __dataOut((Int64,Int64) data) => new Out(data);
        public static System.Threading.Tasks.Task<(Int64,Int64)> Run(IOperationFactory __m__, Int64 N)
        {
            return __m__.Run<FactorInteger, Int64, (Int64,Int64)>(N);
        }
    }
}