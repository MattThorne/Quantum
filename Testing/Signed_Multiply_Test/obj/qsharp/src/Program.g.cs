//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"SignedMultiply.Testing\",\"Name\":\"Testing_with_Toffoli\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs\",\"Position\":{\"Item1\":12,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":31}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"aI\"]},\"Type\":{\"Case\":\"BigInt\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":32},\"Item2\":{\"Line\":1,\"Column\":34}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"aS\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":42},\"Item2\":{\"Line\":1,\"Column\":44}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"bI\"]},\"Type\":{\"Case\":\"BigInt\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":49},\"Item2\":{\"Line\":1,\"Column\":51}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"bS\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":59},\"Item2\":{\"Line\":1,\"Column\":61}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"numBits\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":66},\"Item2\":{\"Line\":1,\"Column\":73}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"BigInt\"},{\"Case\":\"Int\"},{\"Case\":\"BigInt\"},{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"SignedMultiply.Testing\",\"Name\":\"Testing_with_Toffoli\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs\",\"Position\":{\"Item1\":12,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":31}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"SignedMultiply.Testing\",\"Name\":\"Testing_in_Superposition\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs\",\"Position\":{\"Item1\":40,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":35}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"SignedMultiply.Testing\",\"Name\":\"Testing_in_Superposition\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs\",\"Position\":{\"Item1\":40,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":35}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"SignedMultiply.Testing\",\"Name\":\"SignedMultiply\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs\",\"Position\":{\"Item1\":61,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":25}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"a\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":26},\"Item2\":{\"Line\":1,\"Column\":27}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"b\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":39},\"Item2\":{\"Line\":1,\"Column\":40}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"t\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":50},\"Item2\":{\"Line\":1,\"Column\":51}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"SignedMultiply.Testing\",\"Name\":\"SignedMultiply\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs\",\"Position\":{\"Item1\":63,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":5}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"SignedMultiply.Testing\",\"Name\":\"SignedMultiply\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs\",\"Position\":{\"Item1\":73,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":8}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"SignedMultiply.Testing\",\"Name\":\"SignedMultiply\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs\",\"Position\":{\"Item1\":61,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":71},\"Item2\":{\"Line\":1,\"Column\":80}},\"Documentation\":[\"automatically generated QsControlled specialization for SignedMultiply.Testing.SignedMultiply\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"SignedMultiply.Testing\",\"Name\":\"SignedMultiply\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs\",\"Position\":{\"Item1\":61,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":71},\"Item2\":{\"Line\":1,\"Column\":80}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for SignedMultiply.Testing.SignedMultiply\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"SignedMultiply.Testing\",\"Name\":\"DivideI\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs\",\"Position\":{\"Item1\":79,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"xs\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":24},\"Item2\":{\"Line\":1,\"Column\":36}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":20},\"Item2\":{\"Line\":1,\"Column\":22}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"ys\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":42},\"Item2\":{\"Line\":1,\"Column\":54}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":38},\"Item2\":{\"Line\":1,\"Column\":40}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"result\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":2,\"Column\":40},\"Item2\":{\"Line\":2,\"Column\":52}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":32},\"Item2\":{\"Line\":2,\"Column\":38}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"SignedMultiply.Testing\",\"Name\":\"DivideI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs\",\"Position\":{\"Item1\":81,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":5}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"SignedMultiply.Testing\",\"Name\":\"DivideI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs\",\"Position\":{\"Item1\":104,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":8}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"SignedMultiply.Testing\",\"Name\":\"DivideI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs\",\"Position\":{\"Item1\":84,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":11}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"SignedMultiply.Testing\",\"Name\":\"DivideI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs\",\"Position\":{\"Item1\":105,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":19}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"SignedMultiply.Testing\",\"Name\":\"AddI\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs\",\"Position\":{\"Item1\":107,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":15}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"xs\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":21},\"Item2\":{\"Line\":1,\"Column\":33}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":17},\"Item2\":{\"Line\":1,\"Column\":19}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"ys\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":39},\"Item2\":{\"Line\":1,\"Column\":51}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":35},\"Item2\":{\"Line\":1,\"Column\":37}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"SignedMultiply.Testing\",\"Name\":\"AddI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs\",\"Position\":{\"Item1\":107,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":15}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"SignedMultiply.Testing\",\"Name\":\"AddI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs\",\"Position\":{\"Item1\":107,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":63},\"Item2\":{\"Line\":1,\"Column\":72}},\"Documentation\":[\"automatically generated QsAdjoint specialization for SignedMultiply.Testing.AddI\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"SignedMultiply.Testing\",\"Name\":\"AddI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs\",\"Position\":{\"Item1\":107,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":63},\"Item2\":{\"Line\":1,\"Column\":72}},\"Documentation\":[\"automatically generated QsControlled specialization for SignedMultiply.Testing.AddI\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"SignedMultiply.Testing\",\"Name\":\"AddI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs\",\"Position\":{\"Item1\":107,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":63},\"Item2\":{\"Line\":1,\"Column\":72}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for SignedMultiply.Testing.AddI\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"SignedMultiply.Testing\",\"Name\":\"CompareGTI\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs\",\"Position\":{\"Item1\":121,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":21}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"xs\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":27},\"Item2\":{\"Line\":1,\"Column\":39}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":23},\"Item2\":{\"Line\":1,\"Column\":25}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"ys\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":45},\"Item2\":{\"Line\":1,\"Column\":57}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":41},\"Item2\":{\"Line\":1,\"Column\":43}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"result\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":29},\"Item2\":{\"Line\":2,\"Column\":35}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"SignedMultiply.Testing\",\"Name\":\"CompareGTI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs\",\"Position\":{\"Item1\":121,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":21}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"SignedMultiply.Testing\",\"Name\":\"CompareGTI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs\",\"Position\":{\"Item1\":121,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":2,\"Column\":54},\"Item2\":{\"Line\":2,\"Column\":63}},\"Documentation\":[\"automatically generated QsAdjoint specialization for SignedMultiply.Testing.CompareGTI\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"SignedMultiply.Testing\",\"Name\":\"CompareGTI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs\",\"Position\":{\"Item1\":121,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":2,\"Column\":54},\"Item2\":{\"Line\":2,\"Column\":63}},\"Documentation\":[\"automatically generated QsControlled specialization for SignedMultiply.Testing.CompareGTI\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"SignedMultiply.Testing\",\"Name\":\"CompareGTI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs\",\"Position\":{\"Item1\":121,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":2,\"Column\":54},\"Item2\":{\"Line\":2,\"Column\":63}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for SignedMultiply.Testing.CompareGTI\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"SignedMultiply.Testing\",\"Name\":\"MultiplyI\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs\",\"Position\":{\"Item1\":126,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"xs\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":26},\"Item2\":{\"Line\":1,\"Column\":38}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":22},\"Item2\":{\"Line\":1,\"Column\":24}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"ys\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":44},\"Item2\":{\"Line\":1,\"Column\":56}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":40},\"Item2\":{\"Line\":1,\"Column\":42}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"result\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":2,\"Column\":34},\"Item2\":{\"Line\":2,\"Column\":46}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":26},\"Item2\":{\"Line\":2,\"Column\":32}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"SignedMultiply.Testing\",\"Name\":\"MultiplyI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs\",\"Position\":{\"Item1\":128,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":5}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"SignedMultiply.Testing\",\"Name\":\"MultiplyI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs\",\"Position\":{\"Item1\":158,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":8}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"SignedMultiply.Testing\",\"Name\":\"MultiplyI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs\",\"Position\":{\"Item1\":141,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":11}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"SignedMultiply.Testing\",\"Name\":\"MultiplyI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs\",\"Position\":{\"Item1\":159,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":19}},\"Documentation\":[]}")]
#line hidden
namespace SignedMultiply.Testing
{
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs", OperationFunctor.Body, 13, 41)]
    public partial class Testing_with_Toffoli : Operation<(System.Numerics.BigInteger,Int64,System.Numerics.BigInteger,Int64,Int64), Int64>, ICallable
    {
        public Testing_with_Toffoli(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(System.Numerics.BigInteger,Int64,System.Numerics.BigInteger,Int64,Int64)>, IApplyData
        {
            public In((System.Numerics.BigInteger,Int64,System.Numerics.BigInteger,Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "Testing_with_Toffoli";
        String ICallable.FullName => "SignedMultiply.Testing.Testing_with_Toffoli";
        protected ICallable<System.Numerics.BigInteger, IQArray<Boolean>> MicrosoftQuantumConvertBigIntAsBoolArray
        {
            get;
            set;
        }

        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected ICallable Length
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)> SignedMultiply
        {
            get;
            set;
        }

        protected ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64> MicrosoftQuantumArithmeticMeasureInteger
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> ResetAll
        {
            get;
            set;
        }

        public override Func<(System.Numerics.BigInteger,Int64,System.Numerics.BigInteger,Int64,Int64), Int64> Body => (__in__) =>
        {
            var (aI,aS,bI,bS,numBits) = __in__;
#line 14 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            var aArr = (IQArray<Boolean>)MicrosoftQuantumConvertBigIntAsBoolArray.Apply(aI);
#line 15 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            var bArr = (IQArray<Boolean>)MicrosoftQuantumConvertBigIntAsBoolArray.Apply(bI);
#line hidden
            {
#line 16 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                var (a,b,t) = (Allocate.Apply((numBits + 1L)), Allocate.Apply((numBits + 1L)), Allocate.Apply(((2L * (numBits + 1L)) - 1L)));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 18 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                    foreach (var i in new QRange(0L, (aArr.Length - 1L)))
#line hidden
                    {
#line 19 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                        if ((aArr[i] == true))
                        {
#line 19 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                            MicrosoftQuantumIntrinsicX.Apply(a[i]);
                        }
                    }

#line 21 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                    if ((aS == 1L))
                    {
#line 21 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                        MicrosoftQuantumIntrinsicX.Apply(a[numBits]);
                    }

#line 22 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                    foreach (var i in new QRange(0L, (bArr.Length - 1L)))
#line hidden
                    {
#line 23 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                        if ((bArr[i] == true))
                        {
#line 23 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                            MicrosoftQuantumIntrinsicX.Apply(b[i]);
                        }
                    }

#line 25 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                    if ((bS == 1L))
                    {
#line 25 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                        MicrosoftQuantumIntrinsicX.Apply(b[numBits]);
                    }

#line 28 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                    SignedMultiply.Apply((a, b, t));
#line 29 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                    var result = 0L;
#line 31 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                    result = MicrosoftQuantumArithmeticMeasureInteger.Apply(new Microsoft.Quantum.Arithmetic.LittleEndian(t?.Slice(new QRange(0L, ((2L * (numBits + 1L)) - 3L)))));
#line 32 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                    var resultSign = MicrosoftQuantumArithmeticMeasureInteger.Apply(new Microsoft.Quantum.Arithmetic.LittleEndian(new QArray<Qubit>(t[((2L * (numBits + 1L)) - 2L)])));
#line 33 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                    if ((resultSign == 1L))
                    {
#line 33 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                        result = (result * -(1L));
                    }

#line 35 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                    ResetAll.Apply(QArray<Qubit>.Add(QArray<Qubit>.Add(a, b), t));
#line 36 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                    return result;
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(a);
#line hidden
                        Release.Apply(b);
#line hidden
                        Release.Apply(t);
                    }
                }
            }
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumConvertBigIntAsBoolArray = this.Factory.Get<ICallable<System.Numerics.BigInteger, IQArray<Boolean>>>(typeof(Microsoft.Quantum.Convert.BigIntAsBoolArray));
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
            this.SignedMultiply = this.Factory.Get<IUnitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)>>(typeof(SignedMultiply));
            this.MicrosoftQuantumArithmeticMeasureInteger = this.Factory.Get<ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64>>(typeof(Microsoft.Quantum.Arithmetic.MeasureInteger));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
            this.ResetAll = this.Factory.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.ResetAll));
        }

        public override IApplyData __dataIn((System.Numerics.BigInteger,Int64,System.Numerics.BigInteger,Int64,Int64) data) => new In(data);
        public override IApplyData __dataOut(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__, System.Numerics.BigInteger aI, Int64 aS, System.Numerics.BigInteger bI, Int64 bS, Int64 numBits)
        {
            return __m__.Run<Testing_with_Toffoli, (System.Numerics.BigInteger,Int64,System.Numerics.BigInteger,Int64,Int64), Int64>((aI, aS, bI, bS, numBits));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs", OperationFunctor.Body, 41, 62)]
    public partial class Testing_in_Superposition : Operation<QVoid, QVoid>, ICallable
    {
        public Testing_in_Superposition(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "Testing_in_Superposition";
        String ICallable.FullName => "SignedMultiply.Testing.Testing_in_Superposition";
        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)> SignedMultiply
        {
            get;
            set;
        }

        protected ICallable MicrosoftQuantumDiagnosticsDumpMachine
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> ResetAll
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> Body => (__in__) =>
        {
#line 42 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            var numQubits = 6L;
#line hidden
            {
#line 43 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                var (a,b,t) = (Allocate.Apply(numQubits), Allocate.Apply(numQubits), Allocate.Apply(((2L * numQubits) - 1L)));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 48 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(a[1L]);
#line 49 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(a[(numQubits - 1L)]);
#line 50 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(b[1L]);
#line 54 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                    SignedMultiply.Apply((a, b, t));
#line 57 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                    MicrosoftQuantumDiagnosticsDumpMachine.Apply("TestingInSuperpositionResults.txt");
#line 58 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                    ResetAll.Apply(QArray<Qubit>.Add(QArray<Qubit>.Add(a, b), t));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(a);
#line hidden
                        Release.Apply(b);
#line hidden
                        Release.Apply(t);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
            this.SignedMultiply = this.Factory.Get<IUnitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)>>(typeof(SignedMultiply));
            this.MicrosoftQuantumDiagnosticsDumpMachine = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Diagnostics.DumpMachine<>));
            this.ResetAll = this.Factory.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.ResetAll));
        }

        public override IApplyData __dataIn(QVoid data) => data;
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<Testing_in_Superposition, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs", OperationFunctor.Body, 64, 74)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs", OperationFunctor.Adjoint, 74, 80)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs", OperationFunctor.Controlled, 62, 64)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs", OperationFunctor.ControlledAdjoint, 62, 64)]
    public partial class SignedMultiply : Unitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)>, ICallable
    {
        public SignedMultiply(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)>, IApplyData
        {
            public In((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3)?.Qubits);
                }
            }
        }

        String ICallable.Name => "SignedMultiply";
        String ICallable.FullName => "SignedMultiply.Testing.SignedMultiply";
        protected ICallable<(Int64,Int64,String), QVoid> MicrosoftQuantumDiagnosticsEqualityFactI
        {
            get;
            set;
        }

        protected ICallable Length
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> MicrosoftQuantumIntrinsicCNOT
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> MultiplyI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid> Body => (__in__) =>
        {
            var (a,b,t) = __in__;
#line 65 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((((2L * a.Length) - 1L), t.Length, "Signed multiplication requires a (2n-1)-bit result register."));
#line 66 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            var aS = a[(a.Length - 1L)];
#line 67 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            var bS = b[(b.Length - 1L)];
#line 68 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            var tS = t[(t.Length - 1L)];
#line 69 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Apply((aS, tS));
#line 70 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Apply((bS, tS));
#line 72 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            MultiplyI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(a?.Slice(new QRange(0L, (a.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(b?.Slice(new QRange(0L, (b.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(t?.Slice(new QRange(0L, (t.Length - 2L))))));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid> AdjointBody => (__in__) =>
        {
            var (a,b,t) = __in__;
#line 74 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((((2L * a.Length) - 1L), t.Length, "Signed multiplication requires a (2n-1)-bit result register."));
#line 74 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            var __qsVar0__aS__ = a[(a.Length - 1L)];
#line 74 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            var __qsVar1__bS__ = b[(b.Length - 1L)];
#line 74 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            var __qsVar2__tS__ = t[(t.Length - 1L)];
#line 74 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            MultiplyI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(a?.Slice(new QRange(0L, (a.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(b?.Slice(new QRange(0L, (b.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(t?.Slice(new QRange(0L, (t.Length - 2L))))));
#line 74 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Adjoint.Apply((__qsVar1__bS__, __qsVar2__tS__));
#line 74 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Adjoint.Apply((__qsVar0__aS__, __qsVar2__tS__));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)), QVoid> ControlledBody => (__in__) =>
        {
            var (__controlQubits__,(a,b,t)) = __in__;
#line 62 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((((2L * a.Length) - 1L), t.Length, "Signed multiplication requires a (2n-1)-bit result register."));
#line 62 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            var aS = a[(a.Length - 1L)];
#line 62 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            var bS = b[(b.Length - 1L)];
#line 62 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            var tS = t[(t.Length - 1L)];
#line 62 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Controlled.Apply((__controlQubits__, (aS, tS)));
#line 62 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Controlled.Apply((__controlQubits__, (bS, tS)));
#line 62 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            MultiplyI.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(a?.Slice(new QRange(0L, (a.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(b?.Slice(new QRange(0L, (b.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(t?.Slice(new QRange(0L, (t.Length - 2L)))))));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)), QVoid> ControlledAdjointBody => (__in__) =>
        {
            var (__controlQubits__,(a,b,t)) = __in__;
#line 62 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((((2L * a.Length) - 1L), t.Length, "Signed multiplication requires a (2n-1)-bit result register."));
#line 62 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            var __qsVar0__aS__ = a[(a.Length - 1L)];
#line 62 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            var __qsVar1__bS__ = b[(b.Length - 1L)];
#line 62 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            var __qsVar2__tS__ = t[(t.Length - 1L)];
#line 62 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            MultiplyI.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(a?.Slice(new QRange(0L, (a.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(b?.Slice(new QRange(0L, (b.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(t?.Slice(new QRange(0L, (t.Length - 2L)))))));
#line 62 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Adjoint.Controlled.Apply((__controlQubits__, (__qsVar1__bS__, __qsVar2__tS__)));
#line 62 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Adjoint.Controlled.Apply((__controlQubits__, (__qsVar0__aS__, __qsVar2__tS__)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumDiagnosticsEqualityFactI = this.Factory.Get<ICallable<(Int64,Int64,String), QVoid>>(typeof(Microsoft.Quantum.Diagnostics.EqualityFactI));
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumIntrinsicCNOT = this.Factory.Get<IUnitary<(Qubit,Qubit)>>(typeof(Microsoft.Quantum.Intrinsic.CNOT));
            this.MultiplyI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(MultiplyI));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
        }

        public override IApplyData __dataIn((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> a, IQArray<Qubit> b, IQArray<Qubit> t)
        {
            return __m__.Run<SignedMultiply, (IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid>((a, b, t));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs", OperationFunctor.Body, 82, 85)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs", OperationFunctor.Adjoint, 105, 106)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs", OperationFunctor.Controlled, 85, 105)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs", OperationFunctor.ControlledAdjoint, 106, 108)]
    public partial class DivideI : Unitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>, ICallable
    {
        public DivideI(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>, IApplyData
        {
            public In((Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1?.Data)?.Qubits, ((IApplyData)Data.Item2?.Data)?.Qubits, ((IApplyData)Data.Item3?.Data)?.Qubits);
                }
            }
        }

        String ICallable.Name => "DivideI";
        String ICallable.FullName => "SignedMultiply.Testing.DivideI";
        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> self
        {
            get;
            set;
        }

        protected ICallable Length
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,String), QVoid> MicrosoftQuantumDiagnosticsEqualityFactI
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> MicrosoftQuantumDiagnosticsAssertAllZero
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)> CompareGTI
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> AddI
        {
            get;
            set;
        }

        protected ICallable<QRange, QRange> RangeReverse
        {
            get;
            set;
        }

        public override Func<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid> Body => (__in__) =>
        {
            var (xs,ys,result) = __in__;
#line 83 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            self.Controlled.Apply((QArray<Qubit>.Create(0L), (xs, ys, result)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid> AdjointBody => (__in__) =>
        {
            var (xs,ys,result) = __in__;
#line 105 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            self.Controlled.Adjoint.Apply((QArray<Qubit>.Create(0L), (xs, ys, result)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)), QVoid> ControlledBody => (__in__) =>
        {
            var (controls,(xs,ys,result)) = __in__;
#line 86 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            var n = result.Data.Length;
#line 88 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((n, ys.Data.Length, "Integer division requires\n                           equally-sized registers ys and result."));
#line 90 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((n, xs.Data.Length, "Integer division\n                            requires an n-bit dividend registers."));
#line 92 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            MicrosoftQuantumDiagnosticsAssertAllZero.Apply(result.Data);
#line 94 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            var xpadded = new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(xs.Data, result.Data));
#line 96 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            foreach (var i in new QRange((n - 1L), -(1L), 0L))
#line hidden
            {
#line 97 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                var xtrunc = new Microsoft.Quantum.Arithmetic.LittleEndian(xpadded.Data?.Slice(new QRange(i, ((i + n) - 1L))));
#line 99 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                CompareGTI.Controlled.Apply((controls, (ys, xtrunc, result.Data[i])));
#line 101 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                MicrosoftQuantumIntrinsicX.Controlled.Apply((controls, result.Data[i]));
#line 102 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                AddI.Adjoint.Controlled.Apply((new QArray<Qubit>(result.Data[i]), (ys, xtrunc)));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)), QVoid> ControlledAdjointBody => (__in__) =>
        {
            var (controls,(xs,ys,result)) = __in__;
#line 106 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            var __qsVar0__n__ = result.Data.Length;
#line 106 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((__qsVar0__n__, ys.Data.Length, "Integer division requires\n                           equally-sized registers ys and result."));
#line 106 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((__qsVar0__n__, xs.Data.Length, "Integer division\n                            requires an n-bit dividend registers."));
#line 106 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            var __qsVar1__xpadded__ = new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(xs.Data, result.Data));
#line 106 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            foreach (var __qsVar2__i__ in RangeReverse.Apply(new QRange((__qsVar0__n__ - 1L), -(1L), 0L)))
#line hidden
            {
#line 106 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                var __qsVar3__xtrunc__ = new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar1__xpadded__.Data?.Slice(new QRange(__qsVar2__i__, ((__qsVar2__i__ + __qsVar0__n__) - 1L))));
#line 106 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                AddI.Adjoint.Controlled.Adjoint.Apply((new QArray<Qubit>(result.Data[__qsVar2__i__]), (ys, __qsVar3__xtrunc__)));
#line 106 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                MicrosoftQuantumIntrinsicX.Controlled.Adjoint.Apply((controls, result.Data[__qsVar2__i__]));
#line 106 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                CompareGTI.Controlled.Adjoint.Apply((controls, (ys, __qsVar3__xtrunc__, result.Data[__qsVar2__i__])));
            }

#line 106 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            MicrosoftQuantumDiagnosticsAssertAllZero.Adjoint.Apply(result.Data);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.self = this;
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumDiagnosticsEqualityFactI = this.Factory.Get<ICallable<(Int64,Int64,String), QVoid>>(typeof(Microsoft.Quantum.Diagnostics.EqualityFactI));
            this.MicrosoftQuantumDiagnosticsAssertAllZero = this.Factory.Get<IUnitary<IQArray<Qubit>>>(typeof(Microsoft.Quantum.Diagnostics.AssertAllZero));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
            this.CompareGTI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)>>(typeof(CompareGTI));
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
            this.AddI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(AddI));
            this.RangeReverse = this.Factory.Get<ICallable<QRange, QRange>>(typeof(Microsoft.Quantum.Core.RangeReverse));
        }

        public override IApplyData __dataIn((Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Microsoft.Quantum.Arithmetic.LittleEndian xs, Microsoft.Quantum.Arithmetic.LittleEndian ys, Microsoft.Quantum.Arithmetic.LittleEndian result)
        {
            return __m__.Run<DivideI, (Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid>((xs, ys, result));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs", OperationFunctor.Body, 108, 122)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs", OperationFunctor.Adjoint, 108, 122)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs", OperationFunctor.Controlled, 108, 122)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs", OperationFunctor.ControlledAdjoint, 108, 122)]
    public partial class AddI : Unitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>, ICallable
    {
        public AddI(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>, IApplyData
        {
            public In((Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1?.Data)?.Qubits, ((IApplyData)Data.Item2?.Data)?.Qubits);
                }
            }
        }

        String ICallable.Name => "AddI";
        String ICallable.FullName => "SignedMultiply.Testing.AddI";
        protected ICallable Length
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> MicrosoftQuantumArithmeticRippleCarryAdderNoCarryTTK
        {
            get;
            set;
        }

        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)> MicrosoftQuantumArithmeticRippleCarryAdderTTK
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        protected ICallable MicrosoftQuantumArraysMost
        {
            get;
            set;
        }

        protected ICallable MicrosoftQuantumArraysTail
        {
            get;
            set;
        }

        public override Func<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid> Body => (__in__) =>
        {
            var (xs,ys) = __in__;
#line 109 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            if ((xs.Data.Length == ys.Data.Length))
            {
#line 110 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                MicrosoftQuantumArithmeticRippleCarryAdderNoCarryTTK.Apply((xs, ys));
            }
            else if ((ys.Data.Length > xs.Data.Length))
            {
#line hidden
                {
#line 113 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                    var qs = Allocate.Apply(((ys.Data.Length - xs.Data.Length) - 1L));
#line hidden
                    bool __arg1__ = true;
                    try
                    {
#line 114 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                        MicrosoftQuantumArithmeticRippleCarryAdderTTK.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(xs.Data, qs)), new Microsoft.Quantum.Arithmetic.LittleEndian(MicrosoftQuantumArraysMost.Apply<IQArray<Qubit>>(ys.Data)), MicrosoftQuantumArraysTail.Apply<Qubit>(ys.Data)));
                    }
#line hidden
                    catch
                    {
                        __arg1__ = false;
                        throw;
                    }
#line hidden
                    finally
                    {
                        if (__arg1__)
                        {
#line hidden
                            Release.Apply(qs);
                        }
                    }
                }
            }
            else
            {
#line 119 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                throw new ExecutionFailException("xs must not contain more qubits than ys!");
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid> AdjointBody => (__in__) =>
        {
            var (xs,ys) = __in__;
#line 108 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            if ((xs.Data.Length == ys.Data.Length))
            {
#line 108 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                MicrosoftQuantumArithmeticRippleCarryAdderNoCarryTTK.Adjoint.Apply((xs, ys));
            }
            else if ((ys.Data.Length > xs.Data.Length))
            {
#line 108 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                {
#line 108 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                    var __qsVar0__qs__ = Allocate.Apply(((ys.Data.Length - xs.Data.Length) - 1L));
#line hidden
                    bool __arg1__ = true;
                    try
                    {
#line 108 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                        MicrosoftQuantumArithmeticRippleCarryAdderTTK.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(xs.Data, __qsVar0__qs__)), new Microsoft.Quantum.Arithmetic.LittleEndian(MicrosoftQuantumArraysMost.Apply<IQArray<Qubit>>(ys.Data)), MicrosoftQuantumArraysTail.Apply<Qubit>(ys.Data)));
                    }
#line hidden
                    catch
                    {
                        __arg1__ = false;
                        throw;
                    }
#line hidden
                    finally
                    {
                        if (__arg1__)
                        {
#line hidden
                            Release.Apply(__qsVar0__qs__);
                        }
                    }
                }
            }
            else
            {
#line 108 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                throw new ExecutionFailException("xs must not contain more qubits than ys!");
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)), QVoid> ControlledBody => (__in__) =>
        {
            var (__controlQubits__,(xs,ys)) = __in__;
#line 108 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            if ((xs.Data.Length == ys.Data.Length))
            {
#line 108 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                MicrosoftQuantumArithmeticRippleCarryAdderNoCarryTTK.Controlled.Apply((__controlQubits__, (xs, ys)));
            }
            else if ((ys.Data.Length > xs.Data.Length))
            {
#line 108 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                {
#line 108 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                    var qs = Allocate.Apply(((ys.Data.Length - xs.Data.Length) - 1L));
#line hidden
                    bool __arg1__ = true;
                    try
                    {
#line 108 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                        MicrosoftQuantumArithmeticRippleCarryAdderTTK.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(xs.Data, qs)), new Microsoft.Quantum.Arithmetic.LittleEndian(MicrosoftQuantumArraysMost.Apply<IQArray<Qubit>>(ys.Data)), MicrosoftQuantumArraysTail.Apply<Qubit>(ys.Data))));
                    }
#line hidden
                    catch
                    {
                        __arg1__ = false;
                        throw;
                    }
#line hidden
                    finally
                    {
                        if (__arg1__)
                        {
#line hidden
                            Release.Apply(qs);
                        }
                    }
                }
            }
            else
            {
#line 108 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                throw new ExecutionFailException("xs must not contain more qubits than ys!");
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)), QVoid> ControlledAdjointBody => (__in__) =>
        {
            var (__controlQubits__,(xs,ys)) = __in__;
#line 108 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            if ((xs.Data.Length == ys.Data.Length))
            {
#line 108 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                MicrosoftQuantumArithmeticRippleCarryAdderNoCarryTTK.Adjoint.Controlled.Apply((__controlQubits__, (xs, ys)));
            }
            else if ((ys.Data.Length > xs.Data.Length))
            {
#line 108 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                {
#line 108 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                    var __qsVar0__qs__ = Allocate.Apply(((ys.Data.Length - xs.Data.Length) - 1L));
#line hidden
                    bool __arg1__ = true;
                    try
                    {
#line 108 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                        MicrosoftQuantumArithmeticRippleCarryAdderTTK.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(xs.Data, __qsVar0__qs__)), new Microsoft.Quantum.Arithmetic.LittleEndian(MicrosoftQuantumArraysMost.Apply<IQArray<Qubit>>(ys.Data)), MicrosoftQuantumArraysTail.Apply<Qubit>(ys.Data))));
                    }
#line hidden
                    catch
                    {
                        __arg1__ = false;
                        throw;
                    }
#line hidden
                    finally
                    {
                        if (__arg1__)
                        {
#line hidden
                            Release.Apply(__qsVar0__qs__);
                        }
                    }
                }
            }
            else
            {
#line 108 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                throw new ExecutionFailException("xs must not contain more qubits than ys!");
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumArithmeticRippleCarryAdderNoCarryTTK = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(Microsoft.Quantum.Arithmetic.RippleCarryAdderNoCarryTTK));
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MicrosoftQuantumArithmeticRippleCarryAdderTTK = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)>>(typeof(Microsoft.Quantum.Arithmetic.RippleCarryAdderTTK));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
            this.MicrosoftQuantumArraysMost = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Arrays.Most<>));
            this.MicrosoftQuantumArraysTail = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Arrays.Tail<>));
        }

        public override IApplyData __dataIn((Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Microsoft.Quantum.Arithmetic.LittleEndian xs, Microsoft.Quantum.Arithmetic.LittleEndian ys)
        {
            return __m__.Run<AddI, (Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid>((xs, ys));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs", OperationFunctor.Body, 122, 127)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs", OperationFunctor.Adjoint, 122, 127)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs", OperationFunctor.Controlled, 122, 127)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs", OperationFunctor.ControlledAdjoint, 122, 127)]
    public partial class CompareGTI : Unitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)>, ICallable
    {
        public CompareGTI(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)>, IApplyData
        {
            public In((Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1?.Data)?.Qubits, ((IApplyData)Data.Item2?.Data)?.Qubits, ((IApplyData)Data.Item3)?.Qubits);
                }
            }
        }

        String ICallable.Name => "CompareGTI";
        String ICallable.FullName => "SignedMultiply.Testing.CompareGTI";
        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)> MicrosoftQuantumArithmeticGreaterThan
        {
            get;
            set;
        }

        public override Func<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit), QVoid> Body => (__in__) =>
        {
            var (xs,ys,result) = __in__;
#line 124 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            MicrosoftQuantumArithmeticGreaterThan.Apply((xs, ys, result));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit), QVoid> AdjointBody => (__in__) =>
        {
            var (xs,ys,result) = __in__;
#line 122 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            MicrosoftQuantumArithmeticGreaterThan.Adjoint.Apply((xs, ys, result));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)), QVoid> ControlledBody => (__in__) =>
        {
            var (__controlQubits__,(xs,ys,result)) = __in__;
#line 122 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            MicrosoftQuantumArithmeticGreaterThan.Controlled.Apply((__controlQubits__, (xs, ys, result)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)), QVoid> ControlledAdjointBody => (__in__) =>
        {
            var (__controlQubits__,(xs,ys,result)) = __in__;
#line 122 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            MicrosoftQuantumArithmeticGreaterThan.Adjoint.Controlled.Apply((__controlQubits__, (xs, ys, result)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumArithmeticGreaterThan = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)>>(typeof(Microsoft.Quantum.Arithmetic.GreaterThan));
        }

        public override IApplyData __dataIn((Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Microsoft.Quantum.Arithmetic.LittleEndian xs, Microsoft.Quantum.Arithmetic.LittleEndian ys, Qubit result)
        {
            return __m__.Run<CompareGTI, (Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit), QVoid>((xs, ys, result));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs", OperationFunctor.Body, 129, 142)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs", OperationFunctor.Adjoint, 159, 160)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs", OperationFunctor.Controlled, 142, 159)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs", OperationFunctor.ControlledAdjoint, 160, -1)]
    public partial class MultiplyI : Unitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>, ICallable
    {
        public MultiplyI(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>, IApplyData
        {
            public In((Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1?.Data)?.Qubits, ((IApplyData)Data.Item2?.Data)?.Qubits, ((IApplyData)Data.Item3?.Data)?.Qubits);
                }
            }
        }

        String ICallable.Name => "MultiplyI";
        String ICallable.FullName => "SignedMultiply.Testing.MultiplyI";
        protected ICallable Length
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,String), QVoid> MicrosoftQuantumDiagnosticsEqualityFactI
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> MicrosoftQuantumDiagnosticsAssertAllZero
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> AddI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        protected ICallable<QRange, QRange> RangeReverse
        {
            get;
            set;
        }

        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> MicrosoftQuantumIntrinsicCNOT
        {
            get;
            set;
        }

        public override Func<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid> Body => (__in__) =>
        {
            var (xs,ys,result) = __in__;
#line 130 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            var n = xs.Data.Length;
#line 132 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((n, ys.Data.Length, "Integer multiplication requires\n                           equally-sized registers xs and ys."));
#line 134 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply(((2L * n), result.Data.Length, "Integer multiplication\n                            requires a 2n-bit result registers."));
#line 136 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            MicrosoftQuantumDiagnosticsAssertAllZero.Apply(result.Data);
#line 138 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            foreach (var i in new QRange(0L, (n - 1L)))
#line hidden
            {
#line 139 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                AddI.Controlled.Apply((new QArray<Qubit>(xs.Data[i]), (ys, new Microsoft.Quantum.Arithmetic.LittleEndian(result.Data?.Slice(new QRange(i, (i + n)))))));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid> AdjointBody => (__in__) =>
        {
            var (xs,ys,result) = __in__;
#line 159 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            var __qsVar0__n__ = xs.Data.Length;
#line 159 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((__qsVar0__n__, ys.Data.Length, "Integer multiplication requires\n                           equally-sized registers xs and ys."));
#line 159 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply(((2L * __qsVar0__n__), result.Data.Length, "Integer multiplication\n                            requires a 2n-bit result registers."));
#line 159 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            foreach (var __qsVar1__i__ in RangeReverse.Apply(new QRange(0L, (__qsVar0__n__ - 1L))))
#line hidden
            {
#line 159 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                AddI.Controlled.Adjoint.Apply((new QArray<Qubit>(xs.Data[__qsVar1__i__]), (ys, new Microsoft.Quantum.Arithmetic.LittleEndian(result.Data?.Slice(new QRange(__qsVar1__i__, (__qsVar1__i__ + __qsVar0__n__)))))));
            }

#line 159 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            MicrosoftQuantumDiagnosticsAssertAllZero.Adjoint.Apply(result.Data);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)), QVoid> ControlledBody => (__in__) =>
        {
            var (controls,(xs,ys,result)) = __in__;
#line 143 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            var n = xs.Data.Length;
#line 145 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((n, ys.Data.Length, "Integer multiplication requires\n                           equally-sized registers xs and ys."));
#line 147 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply(((2L * n), result.Data.Length, "Integer multiplication\n                            requires a 2n-bit result registers."));
#line 149 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            MicrosoftQuantumDiagnosticsAssertAllZero.Apply(result.Data);
#line hidden
            {
#line 151 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                var anc = Allocate.Apply();
#line hidden
                bool __arg1__ = true;
                try
                {
#line 152 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                    foreach (var i in new QRange(0L, (n - 1L)))
#line hidden
                    {
#line 153 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                        MicrosoftQuantumIntrinsicCNOT.Controlled.Apply((controls, (xs.Data[i], anc)));
#line 154 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                        AddI.Controlled.Apply((new QArray<Qubit>(anc), (ys, new Microsoft.Quantum.Arithmetic.LittleEndian(result.Data?.Slice(new QRange(i, (i + n)))))));
#line 155 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                        MicrosoftQuantumIntrinsicCNOT.Controlled.Apply((controls, (xs.Data[i], anc)));
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(anc);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)), QVoid> ControlledAdjointBody => (__in__) =>
        {
            var (controls,(xs,ys,result)) = __in__;
#line 160 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            var __qsVar0__n__ = xs.Data.Length;
#line 160 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((__qsVar0__n__, ys.Data.Length, "Integer multiplication requires\n                           equally-sized registers xs and ys."));
#line 160 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply(((2L * __qsVar0__n__), result.Data.Length, "Integer multiplication\n                            requires a 2n-bit result registers."));
#line 160 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            {
#line 160 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                var __qsVar1__anc__ = Allocate.Apply();
#line hidden
                bool __arg1__ = true;
                try
                {
#line 160 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                    foreach (var __qsVar2__i__ in RangeReverse.Apply(new QRange(0L, (__qsVar0__n__ - 1L))))
#line hidden
                    {
#line 160 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                        MicrosoftQuantumIntrinsicCNOT.Controlled.Adjoint.Apply((controls, (xs.Data[__qsVar2__i__], __qsVar1__anc__)));
#line 160 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                        AddI.Controlled.Adjoint.Apply((new QArray<Qubit>(__qsVar1__anc__), (ys, new Microsoft.Quantum.Arithmetic.LittleEndian(result.Data?.Slice(new QRange(__qsVar2__i__, (__qsVar2__i__ + __qsVar0__n__)))))));
#line 160 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
                        MicrosoftQuantumIntrinsicCNOT.Controlled.Adjoint.Apply((controls, (xs.Data[__qsVar2__i__], __qsVar1__anc__)));
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(__qsVar1__anc__);
                    }
                }
            }

#line 160 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Testing/Signed_Multiply_Test/Program.qs"
            MicrosoftQuantumDiagnosticsAssertAllZero.Adjoint.Apply(result.Data);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumDiagnosticsEqualityFactI = this.Factory.Get<ICallable<(Int64,Int64,String), QVoid>>(typeof(Microsoft.Quantum.Diagnostics.EqualityFactI));
            this.MicrosoftQuantumDiagnosticsAssertAllZero = this.Factory.Get<IUnitary<IQArray<Qubit>>>(typeof(Microsoft.Quantum.Diagnostics.AssertAllZero));
            this.AddI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(AddI));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
            this.RangeReverse = this.Factory.Get<ICallable<QRange, QRange>>(typeof(Microsoft.Quantum.Core.RangeReverse));
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MicrosoftQuantumIntrinsicCNOT = this.Factory.Get<IUnitary<(Qubit,Qubit)>>(typeof(Microsoft.Quantum.Intrinsic.CNOT));
        }

        public override IApplyData __dataIn((Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Microsoft.Quantum.Arithmetic.LittleEndian xs, Microsoft.Quantum.Arithmetic.LittleEndian ys, Microsoft.Quantum.Arithmetic.LittleEndian result)
        {
            return __m__.Run<MultiplyI, (Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid>((xs, ys, result));
        }
    }
}