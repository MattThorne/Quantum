//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Simulation.Core;

[assembly: TypeDeclaration("{\"QualifiedName\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"SignedLittleEndian\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":11,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":9},\"Item2\":{\"Line\":1,\"Column\":27}},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeItems\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"Case\":\"Anonymous\",\"Fields\":[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":30},\"Item2\":{\"Line\":1,\"Column\":42}}]}}]}]}]}]]},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"TypeConstructor\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"SignedLittleEndian\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":11,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":9},\"Item2\":{\"Line\":1,\"Column\":27}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"__Item1__\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":1}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},\"ReturnType\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Quantum.Bell\",\"Name\":\"SignedLittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":true}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":true}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"SignedLittleEndian\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":11,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":9},\"Item2\":{\"Line\":1,\"Column\":27}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"TestMiniMultiply\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":14,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":27}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"TestMiniMultiply\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":14,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":27}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"MinimalMultiplyI\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":33,\"Item2\":2},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":27}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"xs\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":29},\"Item2\":{\"Line\":1,\"Column\":31}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"ys\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":42},\"Item2\":{\"Line\":1,\"Column\":44}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"result\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":55},\"Item2\":{\"Line\":1,\"Column\":61}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"MinimalMultiplyI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":33,\"Item2\":2},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":27}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"TestCFC\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":46,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"TestCFC\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":46,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"CFCheck\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":85,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"r2\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":20},\"Item2\":{\"Line\":1,\"Column\":22}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"s2\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":31},\"Item2\":{\"Line\":1,\"Column\":33}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"m\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":42},\"Item2\":{\"Line\":1,\"Column\":43}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"C\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":52},\"Item2\":{\"Line\":1,\"Column\":53}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"CFCheck\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":85,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"SignedSubtract\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":114,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":25}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"a\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":26},\"Item2\":{\"Line\":1,\"Column\":27}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"b\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":36},\"Item2\":{\"Line\":1,\"Column\":37}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"anc\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":46},\"Item2\":{\"Line\":1,\"Column\":49}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"anc2\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":56},\"Item2\":{\"Line\":1,\"Column\":60}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"SignedSubtract\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":114,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":25}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"SignedMultiply\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":140,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":25}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"a\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":26},\"Item2\":{\"Line\":1,\"Column\":27}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"b\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":39},\"Item2\":{\"Line\":1,\"Column\":40}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"c\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":50},\"Item2\":{\"Line\":1,\"Column\":51}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"SignedMultiply\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":140,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":25}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"TestingQFT\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":157,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":21}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"TestingQFT\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":157,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":21}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"QuantumPhaseEstimationTest\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":183,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":37}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"oracle\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Oracles\",\"Name\":\"DiscreteOracle\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":48},\"Item2\":{\"Line\":1,\"Column\":62}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":39},\"Item2\":{\"Line\":1,\"Column\":45}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"targetState\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":64},\"Item2\":{\"Line\":1,\"Column\":75}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"controlRegister\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"BigEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":105},\"Item2\":{\"Line\":1,\"Column\":114}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":87},\"Item2\":{\"Line\":1,\"Column\":102}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Oracles\",\"Name\":\"DiscreteOracle\",\"Range\":{\"Case\":\"Null\"}}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"BigEndian\",\"Range\":{\"Case\":\"Null\"}}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"QuantumPhaseEstimationTest\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":183,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":37}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"QuantumPhaseEstimationTest\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":183,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":126},\"Item2\":{\"Line\":1,\"Column\":135}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Quantum.Bell.QuantumPhaseEstimationTest\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"QuantumPhaseEstimationTest\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":183,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":126},\"Item2\":{\"Line\":1,\"Column\":135}},\"Documentation\":[\"automatically generated QsControlled specialization for Quantum.Bell.QuantumPhaseEstimationTest\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"QuantumPhaseEstimationTest\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":183,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":126},\"Item2\":{\"Line\":1,\"Column\":135}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for Quantum.Bell.QuantumPhaseEstimationTest\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"SquareModM\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":203,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":21}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"a\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":22},\"Item2\":{\"Line\":1,\"Column\":23}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"Ms\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":32},\"Item2\":{\"Line\":1,\"Column\":34}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"Ts\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":43},\"Item2\":{\"Line\":1,\"Column\":45}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"SquareModM\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":203,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":21}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"SquareModM\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":203,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":65},\"Item2\":{\"Line\":1,\"Column\":74}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Quantum.Bell.SquareModM\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"SquareModM\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":203,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":65},\"Item2\":{\"Line\":1,\"Column\":74}},\"Documentation\":[\"automatically generated QsControlled specialization for Quantum.Bell.SquareModM\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"SquareModM\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":203,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":65},\"Item2\":{\"Line\":1,\"Column\":74}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for Quantum.Bell.SquareModM\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"MultiplyModM\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":216,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":23}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"a\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":24},\"Item2\":{\"Line\":1,\"Column\":25}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"b\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":34},\"Item2\":{\"Line\":1,\"Column\":35}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"Ms\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":44},\"Item2\":{\"Line\":1,\"Column\":46}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"Ts\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":55},\"Item2\":{\"Line\":1,\"Column\":57}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"MultiplyModM\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":216,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":23}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"MultiplyModM\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":216,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":77},\"Item2\":{\"Line\":1,\"Column\":86}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Quantum.Bell.MultiplyModM\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"MultiplyModM\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":216,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":77},\"Item2\":{\"Line\":1,\"Column\":86}},\"Documentation\":[\"automatically generated QsControlled specialization for Quantum.Bell.MultiplyModM\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"MultiplyModM\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":216,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":77},\"Item2\":{\"Line\":1,\"Column\":86}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for Quantum.Bell.MultiplyModM\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"DivideI\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":247,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"xs\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":24},\"Item2\":{\"Line\":1,\"Column\":36}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":20},\"Item2\":{\"Line\":1,\"Column\":22}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"ys\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":42},\"Item2\":{\"Line\":1,\"Column\":54}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":38},\"Item2\":{\"Line\":1,\"Column\":40}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"result\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":2,\"Column\":40},\"Item2\":{\"Line\":2,\"Column\":52}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":32},\"Item2\":{\"Line\":2,\"Column\":38}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"DivideI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":249,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":5}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"DivideI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":272,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":8}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"DivideI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":252,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":11}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"DivideI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":273,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":19}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"AddI\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":278,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":15}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"xs\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":21},\"Item2\":{\"Line\":1,\"Column\":33}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":17},\"Item2\":{\"Line\":1,\"Column\":19}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"ys\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":39},\"Item2\":{\"Line\":1,\"Column\":51}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":35},\"Item2\":{\"Line\":1,\"Column\":37}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"AddI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":278,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":15}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"AddI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":278,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":63},\"Item2\":{\"Line\":1,\"Column\":72}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Quantum.Bell.AddI\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"AddI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":278,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":63},\"Item2\":{\"Line\":1,\"Column\":72}},\"Documentation\":[\"automatically generated QsControlled specialization for Quantum.Bell.AddI\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"AddI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":278,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":63},\"Item2\":{\"Line\":1,\"Column\":72}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for Quantum.Bell.AddI\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"CompareGTI\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":294,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":21}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"xs\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":27},\"Item2\":{\"Line\":1,\"Column\":39}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":23},\"Item2\":{\"Line\":1,\"Column\":25}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"ys\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":45},\"Item2\":{\"Line\":1,\"Column\":57}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":41},\"Item2\":{\"Line\":1,\"Column\":43}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"result\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":29},\"Item2\":{\"Line\":2,\"Column\":35}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"CompareGTI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":294,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":21}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"CompareGTI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":294,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":2,\"Column\":54},\"Item2\":{\"Line\":2,\"Column\":63}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Quantum.Bell.CompareGTI\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"CompareGTI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":294,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":2,\"Column\":54},\"Item2\":{\"Line\":2,\"Column\":63}},\"Documentation\":[\"automatically generated QsControlled specialization for Quantum.Bell.CompareGTI\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"CompareGTI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":294,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":2,\"Column\":54},\"Item2\":{\"Line\":2,\"Column\":63}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for Quantum.Bell.CompareGTI\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"MultiplyI\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":299,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"xs\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":26},\"Item2\":{\"Line\":1,\"Column\":38}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":22},\"Item2\":{\"Line\":1,\"Column\":24}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"ys\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":44},\"Item2\":{\"Line\":1,\"Column\":56}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":40},\"Item2\":{\"Line\":1,\"Column\":42}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"result\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":2,\"Column\":34},\"Item2\":{\"Line\":2,\"Column\":46}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":26},\"Item2\":{\"Line\":2,\"Column\":32}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"MultiplyI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":301,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":5}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"MultiplyI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":331,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":8}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"MultiplyI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":314,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":11}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"MultiplyI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":332,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":19}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"SquareI\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":337,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"xs\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":24},\"Item2\":{\"Line\":1,\"Column\":36}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":20},\"Item2\":{\"Line\":1,\"Column\":22}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"result\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":46},\"Item2\":{\"Line\":1,\"Column\":58}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":38},\"Item2\":{\"Line\":1,\"Column\":44}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"SquareI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":338,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":5}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"SquareI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":357,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":8}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"SquareI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":341,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":11}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"SquareI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":358,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":19}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"MultiplySI\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":362,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":21}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"xs\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Quantum.Bell\",\"Name\":\"SignedLittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":27},\"Item2\":{\"Line\":1,\"Column\":45}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":23},\"Item2\":{\"Line\":1,\"Column\":25}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"ys\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Quantum.Bell\",\"Name\":\"SignedLittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":2,\"Column\":31},\"Item2\":{\"Line\":2,\"Column\":49}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":27},\"Item2\":{\"Line\":2,\"Column\":29}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"result\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Quantum.Bell\",\"Name\":\"SignedLittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":3,\"Column\":35},\"Item2\":{\"Line\":3,\"Column\":53}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":27},\"Item2\":{\"Line\":3,\"Column\":33}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Quantum.Bell\",\"Name\":\"SignedLittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Quantum.Bell\",\"Name\":\"SignedLittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Quantum.Bell\",\"Name\":\"SignedLittleEndian\",\"Range\":{\"Case\":\"Null\"}}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"MultiplySI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":365,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":5}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"MultiplySI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":389,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":8}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"MultiplySI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":368,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":11}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"MultiplySI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":390,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":19}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"Invert2sSI\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":393,\"Item2\":5},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":21}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"xs\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Quantum.Bell\",\"Name\":\"SignedLittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":27},\"Item2\":{\"Line\":1,\"Column\":45}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":23},\"Item2\":{\"Line\":1,\"Column\":25}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Quantum.Bell\",\"Name\":\"SignedLittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"Invert2sSI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":394,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":5}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"Invert2sSI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":406,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":8}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"Invert2sSI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":397,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":11}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Bell\",\"Name\":\"Invert2sSI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs\",\"Position\":{\"Item1\":407,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":19}},\"Documentation\":[]}")]
#line hidden
namespace Quantum.Bell
{
    public class SignedLittleEndian : UDTBase<Microsoft.Quantum.Arithmetic.LittleEndian>, IApplyData
    {
        public SignedLittleEndian() : base(default(Microsoft.Quantum.Arithmetic.LittleEndian))
        {
        }

        public SignedLittleEndian(Microsoft.Quantum.Arithmetic.LittleEndian data) : base(data)
        {
        }

        System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
        {
            get
            {
                return ((IApplyData)Data?.Data)?.Qubits;
            }
        }

        public void Deconstruct()
        {
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.Body, 15, 34)]
    public partial class TestMiniMultiply : Operation<QVoid, QVoid>, ICallable
    {
        public TestMiniMultiply(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "TestMiniMultiply";
        String ICallable.FullName => "Quantum.Bell.TestMiniMultiply";
        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        protected ICallable MicrosoftQuantumDiagnosticsDumpMachine
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid> MinimalMultiplyI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> ResetAll
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> Body => (__in__) =>
        {
#line hidden
            {
#line 16 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                var (a,b,res) = (Allocate.Apply(4L), Allocate.Apply(3L), Allocate.Apply(7L));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 17 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(a[1L]);
#line 18 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(a[0L]);
#line 20 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(b[0L]);
#line 21 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(b[2L]);
#line 23 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumDiagnosticsDumpMachine.Apply(QVoid.Instance);
#line 24 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MinimalMultiplyI.Apply((a, b, res));
#line 25 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumDiagnosticsDumpMachine.Apply(QVoid.Instance);
#line 28 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    ResetAll.Apply(QArray<Qubit>.Add(QArray<Qubit>.Add(a, b), res));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(a);
#line hidden
                        Release.Apply(b);
#line hidden
                        Release.Apply(res);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
            this.MicrosoftQuantumDiagnosticsDumpMachine = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Diagnostics.DumpMachine<>));
            this.MinimalMultiplyI = this.Factory.Get<ICallable<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid>>(typeof(MinimalMultiplyI));
            this.ResetAll = this.Factory.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.ResetAll));
        }

        public override IApplyData __dataIn(QVoid data) => data;
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<TestMiniMultiply, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.Body, 34, 47)]
    public partial class MinimalMultiplyI : Operation<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid>, ICallable
    {
        public MinimalMultiplyI(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)>, IApplyData
        {
            public In((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3)?.Qubits);
                }
            }
        }

        String ICallable.Name => "MinimalMultiplyI";
        String ICallable.FullName => "Quantum.Bell.MinimalMultiplyI";
        protected ICallable Length
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,String), QVoid> MicrosoftQuantumDiagnosticsEqualityFactI
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> MicrosoftQuantumDiagnosticsAssertAllZero
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> AddI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid> Body => (__in__) =>
        {
            var (xs,ys,result) = __in__;
#line 35 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            var lenXs = xs.Length;
#line 36 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            var lenYs = ys.Length;
#line 39 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply(((lenXs + lenYs), result.Length, "Minimal multiplication requires result register to be equal to sum of multiplcan registers"));
#line 40 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumDiagnosticsAssertAllZero.Apply(result);
#line 42 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            foreach (var i in new QRange(0L, (lenXs - 1L)))
#line hidden
            {
#line 43 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                AddI.Controlled.Apply((new QArray<Qubit>(xs[i]), (new Microsoft.Quantum.Arithmetic.LittleEndian(ys), new Microsoft.Quantum.Arithmetic.LittleEndian(result?.Slice(new QRange(i, (i + lenYs)))))));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumDiagnosticsEqualityFactI = this.Factory.Get<ICallable<(Int64,Int64,String), QVoid>>(typeof(Microsoft.Quantum.Diagnostics.EqualityFactI));
            this.MicrosoftQuantumDiagnosticsAssertAllZero = this.Factory.Get<IUnitary<IQArray<Qubit>>>(typeof(Microsoft.Quantum.Diagnostics.AssertAllZero));
            this.AddI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(AddI));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
        }

        public override IApplyData __dataIn((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> xs, IQArray<Qubit> ys, IQArray<Qubit> result)
        {
            return __m__.Run<MinimalMultiplyI, (IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid>((xs, ys, result));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.Body, 47, 86)]
    public partial class TestCFC : Operation<QVoid, QVoid>, ICallable
    {
        public TestCFC(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "TestCFC";
        String ICallable.FullName => "Quantum.Bell.TestCFC";
        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected ICallable Length
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        protected IAdjointable MicrosoftQuantumCanonApplyToEachA
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit), QVoid> CFCheck
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> DivideI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> MicrosoftQuantumIntrinsicSWAP
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid> SignedMultiply
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit), QVoid> SignedSubtract
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> Body => (__in__) =>
        {
#line hidden
            {
#line 49 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                var (m,r1,r2,s1,s2,t1,t2,C1) = (Allocate.Apply(2L), Allocate.Apply(2L), Allocate.Apply(2L), Allocate.Apply(3L), Allocate.Apply(3L), Allocate.Apply(3L), Allocate.Apply(3L), Allocate.Apply());
#line hidden
                bool __arg1__ = true;
                try
                {
#line 50 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    var len = r1.Length;
#line 51 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(m[1L]);
#line 52 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(m[0L]);
#line 53 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(r1[1L]);
#line 54 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, r2));
#line 55 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(s1[0L]);
#line 56 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(t2[0L]);
#line 59 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    CFCheck.Apply((r2, s2, m, C1));
#line hidden
                    {
#line 63 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                        var (quo,qTs2,anc,anc1,anc2) = (Allocate.Apply(len), Allocate.Apply(((2L * len) + 1L)), Allocate.Apply(), Allocate.Apply(), Allocate.Apply());
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 65 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                            DivideI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(r1), new Microsoft.Quantum.Arithmetic.LittleEndian(r2), new Microsoft.Quantum.Arithmetic.LittleEndian(quo)));
#line 66 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                            foreach (var i in new QRange(0L, quo.Length))
#line hidden
                            {
#line 67 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                                MicrosoftQuantumIntrinsicSWAP.Apply((r1[i], r2[i]));
                            }

#line 69 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                            SignedMultiply.Apply((s2, QArray<Qubit>.Add(quo, new QArray<Qubit>(anc)), qTs2));
#line 70 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                            foreach (var i in new QRange(0L, s1.Length))
#line hidden
                            {
#line 71 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                                MicrosoftQuantumIntrinsicSWAP.Apply((s1[i], s2[i]));
                            }

#line 73 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                            SignedSubtract.Apply((s2, qTs2, anc1, anc2));
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release.Apply(quo);
#line hidden
                                Release.Apply(qTs2);
#line hidden
                                Release.Apply(anc);
#line hidden
                                Release.Apply(anc1);
#line hidden
                                Release.Apply(anc2);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(m);
#line hidden
                        Release.Apply(r1);
#line hidden
                        Release.Apply(r2);
#line hidden
                        Release.Apply(s1);
#line hidden
                        Release.Apply(s2);
#line hidden
                        Release.Apply(t1);
#line hidden
                        Release.Apply(t2);
#line hidden
                        Release.Apply(C1);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
            this.MicrosoftQuantumCanonApplyToEachA = this.Factory.Get<IAdjointable>(typeof(Microsoft.Quantum.Canon.ApplyToEachA<>));
            this.CFCheck = this.Factory.Get<ICallable<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit), QVoid>>(typeof(CFCheck));
            this.DivideI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(DivideI));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
            this.MicrosoftQuantumIntrinsicSWAP = this.Factory.Get<IUnitary<(Qubit,Qubit)>>(typeof(Microsoft.Quantum.Intrinsic.SWAP));
            this.SignedMultiply = this.Factory.Get<ICallable<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid>>(typeof(SignedMultiply));
            this.SignedSubtract = this.Factory.Get<ICallable<(IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit), QVoid>>(typeof(SignedSubtract));
        }

        public override IApplyData __dataIn(QVoid data) => data;
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<TestCFC, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.Body, 86, 115)]
    public partial class CFCheck : Operation<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit), QVoid>, ICallable
    {
        public CFCheck(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit)>, IApplyData
        {
            public In((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3)?.Qubits, ((IApplyData)Data.Item4)?.Qubits);
                }
            }
        }

        String ICallable.Name => "CFCheck";
        String ICallable.FullName => "Quantum.Bell.CFCheck";
        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        protected ICallable Length
        {
            get;
            set;
        }

        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)> CompareGTI
        {
            get;
            set;
        }

        protected IAdjointable MicrosoftQuantumCanonApplyToEachA
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        protected ICallable MicrosoftQuantumDiagnosticsDumpMachine
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit), QVoid> Body => (__in__) =>
        {
            var (r2,s2,m,C) = __in__;
#line 88 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            var s2LE = new Microsoft.Quantum.Arithmetic.LittleEndian(s2?.Slice(new QRange(0L, (s2.Length - 2L))));
#line hidden
            {
#line 89 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                var (anc,C2,C3) = (Allocate.Apply(((s2.Length - m.Length) - 1L)), Allocate.Apply(), Allocate.Apply());
#line hidden
                bool __arg1__ = true;
                try
                {
#line 90 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    CompareGTI.Apply((s2LE, new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(m, anc)), C2));
#line 92 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, r2));
#line 93 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumIntrinsicX.Controlled.Apply((r2, C3));
#line 94 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, r2));
#line 96 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(C2);
#line 97 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(C3);
#line 98 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(C2, C3), C));
#line 99 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(C2);
#line 100 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(C3);
#line 101 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(C);
#line 103 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, r2));
#line 104 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumIntrinsicX.Controlled.Apply((r2, C3));
#line 105 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, r2));
#line 107 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    CompareGTI.Adjoint.Apply((s2LE, new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(m, anc)), C2));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(anc);
#line hidden
                        Release.Apply(C2);
#line hidden
                        Release.Apply(C3);
                    }
                }
            }

#line 109 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumDiagnosticsDumpMachine.Apply(QVoid.Instance);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.CompareGTI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)>>(typeof(CompareGTI));
            this.MicrosoftQuantumCanonApplyToEachA = this.Factory.Get<IAdjointable>(typeof(Microsoft.Quantum.Canon.ApplyToEachA<>));
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
            this.MicrosoftQuantumDiagnosticsDumpMachine = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Diagnostics.DumpMachine<>));
        }

        public override IApplyData __dataIn((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> r2, IQArray<Qubit> s2, IQArray<Qubit> m, Qubit C)
        {
            return __m__.Run<CFCheck, (IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit), QVoid>((r2, s2, m, C));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.Body, 115, 141)]
    public partial class SignedSubtract : Operation<(IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit), QVoid>, ICallable
    {
        public SignedSubtract(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit)>, IApplyData
        {
            public In((IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3)?.Qubits, ((IApplyData)Data.Item4)?.Qubits);
                }
            }
        }

        String ICallable.Name => "SignedSubtract";
        String ICallable.FullName => "Quantum.Bell.SignedSubtract";
        protected ICallable<(Int64,Int64,String), QVoid> MicrosoftQuantumDiagnosticsEqualityFactI
        {
            get;
            set;
        }

        protected ICallable Length
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> MicrosoftQuantumIntrinsicCNOT
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)> CompareGTI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> MicrosoftQuantumIntrinsicSWAP
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> AddI
        {
            get;
            set;
        }

        protected ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64> MicrosoftQuantumArithmeticMeasureInteger
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> M
        {
            get;
            set;
        }

        protected ICallable<Result, Boolean> MicrosoftQuantumConvertResultAsBool
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit), QVoid> Body => (__in__) =>
        {
            var (a,b,anc,anc2) = __in__;
#line 116 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((a.Length, (b.Length + 1L), "Signed Subtraction, a must have one more quibt than b"));
#line 117 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Apply((a[(a.Length - 1L)], anc2));
#line 118 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Apply((b[(b.Length - 1L)], anc2));
#line 119 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumIntrinsicX.Apply(anc2);
#line 122 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            CompareGTI.Controlled.Apply((new QArray<Qubit>(anc2), (new Microsoft.Quantum.Arithmetic.LittleEndian(b?.Slice(new QRange(0L, (b.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(a?.Slice(new QRange(0L, (a.Length - 3L)))), anc)));
#line 123 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            foreach (var i in new QRange(0L, (a.Length - 3L)))
#line hidden
            {
#line 124 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                MicrosoftQuantumIntrinsicSWAP.Controlled.Apply((new QArray<Qubit>(anc, anc2), (a[i], b[i])));
            }

#line 126 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            AddI.Adjoint.Controlled.Apply((new QArray<Qubit>(anc2), (new Microsoft.Quantum.Arithmetic.LittleEndian(b?.Slice(new QRange(0L, (b.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(a?.Slice(new QRange(0L, (a.Length - 3L)))))));
#line 127 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(anc, anc2), a[(a.Length - 1L)]));
#line 130 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumIntrinsicX.Apply(anc2);
#line 131 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            AddI.Controlled.Apply((new QArray<Qubit>(anc2), (new Microsoft.Quantum.Arithmetic.LittleEndian(b?.Slice(new QRange(0L, (b.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(a?.Slice(new QRange(0L, (a.Length - 2L)))))));
#line 132 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumIntrinsicX.Apply(anc2);
#line 135 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            var mes = MicrosoftQuantumArithmeticMeasureInteger.Apply(new Microsoft.Quantum.Arithmetic.LittleEndian(a?.Slice(new QRange(0L, (a.Length - 2L)))));
#line 136 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            var mesSig = M.Apply(a[(a.Length - 1L)]);
#line 137 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            var mesSigRes = MicrosoftQuantumConvertResultAsBool.Apply(mesSig);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumDiagnosticsEqualityFactI = this.Factory.Get<ICallable<(Int64,Int64,String), QVoid>>(typeof(Microsoft.Quantum.Diagnostics.EqualityFactI));
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumIntrinsicCNOT = this.Factory.Get<IUnitary<(Qubit,Qubit)>>(typeof(Microsoft.Quantum.Intrinsic.CNOT));
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
            this.CompareGTI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)>>(typeof(CompareGTI));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
            this.MicrosoftQuantumIntrinsicSWAP = this.Factory.Get<IUnitary<(Qubit,Qubit)>>(typeof(Microsoft.Quantum.Intrinsic.SWAP));
            this.AddI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(AddI));
            this.MicrosoftQuantumArithmeticMeasureInteger = this.Factory.Get<ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64>>(typeof(Microsoft.Quantum.Arithmetic.MeasureInteger));
            this.M = this.Factory.Get<ICallable<Qubit, Result>>(typeof(Microsoft.Quantum.Intrinsic.M));
            this.MicrosoftQuantumConvertResultAsBool = this.Factory.Get<ICallable<Result, Boolean>>(typeof(Microsoft.Quantum.Convert.ResultAsBool));
        }

        public override IApplyData __dataIn((IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> a, IQArray<Qubit> b, Qubit anc, Qubit anc2)
        {
            return __m__.Run<SignedSubtract, (IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit), QVoid>((a, b, anc, anc2));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.Body, 141, 158)]
    public partial class SignedMultiply : Operation<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid>, ICallable
    {
        public SignedMultiply(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)>, IApplyData
        {
            public In((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3)?.Qubits);
                }
            }
        }

        String ICallable.Name => "SignedMultiply";
        String ICallable.FullName => "Quantum.Bell.SignedMultiply";
        protected ICallable<(Int64,Int64,String), QVoid> MicrosoftQuantumDiagnosticsEqualityFactI
        {
            get;
            set;
        }

        protected ICallable Length
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> MicrosoftQuantumIntrinsicCNOT
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> MultiplyI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid> Body => (__in__) =>
        {
            var (a,b,c) = __in__;
#line 142 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((((2L * a.Length) - 1L), c.Length, "Signed multiplication requires a (2n-1)-bit result register."));
#line 144 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            var aS = a[(a.Length - 1L)];
#line 145 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            var bS = b[(b.Length - 1L)];
#line 146 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            var cS = c[(c.Length - 1L)];
#line 147 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Apply((aS, cS));
#line 148 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Apply((bS, cS));
#line 150 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MultiplyI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(a?.Slice(new QRange(0L, (a.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(b?.Slice(new QRange(0L, (b.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(c?.Slice(new QRange(0L, (c.Length - 2L))))));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumDiagnosticsEqualityFactI = this.Factory.Get<ICallable<(Int64,Int64,String), QVoid>>(typeof(Microsoft.Quantum.Diagnostics.EqualityFactI));
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumIntrinsicCNOT = this.Factory.Get<IUnitary<(Qubit,Qubit)>>(typeof(Microsoft.Quantum.Intrinsic.CNOT));
            this.MultiplyI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(MultiplyI));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
        }

        public override IApplyData __dataIn((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> a, IQArray<Qubit> b, IQArray<Qubit> c)
        {
            return __m__.Run<SignedMultiply, (IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid>((a, b, c));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.Body, 158, 184)]
    public partial class TestingQFT : Operation<QVoid, QVoid>, ICallable
    {
        public TestingQFT(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "TestingQFT";
        String ICallable.FullName => "Quantum.Bell.TestingQFT";
        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        protected IUnitary<(Int64,Microsoft.Quantum.Arithmetic.LittleEndian)> MicrosoftQuantumArithmeticApplyXorInPlace
        {
            get;
            set;
        }

        protected ICallable<IUnitary, Microsoft.Quantum.Oracles.DiscreteOracle> MicrosoftQuantumOraclesDiscreteOracle
        {
            get;
            set;
        }

        protected IUnitary<(Int64,Int64,Int64,IQArray<Qubit>)> ApplyOrderFindingOracle
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Oracles.DiscreteOracle,IQArray<Qubit>,Microsoft.Quantum.Arithmetic.BigEndian)> QuantumPhaseEstimationTest
        {
            get;
            set;
        }

        protected ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Microsoft.Quantum.Arithmetic.BigEndian> MicrosoftQuantumArithmeticLittleEndianAsBigEndian
        {
            get;
            set;
        }

        protected ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64> MicrosoftQuantumArithmeticMeasureInteger
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message
        {
            get;
            set;
        }

        protected ICallable MicrosoftQuantumDiagnosticsDumpMachine
        {
            get;
            set;
        }

        protected IUnitary<Microsoft.Quantum.Arithmetic.BigEndian> MicrosoftQuantumCanonQFT
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.BigEndian> MicrosoftQuantumArithmeticBigEndian
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> ResetAll
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> Body => (__in__) =>
        {
#line 159 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            var a = 5L;
#line 160 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            var m = 21L;
#line hidden
            {
#line 162 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                var j = Allocate.Apply(9L);
#line hidden
                bool __arg1__ = true;
                try
                {
#line hidden
                    {
#line 163 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                        var r = Allocate.Apply(5L);
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 164 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                            var frequencyEstimateNumerator = new Microsoft.Quantum.Arithmetic.LittleEndian(j);
#line 165 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                            var eigenstateRegisterLE = new Microsoft.Quantum.Arithmetic.LittleEndian(r);
#line 166 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                            MicrosoftQuantumArithmeticApplyXorInPlace.Apply((1L, eigenstateRegisterLE));
#line 167 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                            var oracle = new Microsoft.Quantum.Oracles.DiscreteOracle(ApplyOrderFindingOracle.Partial(new Func<(Int64,IQArray<Qubit>), (Int64,Int64,Int64,IQArray<Qubit>)>((__arg3__) => (a, m, __arg3__.Item1, __arg3__.Item2))));
#line 169 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                            QuantumPhaseEstimationTest.Apply((oracle, eigenstateRegisterLE.Data, MicrosoftQuantumArithmeticLittleEndianAsBigEndian.Apply(frequencyEstimateNumerator)));
#line 171 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                            var mes = MicrosoftQuantumArithmeticMeasureInteger.Apply(new Microsoft.Quantum.Arithmetic.LittleEndian(r));
#line 172 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                            Message.Apply(String.Format("{0}", mes));
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release.Apply(r);
                            }
                        }
                    }

#line 175 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumDiagnosticsDumpMachine.Apply("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Qs_Output3.txt");
#line 176 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumCanonQFT.Adjoint.Apply(new Microsoft.Quantum.Arithmetic.BigEndian(j));
#line 177 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumDiagnosticsDumpMachine.Apply("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Qs_Output4.txt");
#line 178 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    var final_mes = MicrosoftQuantumArithmeticMeasureInteger.Apply(new Microsoft.Quantum.Arithmetic.LittleEndian(j));
#line 179 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    Message.Apply(String.Format("{0}", final_mes));
#line 180 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    ResetAll.Apply(j);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(j);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
            this.MicrosoftQuantumArithmeticApplyXorInPlace = this.Factory.Get<IUnitary<(Int64,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(Microsoft.Quantum.Arithmetic.ApplyXorInPlace));
            this.MicrosoftQuantumOraclesDiscreteOracle = this.Factory.Get<ICallable<IUnitary, Microsoft.Quantum.Oracles.DiscreteOracle>>(typeof(Microsoft.Quantum.Oracles.DiscreteOracle));
            this.ApplyOrderFindingOracle = this.Factory.Get<IUnitary<(Int64,Int64,Int64,IQArray<Qubit>)>>(typeof(ApplyOrderFindingOracle));
            this.QuantumPhaseEstimationTest = this.Factory.Get<IUnitary<(Microsoft.Quantum.Oracles.DiscreteOracle,IQArray<Qubit>,Microsoft.Quantum.Arithmetic.BigEndian)>>(typeof(QuantumPhaseEstimationTest));
            this.MicrosoftQuantumArithmeticLittleEndianAsBigEndian = this.Factory.Get<ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Microsoft.Quantum.Arithmetic.BigEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndianAsBigEndian));
            this.MicrosoftQuantumArithmeticMeasureInteger = this.Factory.Get<ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64>>(typeof(Microsoft.Quantum.Arithmetic.MeasureInteger));
            this.Message = this.Factory.Get<ICallable<String, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.Message));
            this.MicrosoftQuantumDiagnosticsDumpMachine = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Diagnostics.DumpMachine<>));
            this.MicrosoftQuantumCanonQFT = this.Factory.Get<IUnitary<Microsoft.Quantum.Arithmetic.BigEndian>>(typeof(Microsoft.Quantum.Canon.QFT));
            this.MicrosoftQuantumArithmeticBigEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.BigEndian>>(typeof(Microsoft.Quantum.Arithmetic.BigEndian));
            this.ResetAll = this.Factory.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.ResetAll));
        }

        public override IApplyData __dataIn(QVoid data) => data;
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<TestingQFT, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.Body, 184, 204)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.Adjoint, 184, 204)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.Controlled, 184, 204)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.ControlledAdjoint, 184, 204)]
    public partial class QuantumPhaseEstimationTest : Unitary<(Microsoft.Quantum.Oracles.DiscreteOracle,IQArray<Qubit>,Microsoft.Quantum.Arithmetic.BigEndian)>, ICallable
    {
        public QuantumPhaseEstimationTest(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Microsoft.Quantum.Oracles.DiscreteOracle,IQArray<Qubit>,Microsoft.Quantum.Arithmetic.BigEndian)>, IApplyData
        {
            public In((Microsoft.Quantum.Oracles.DiscreteOracle,IQArray<Qubit>,Microsoft.Quantum.Arithmetic.BigEndian) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1?.Data)?.Qubits, ((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3?.Data)?.Qubits);
                }
            }
        }

        String ICallable.Name => "QuantumPhaseEstimationTest";
        String ICallable.FullName => "Quantum.Bell.QuantumPhaseEstimationTest";
        protected ICallable Length
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Qubit>,Double)> MicrosoftQuantumDiagnosticsAssertAllZeroWithinTolerance
        {
            get;
            set;
        }

        protected IUnitary MicrosoftQuantumCanonApplyToEachCA
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicH
        {
            get;
            set;
        }

        protected ICallable MicrosoftQuantumDiagnosticsDumpMachine
        {
            get;
            set;
        }

        protected ICallable<QRange, QRange> RangeReverse
        {
            get;
            set;
        }

        public override Func<(Microsoft.Quantum.Oracles.DiscreteOracle,IQArray<Qubit>,Microsoft.Quantum.Arithmetic.BigEndian), QVoid> Body => (__in__) =>
        {
            var (oracle,targetState,controlRegister) = __in__;
#line 185 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            var nQubits = controlRegister.Data.Length;
#line 186 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumDiagnosticsAssertAllZeroWithinTolerance.Apply((controlRegister.Data, 1E-10D));
#line 187 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumCanonApplyToEachCA.Apply((MicrosoftQuantumIntrinsicH, controlRegister.Data));
#line 188 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumDiagnosticsDumpMachine.Apply("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Qs_Output.txt");
#line 189 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            foreach (var idxControlQubit in new QRange(0L, (nQubits - 1L)))
#line hidden
            {
#line 190 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                var control = controlRegister.Data[idxControlQubit];
#line 191 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                var power = 2L.Pow(((nQubits - idxControlQubit) - 1L));
#line 192 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                oracle.Data.Controlled.Apply((new QArray<Qubit>(control), (power, targetState)));
            }

#line 194 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumDiagnosticsDumpMachine.Apply("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Qs_Output2.txt");
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(Microsoft.Quantum.Oracles.DiscreteOracle,IQArray<Qubit>,Microsoft.Quantum.Arithmetic.BigEndian), QVoid> AdjointBody => (__in__) =>
        {
            var (oracle,targetState,controlRegister) = __in__;
#line 184 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            var __qsVar0__nQubits__ = controlRegister.Data.Length;
#line 184 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumDiagnosticsDumpMachine.Apply("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Qs_Output.txt");
#line 184 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumDiagnosticsDumpMachine.Apply("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Qs_Output2.txt");
#line 184 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            foreach (var __qsVar1__idxControlQubit__ in RangeReverse.Apply(new QRange(0L, (__qsVar0__nQubits__ - 1L))))
#line hidden
            {
#line 184 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                var __qsVar2__control__ = controlRegister.Data[__qsVar1__idxControlQubit__];
#line 184 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                var __qsVar3__power__ = 2L.Pow(((__qsVar0__nQubits__ - __qsVar1__idxControlQubit__) - 1L));
#line 184 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                oracle.Data.Controlled.Adjoint.Apply((new QArray<Qubit>(__qsVar2__control__), (__qsVar3__power__, targetState)));
            }

#line 184 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumCanonApplyToEachCA.Adjoint.Apply((MicrosoftQuantumIntrinsicH, controlRegister.Data));
#line 184 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumDiagnosticsAssertAllZeroWithinTolerance.Adjoint.Apply((controlRegister.Data, 1E-10D));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Microsoft.Quantum.Oracles.DiscreteOracle,IQArray<Qubit>,Microsoft.Quantum.Arithmetic.BigEndian)), QVoid> ControlledBody => (__in__) =>
        {
            var (__controlQubits__,(oracle,targetState,controlRegister)) = __in__;
#line 184 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            var nQubits = controlRegister.Data.Length;
#line 184 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumDiagnosticsAssertAllZeroWithinTolerance.Controlled.Apply((__controlQubits__, (controlRegister.Data, 1E-10D)));
#line 184 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumCanonApplyToEachCA.Controlled.Apply((__controlQubits__, (MicrosoftQuantumIntrinsicH, controlRegister.Data)));
#line 184 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumDiagnosticsDumpMachine.Apply("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Qs_Output.txt");
#line 184 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            foreach (var idxControlQubit in new QRange(0L, (nQubits - 1L)))
#line hidden
            {
#line 184 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                var control = controlRegister.Data[idxControlQubit];
#line 184 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                var power = 2L.Pow(((nQubits - idxControlQubit) - 1L));
#line 184 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                oracle.Data.Controlled.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(control), (power, targetState))));
            }

#line 184 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumDiagnosticsDumpMachine.Apply("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Qs_Output2.txt");
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Microsoft.Quantum.Oracles.DiscreteOracle,IQArray<Qubit>,Microsoft.Quantum.Arithmetic.BigEndian)), QVoid> ControlledAdjointBody => (__in__) =>
        {
            var (__controlQubits__,(oracle,targetState,controlRegister)) = __in__;
#line 184 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            var __qsVar0__nQubits__ = controlRegister.Data.Length;
#line 184 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumDiagnosticsDumpMachine.Apply("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Qs_Output.txt");
#line 184 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumDiagnosticsDumpMachine.Apply("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Qs_Output2.txt");
#line 184 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            foreach (var __qsVar1__idxControlQubit__ in RangeReverse.Apply(new QRange(0L, (__qsVar0__nQubits__ - 1L))))
#line hidden
            {
#line 184 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                var __qsVar2__control__ = controlRegister.Data[__qsVar1__idxControlQubit__];
#line 184 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                var __qsVar3__power__ = 2L.Pow(((__qsVar0__nQubits__ - __qsVar1__idxControlQubit__) - 1L));
#line 184 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                oracle.Data.Controlled.Adjoint.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(__qsVar2__control__), (__qsVar3__power__, targetState))));
            }

#line 184 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumCanonApplyToEachCA.Adjoint.Controlled.Apply((__controlQubits__, (MicrosoftQuantumIntrinsicH, controlRegister.Data)));
#line 184 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumDiagnosticsAssertAllZeroWithinTolerance.Adjoint.Controlled.Apply((__controlQubits__, (controlRegister.Data, 1E-10D)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumDiagnosticsAssertAllZeroWithinTolerance = this.Factory.Get<IUnitary<(IQArray<Qubit>,Double)>>(typeof(Microsoft.Quantum.Diagnostics.AssertAllZeroWithinTolerance));
            this.MicrosoftQuantumCanonApplyToEachCA = this.Factory.Get<IUnitary>(typeof(Microsoft.Quantum.Canon.ApplyToEachCA<>));
            this.MicrosoftQuantumIntrinsicH = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.H));
            this.MicrosoftQuantumDiagnosticsDumpMachine = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Diagnostics.DumpMachine<>));
            this.RangeReverse = this.Factory.Get<ICallable<QRange, QRange>>(typeof(Microsoft.Quantum.Core.RangeReverse));
        }

        public override IApplyData __dataIn((Microsoft.Quantum.Oracles.DiscreteOracle,IQArray<Qubit>,Microsoft.Quantum.Arithmetic.BigEndian) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Microsoft.Quantum.Oracles.DiscreteOracle oracle, IQArray<Qubit> targetState, Microsoft.Quantum.Arithmetic.BigEndian controlRegister)
        {
            return __m__.Run<QuantumPhaseEstimationTest, (Microsoft.Quantum.Oracles.DiscreteOracle,IQArray<Qubit>,Microsoft.Quantum.Arithmetic.BigEndian), QVoid>((oracle, targetState, controlRegister));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.Body, 204, 217)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.Adjoint, 204, 217)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.Controlled, 204, 217)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.ControlledAdjoint, 204, 217)]
    public partial class SquareModM : Unitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)>, ICallable
    {
        public SquareModM(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)>, IApplyData
        {
            public In((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3)?.Qubits);
                }
            }
        }

        String ICallable.Name => "SquareModM";
        String ICallable.FullName => "Quantum.Bell.SquareModM";
        protected ICallable Length
        {
            get;
            set;
        }

        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> SquareI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> DivideI
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> AddI
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid> Body => (__in__) =>
        {
            var (a,Ms,Ts) = __in__;
#line 205 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            var num = a.Length;
#line hidden
            {
#line 206 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                var (aS,aSPad) = (Allocate.Apply(num), Allocate.Apply(num));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 207 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    SquareI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(a), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aS, aSPad))));
#line hidden
                    {
#line 208 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                        var (anc,MsPad) = (Allocate.Apply((num * 2L)), Allocate.Apply(num));
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 209 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                            DivideI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aS, aSPad)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(Ms, MsPad)), new Microsoft.Quantum.Arithmetic.LittleEndian(anc)));
#line 210 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                            AddI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(aS), new Microsoft.Quantum.Arithmetic.LittleEndian(Ts)));
#line 211 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                            DivideI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aS, aSPad)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(Ms, MsPad)), new Microsoft.Quantum.Arithmetic.LittleEndian(anc)));
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release.Apply(anc);
#line hidden
                                Release.Apply(MsPad);
                            }
                        }
                    }

#line 213 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    SquareI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(a), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aS, aSPad))));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(aS);
#line hidden
                        Release.Apply(aSPad);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid> AdjointBody => (__in__) =>
        {
            var (a,Ms,Ts) = __in__;
#line 204 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            var __qsVar0__num__ = a.Length;
#line 204 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            {
#line 204 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                var (__qsVar1__aS__,__qsVar2__aSPad__) = (Allocate.Apply(__qsVar0__num__), Allocate.Apply(__qsVar0__num__));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 204 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    SquareI.Adjoint.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(a), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(__qsVar1__aS__, __qsVar2__aSPad__))));
#line 204 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    {
#line 204 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                        var (__qsVar3__anc__,__qsVar4__MsPad__) = (Allocate.Apply((__qsVar0__num__ * 2L)), Allocate.Apply(__qsVar0__num__));
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 204 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                            DivideI.Adjoint.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(__qsVar1__aS__, __qsVar2__aSPad__)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(Ms, __qsVar4__MsPad__)), new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar3__anc__)));
#line 204 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                            AddI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar1__aS__), new Microsoft.Quantum.Arithmetic.LittleEndian(Ts)));
#line 204 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                            DivideI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(__qsVar1__aS__, __qsVar2__aSPad__)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(Ms, __qsVar4__MsPad__)), new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar3__anc__)));
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release.Apply(__qsVar3__anc__);
#line hidden
                                Release.Apply(__qsVar4__MsPad__);
                            }
                        }
                    }

#line 204 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    SquareI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(a), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(__qsVar1__aS__, __qsVar2__aSPad__))));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(__qsVar1__aS__);
#line hidden
                        Release.Apply(__qsVar2__aSPad__);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)), QVoid> ControlledBody => (__in__) =>
        {
            var (__controlQubits__,(a,Ms,Ts)) = __in__;
#line 204 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            var num = a.Length;
#line 204 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            {
#line 204 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                var (aS,aSPad) = (Allocate.Apply(num), Allocate.Apply(num));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 204 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    SquareI.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(a), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aS, aSPad)))));
#line 204 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    {
#line 204 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                        var (anc,MsPad) = (Allocate.Apply((num * 2L)), Allocate.Apply(num));
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 204 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                            DivideI.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aS, aSPad)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(Ms, MsPad)), new Microsoft.Quantum.Arithmetic.LittleEndian(anc))));
#line 204 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                            AddI.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(aS), new Microsoft.Quantum.Arithmetic.LittleEndian(Ts))));
#line 204 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                            DivideI.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aS, aSPad)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(Ms, MsPad)), new Microsoft.Quantum.Arithmetic.LittleEndian(anc))));
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release.Apply(anc);
#line hidden
                                Release.Apply(MsPad);
                            }
                        }
                    }

#line 204 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    SquareI.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(a), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aS, aSPad)))));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(aS);
#line hidden
                        Release.Apply(aSPad);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)), QVoid> ControlledAdjointBody => (__in__) =>
        {
            var (__controlQubits__,(a,Ms,Ts)) = __in__;
#line 204 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            var __qsVar0__num__ = a.Length;
#line 204 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            {
#line 204 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                var (__qsVar1__aS__,__qsVar2__aSPad__) = (Allocate.Apply(__qsVar0__num__), Allocate.Apply(__qsVar0__num__));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 204 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    SquareI.Adjoint.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(a), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(__qsVar1__aS__, __qsVar2__aSPad__)))));
#line 204 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    {
#line 204 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                        var (__qsVar3__anc__,__qsVar4__MsPad__) = (Allocate.Apply((__qsVar0__num__ * 2L)), Allocate.Apply(__qsVar0__num__));
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 204 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                            DivideI.Adjoint.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(__qsVar1__aS__, __qsVar2__aSPad__)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(Ms, __qsVar4__MsPad__)), new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar3__anc__))));
#line 204 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                            AddI.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar1__aS__), new Microsoft.Quantum.Arithmetic.LittleEndian(Ts))));
#line 204 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                            DivideI.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(__qsVar1__aS__, __qsVar2__aSPad__)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(Ms, __qsVar4__MsPad__)), new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar3__anc__))));
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release.Apply(__qsVar3__anc__);
#line hidden
                                Release.Apply(__qsVar4__MsPad__);
                            }
                        }
                    }

#line 204 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    SquareI.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(a), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(__qsVar1__aS__, __qsVar2__aSPad__)))));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(__qsVar1__aS__);
#line hidden
                        Release.Apply(__qsVar2__aSPad__);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.SquareI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(SquareI));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
            this.DivideI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(DivideI));
            this.AddI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(AddI));
        }

        public override IApplyData __dataIn((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> a, IQArray<Qubit> Ms, IQArray<Qubit> Ts)
        {
            return __m__.Run<SquareModM, (IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid>((a, Ms, Ts));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.Body, 217, 248)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.Adjoint, 217, 248)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.Controlled, 217, 248)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.ControlledAdjoint, 217, 248)]
    public partial class MultiplyModM : Unitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)>, ICallable
    {
        public MultiplyModM(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)>, IApplyData
        {
            public In((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3)?.Qubits, ((IApplyData)Data.Item4)?.Qubits);
                }
            }
        }

        String ICallable.Name => "MultiplyModM";
        String ICallable.FullName => "Quantum.Bell.MultiplyModM";
        protected ICallable Length
        {
            get;
            set;
        }

        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> MultiplyI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> DivideI
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> AddI
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid> Body => (__in__) =>
        {
            var (a,b,Ms,Ts) = __in__;
#line 218 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            var num = a.Length;
#line hidden
            {
#line 219 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                var (aS,aSPad) = (Allocate.Apply(num), Allocate.Apply(num));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 220 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MultiplyI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(a), new Microsoft.Quantum.Arithmetic.LittleEndian(b), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aS, aSPad))));
#line hidden
                    {
#line 221 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                        var (anc,MsPad) = (Allocate.Apply((num * 2L)), Allocate.Apply(num));
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 222 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                            DivideI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aS, aSPad)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(Ms, MsPad)), new Microsoft.Quantum.Arithmetic.LittleEndian(anc)));
#line 223 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                            AddI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(aS), new Microsoft.Quantum.Arithmetic.LittleEndian(Ts)));
#line 224 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                            DivideI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aS, aSPad)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(Ms, MsPad)), new Microsoft.Quantum.Arithmetic.LittleEndian(anc)));
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release.Apply(anc);
#line hidden
                                Release.Apply(MsPad);
                            }
                        }
                    }

#line 226 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MultiplyI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(a), new Microsoft.Quantum.Arithmetic.LittleEndian(b), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aS, aSPad))));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(aS);
#line hidden
                        Release.Apply(aSPad);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid> AdjointBody => (__in__) =>
        {
            var (a,b,Ms,Ts) = __in__;
#line 217 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            var __qsVar0__num__ = a.Length;
#line 217 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            {
#line 217 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                var (__qsVar1__aS__,__qsVar2__aSPad__) = (Allocate.Apply(__qsVar0__num__), Allocate.Apply(__qsVar0__num__));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 217 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MultiplyI.Adjoint.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(a), new Microsoft.Quantum.Arithmetic.LittleEndian(b), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(__qsVar1__aS__, __qsVar2__aSPad__))));
#line 217 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    {
#line 217 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                        var (__qsVar3__anc__,__qsVar4__MsPad__) = (Allocate.Apply((__qsVar0__num__ * 2L)), Allocate.Apply(__qsVar0__num__));
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 217 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                            DivideI.Adjoint.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(__qsVar1__aS__, __qsVar2__aSPad__)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(Ms, __qsVar4__MsPad__)), new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar3__anc__)));
#line 217 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                            AddI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar1__aS__), new Microsoft.Quantum.Arithmetic.LittleEndian(Ts)));
#line 217 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                            DivideI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(__qsVar1__aS__, __qsVar2__aSPad__)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(Ms, __qsVar4__MsPad__)), new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar3__anc__)));
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release.Apply(__qsVar3__anc__);
#line hidden
                                Release.Apply(__qsVar4__MsPad__);
                            }
                        }
                    }

#line 217 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MultiplyI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(a), new Microsoft.Quantum.Arithmetic.LittleEndian(b), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(__qsVar1__aS__, __qsVar2__aSPad__))));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(__qsVar1__aS__);
#line hidden
                        Release.Apply(__qsVar2__aSPad__);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)), QVoid> ControlledBody => (__in__) =>
        {
            var (__controlQubits__,(a,b,Ms,Ts)) = __in__;
#line 217 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            var num = a.Length;
#line 217 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            {
#line 217 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                var (aS,aSPad) = (Allocate.Apply(num), Allocate.Apply(num));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 217 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MultiplyI.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(a), new Microsoft.Quantum.Arithmetic.LittleEndian(b), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aS, aSPad)))));
#line 217 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    {
#line 217 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                        var (anc,MsPad) = (Allocate.Apply((num * 2L)), Allocate.Apply(num));
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 217 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                            DivideI.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aS, aSPad)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(Ms, MsPad)), new Microsoft.Quantum.Arithmetic.LittleEndian(anc))));
#line 217 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                            AddI.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(aS), new Microsoft.Quantum.Arithmetic.LittleEndian(Ts))));
#line 217 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                            DivideI.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aS, aSPad)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(Ms, MsPad)), new Microsoft.Quantum.Arithmetic.LittleEndian(anc))));
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release.Apply(anc);
#line hidden
                                Release.Apply(MsPad);
                            }
                        }
                    }

#line 217 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MultiplyI.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(a), new Microsoft.Quantum.Arithmetic.LittleEndian(b), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aS, aSPad)))));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(aS);
#line hidden
                        Release.Apply(aSPad);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)), QVoid> ControlledAdjointBody => (__in__) =>
        {
            var (__controlQubits__,(a,b,Ms,Ts)) = __in__;
#line 217 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            var __qsVar0__num__ = a.Length;
#line 217 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            {
#line 217 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                var (__qsVar1__aS__,__qsVar2__aSPad__) = (Allocate.Apply(__qsVar0__num__), Allocate.Apply(__qsVar0__num__));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 217 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MultiplyI.Adjoint.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(a), new Microsoft.Quantum.Arithmetic.LittleEndian(b), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(__qsVar1__aS__, __qsVar2__aSPad__)))));
#line 217 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    {
#line 217 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                        var (__qsVar3__anc__,__qsVar4__MsPad__) = (Allocate.Apply((__qsVar0__num__ * 2L)), Allocate.Apply(__qsVar0__num__));
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 217 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                            DivideI.Adjoint.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(__qsVar1__aS__, __qsVar2__aSPad__)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(Ms, __qsVar4__MsPad__)), new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar3__anc__))));
#line 217 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                            AddI.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar1__aS__), new Microsoft.Quantum.Arithmetic.LittleEndian(Ts))));
#line 217 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                            DivideI.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(__qsVar1__aS__, __qsVar2__aSPad__)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(Ms, __qsVar4__MsPad__)), new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar3__anc__))));
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release.Apply(__qsVar3__anc__);
#line hidden
                                Release.Apply(__qsVar4__MsPad__);
                            }
                        }
                    }

#line 217 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MultiplyI.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(a), new Microsoft.Quantum.Arithmetic.LittleEndian(b), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(__qsVar1__aS__, __qsVar2__aSPad__)))));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(__qsVar1__aS__);
#line hidden
                        Release.Apply(__qsVar2__aSPad__);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MultiplyI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(MultiplyI));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
            this.DivideI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(DivideI));
            this.AddI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(AddI));
        }

        public override IApplyData __dataIn((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> a, IQArray<Qubit> b, IQArray<Qubit> Ms, IQArray<Qubit> Ts)
        {
            return __m__.Run<MultiplyModM, (IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid>((a, b, Ms, Ts));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.Body, 250, 253)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.Adjoint, 273, 274)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.Controlled, 253, 273)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.ControlledAdjoint, 274, 279)]
    public partial class DivideI : Unitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>, ICallable
    {
        public DivideI(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>, IApplyData
        {
            public In((Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1?.Data)?.Qubits, ((IApplyData)Data.Item2?.Data)?.Qubits, ((IApplyData)Data.Item3?.Data)?.Qubits);
                }
            }
        }

        String ICallable.Name => "DivideI";
        String ICallable.FullName => "Quantum.Bell.DivideI";
        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> self
        {
            get;
            set;
        }

        protected ICallable Length
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,String), QVoid> MicrosoftQuantumDiagnosticsEqualityFactI
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> MicrosoftQuantumDiagnosticsAssertAllZero
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)> CompareGTI
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> AddI
        {
            get;
            set;
        }

        protected ICallable<QRange, QRange> RangeReverse
        {
            get;
            set;
        }

        public override Func<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid> Body => (__in__) =>
        {
            var (xs,ys,result) = __in__;
#line 251 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            self.Controlled.Apply((QArray<Qubit>.Create(0L), (xs, ys, result)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid> AdjointBody => (__in__) =>
        {
            var (xs,ys,result) = __in__;
#line 273 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            self.Controlled.Adjoint.Apply((QArray<Qubit>.Create(0L), (xs, ys, result)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)), QVoid> ControlledBody => (__in__) =>
        {
            var (controls,(xs,ys,result)) = __in__;
#line 254 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            var n = result.Data.Length;
#line 256 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((n, ys.Data.Length, "Integer division requires\n                           equally-sized registers ys and result."));
#line 258 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((n, xs.Data.Length, "Integer division\n                            requires an n-bit dividend registers."));
#line 260 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumDiagnosticsAssertAllZero.Apply(result.Data);
#line 262 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            var xpadded = new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(xs.Data, result.Data));
#line 264 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            foreach (var i in new QRange((n - 1L), -(1L), 0L))
#line hidden
            {
#line 265 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                var xtrunc = new Microsoft.Quantum.Arithmetic.LittleEndian(xpadded.Data?.Slice(new QRange(i, ((i + n) - 1L))));
#line 267 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                CompareGTI.Controlled.Apply((controls, (ys, xtrunc, result.Data[i])));
#line 269 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                MicrosoftQuantumIntrinsicX.Controlled.Apply((controls, result.Data[i]));
#line 270 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                AddI.Adjoint.Controlled.Apply((new QArray<Qubit>(result.Data[i]), (ys, xtrunc)));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)), QVoid> ControlledAdjointBody => (__in__) =>
        {
            var (controls,(xs,ys,result)) = __in__;
#line 274 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            var __qsVar0__n__ = result.Data.Length;
#line 274 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((__qsVar0__n__, ys.Data.Length, "Integer division requires\n                           equally-sized registers ys and result."));
#line 274 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((__qsVar0__n__, xs.Data.Length, "Integer division\n                            requires an n-bit dividend registers."));
#line 274 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            var __qsVar1__xpadded__ = new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(xs.Data, result.Data));
#line 274 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            foreach (var __qsVar2__i__ in RangeReverse.Apply(new QRange((__qsVar0__n__ - 1L), -(1L), 0L)))
#line hidden
            {
#line 274 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                var __qsVar3__xtrunc__ = new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar1__xpadded__.Data?.Slice(new QRange(__qsVar2__i__, ((__qsVar2__i__ + __qsVar0__n__) - 1L))));
#line 274 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                AddI.Adjoint.Controlled.Adjoint.Apply((new QArray<Qubit>(result.Data[__qsVar2__i__]), (ys, __qsVar3__xtrunc__)));
#line 274 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                MicrosoftQuantumIntrinsicX.Controlled.Adjoint.Apply((controls, result.Data[__qsVar2__i__]));
#line 274 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                CompareGTI.Controlled.Adjoint.Apply((controls, (ys, __qsVar3__xtrunc__, result.Data[__qsVar2__i__])));
            }

#line 274 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumDiagnosticsAssertAllZero.Adjoint.Apply(result.Data);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.self = this;
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumDiagnosticsEqualityFactI = this.Factory.Get<ICallable<(Int64,Int64,String), QVoid>>(typeof(Microsoft.Quantum.Diagnostics.EqualityFactI));
            this.MicrosoftQuantumDiagnosticsAssertAllZero = this.Factory.Get<IUnitary<IQArray<Qubit>>>(typeof(Microsoft.Quantum.Diagnostics.AssertAllZero));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
            this.CompareGTI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)>>(typeof(CompareGTI));
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
            this.AddI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(AddI));
            this.RangeReverse = this.Factory.Get<ICallable<QRange, QRange>>(typeof(Microsoft.Quantum.Core.RangeReverse));
        }

        public override IApplyData __dataIn((Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Microsoft.Quantum.Arithmetic.LittleEndian xs, Microsoft.Quantum.Arithmetic.LittleEndian ys, Microsoft.Quantum.Arithmetic.LittleEndian result)
        {
            return __m__.Run<DivideI, (Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid>((xs, ys, result));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.Body, 279, 295)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.Adjoint, 279, 295)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.Controlled, 279, 295)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.ControlledAdjoint, 279, 295)]
    public partial class AddI : Unitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>, ICallable
    {
        public AddI(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>, IApplyData
        {
            public In((Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1?.Data)?.Qubits, ((IApplyData)Data.Item2?.Data)?.Qubits);
                }
            }
        }

        String ICallable.Name => "AddI";
        String ICallable.FullName => "Quantum.Bell.AddI";
        protected ICallable Length
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> MicrosoftQuantumArithmeticRippleCarryAdderNoCarryTTK
        {
            get;
            set;
        }

        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)> MicrosoftQuantumArithmeticRippleCarryAdderTTK
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        protected ICallable MicrosoftQuantumArraysMost
        {
            get;
            set;
        }

        protected ICallable MicrosoftQuantumArraysTail
        {
            get;
            set;
        }

        public override Func<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid> Body => (__in__) =>
        {
            var (xs,ys) = __in__;
#line 280 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            if ((xs.Data.Length == ys.Data.Length))
            {
#line 281 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                MicrosoftQuantumArithmeticRippleCarryAdderNoCarryTTK.Apply((xs, ys));
            }
            else if ((ys.Data.Length > xs.Data.Length))
            {
#line hidden
                {
#line 284 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    var qs = Allocate.Apply(((ys.Data.Length - xs.Data.Length) - 1L));
#line hidden
                    bool __arg1__ = true;
                    try
                    {
#line 285 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                        MicrosoftQuantumArithmeticRippleCarryAdderTTK.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(xs.Data, qs)), new Microsoft.Quantum.Arithmetic.LittleEndian(MicrosoftQuantumArraysMost.Apply<IQArray<Qubit>>(ys.Data)), MicrosoftQuantumArraysTail.Apply<Qubit>(ys.Data)));
                    }
#line hidden
                    catch
                    {
                        __arg1__ = false;
                        throw;
                    }
#line hidden
                    finally
                    {
                        if (__arg1__)
                        {
#line hidden
                            Release.Apply(qs);
                        }
                    }
                }
            }
            else
            {
#line 290 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                throw new ExecutionFailException("xs must not contain more qubits than ys!");
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid> AdjointBody => (__in__) =>
        {
            var (xs,ys) = __in__;
#line 279 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            if ((xs.Data.Length == ys.Data.Length))
            {
#line 279 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                MicrosoftQuantumArithmeticRippleCarryAdderNoCarryTTK.Adjoint.Apply((xs, ys));
            }
            else if ((ys.Data.Length > xs.Data.Length))
            {
#line 279 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                {
#line 279 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    var __qsVar0__qs__ = Allocate.Apply(((ys.Data.Length - xs.Data.Length) - 1L));
#line hidden
                    bool __arg1__ = true;
                    try
                    {
#line 279 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                        MicrosoftQuantumArithmeticRippleCarryAdderTTK.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(xs.Data, __qsVar0__qs__)), new Microsoft.Quantum.Arithmetic.LittleEndian(MicrosoftQuantumArraysMost.Apply<IQArray<Qubit>>(ys.Data)), MicrosoftQuantumArraysTail.Apply<Qubit>(ys.Data)));
                    }
#line hidden
                    catch
                    {
                        __arg1__ = false;
                        throw;
                    }
#line hidden
                    finally
                    {
                        if (__arg1__)
                        {
#line hidden
                            Release.Apply(__qsVar0__qs__);
                        }
                    }
                }
            }
            else
            {
#line 279 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                throw new ExecutionFailException("xs must not contain more qubits than ys!");
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)), QVoid> ControlledBody => (__in__) =>
        {
            var (__controlQubits__,(xs,ys)) = __in__;
#line 279 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            if ((xs.Data.Length == ys.Data.Length))
            {
#line 279 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                MicrosoftQuantumArithmeticRippleCarryAdderNoCarryTTK.Controlled.Apply((__controlQubits__, (xs, ys)));
            }
            else if ((ys.Data.Length > xs.Data.Length))
            {
#line 279 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                {
#line 279 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    var qs = Allocate.Apply(((ys.Data.Length - xs.Data.Length) - 1L));
#line hidden
                    bool __arg1__ = true;
                    try
                    {
#line 279 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                        MicrosoftQuantumArithmeticRippleCarryAdderTTK.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(xs.Data, qs)), new Microsoft.Quantum.Arithmetic.LittleEndian(MicrosoftQuantumArraysMost.Apply<IQArray<Qubit>>(ys.Data)), MicrosoftQuantumArraysTail.Apply<Qubit>(ys.Data))));
                    }
#line hidden
                    catch
                    {
                        __arg1__ = false;
                        throw;
                    }
#line hidden
                    finally
                    {
                        if (__arg1__)
                        {
#line hidden
                            Release.Apply(qs);
                        }
                    }
                }
            }
            else
            {
#line 279 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                throw new ExecutionFailException("xs must not contain more qubits than ys!");
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)), QVoid> ControlledAdjointBody => (__in__) =>
        {
            var (__controlQubits__,(xs,ys)) = __in__;
#line 279 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            if ((xs.Data.Length == ys.Data.Length))
            {
#line 279 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                MicrosoftQuantumArithmeticRippleCarryAdderNoCarryTTK.Adjoint.Controlled.Apply((__controlQubits__, (xs, ys)));
            }
            else if ((ys.Data.Length > xs.Data.Length))
            {
#line 279 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                {
#line 279 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    var __qsVar0__qs__ = Allocate.Apply(((ys.Data.Length - xs.Data.Length) - 1L));
#line hidden
                    bool __arg1__ = true;
                    try
                    {
#line 279 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                        MicrosoftQuantumArithmeticRippleCarryAdderTTK.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(xs.Data, __qsVar0__qs__)), new Microsoft.Quantum.Arithmetic.LittleEndian(MicrosoftQuantumArraysMost.Apply<IQArray<Qubit>>(ys.Data)), MicrosoftQuantumArraysTail.Apply<Qubit>(ys.Data))));
                    }
#line hidden
                    catch
                    {
                        __arg1__ = false;
                        throw;
                    }
#line hidden
                    finally
                    {
                        if (__arg1__)
                        {
#line hidden
                            Release.Apply(__qsVar0__qs__);
                        }
                    }
                }
            }
            else
            {
#line 279 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                throw new ExecutionFailException("xs must not contain more qubits than ys!");
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumArithmeticRippleCarryAdderNoCarryTTK = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(Microsoft.Quantum.Arithmetic.RippleCarryAdderNoCarryTTK));
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MicrosoftQuantumArithmeticRippleCarryAdderTTK = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)>>(typeof(Microsoft.Quantum.Arithmetic.RippleCarryAdderTTK));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
            this.MicrosoftQuantumArraysMost = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Arrays.Most<>));
            this.MicrosoftQuantumArraysTail = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Arrays.Tail<>));
        }

        public override IApplyData __dataIn((Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Microsoft.Quantum.Arithmetic.LittleEndian xs, Microsoft.Quantum.Arithmetic.LittleEndian ys)
        {
            return __m__.Run<AddI, (Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid>((xs, ys));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.Body, 295, 300)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.Adjoint, 295, 300)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.Controlled, 295, 300)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.ControlledAdjoint, 295, 300)]
    public partial class CompareGTI : Unitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)>, ICallable
    {
        public CompareGTI(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)>, IApplyData
        {
            public In((Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1?.Data)?.Qubits, ((IApplyData)Data.Item2?.Data)?.Qubits, ((IApplyData)Data.Item3)?.Qubits);
                }
            }
        }

        String ICallable.Name => "CompareGTI";
        String ICallable.FullName => "Quantum.Bell.CompareGTI";
        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)> MicrosoftQuantumArithmeticGreaterThan
        {
            get;
            set;
        }

        public override Func<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit), QVoid> Body => (__in__) =>
        {
            var (xs,ys,result) = __in__;
#line 297 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumArithmeticGreaterThan.Apply((xs, ys, result));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit), QVoid> AdjointBody => (__in__) =>
        {
            var (xs,ys,result) = __in__;
#line 295 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumArithmeticGreaterThan.Adjoint.Apply((xs, ys, result));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)), QVoid> ControlledBody => (__in__) =>
        {
            var (__controlQubits__,(xs,ys,result)) = __in__;
#line 295 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumArithmeticGreaterThan.Controlled.Apply((__controlQubits__, (xs, ys, result)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)), QVoid> ControlledAdjointBody => (__in__) =>
        {
            var (__controlQubits__,(xs,ys,result)) = __in__;
#line 295 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumArithmeticGreaterThan.Adjoint.Controlled.Apply((__controlQubits__, (xs, ys, result)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumArithmeticGreaterThan = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)>>(typeof(Microsoft.Quantum.Arithmetic.GreaterThan));
        }

        public override IApplyData __dataIn((Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Microsoft.Quantum.Arithmetic.LittleEndian xs, Microsoft.Quantum.Arithmetic.LittleEndian ys, Qubit result)
        {
            return __m__.Run<CompareGTI, (Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit), QVoid>((xs, ys, result));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.Body, 302, 315)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.Adjoint, 332, 333)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.Controlled, 315, 332)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.ControlledAdjoint, 333, 338)]
    public partial class MultiplyI : Unitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>, ICallable
    {
        public MultiplyI(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>, IApplyData
        {
            public In((Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1?.Data)?.Qubits, ((IApplyData)Data.Item2?.Data)?.Qubits, ((IApplyData)Data.Item3?.Data)?.Qubits);
                }
            }
        }

        String ICallable.Name => "MultiplyI";
        String ICallable.FullName => "Quantum.Bell.MultiplyI";
        protected ICallable Length
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,String), QVoid> MicrosoftQuantumDiagnosticsEqualityFactI
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> MicrosoftQuantumDiagnosticsAssertAllZero
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> AddI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        protected ICallable<QRange, QRange> RangeReverse
        {
            get;
            set;
        }

        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> MicrosoftQuantumIntrinsicCNOT
        {
            get;
            set;
        }

        public override Func<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid> Body => (__in__) =>
        {
            var (xs,ys,result) = __in__;
#line 303 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            var n = xs.Data.Length;
#line 305 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((n, ys.Data.Length, "Integer multiplication requires\n                           equally-sized registers xs and ys."));
#line 307 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply(((2L * n), result.Data.Length, "Integer multiplication\n                            requires a 2n-bit result registers."));
#line 309 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumDiagnosticsAssertAllZero.Apply(result.Data);
#line 311 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            foreach (var i in new QRange(0L, (n - 1L)))
#line hidden
            {
#line 312 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                AddI.Controlled.Apply((new QArray<Qubit>(xs.Data[i]), (ys, new Microsoft.Quantum.Arithmetic.LittleEndian(result.Data?.Slice(new QRange(i, (i + n)))))));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid> AdjointBody => (__in__) =>
        {
            var (xs,ys,result) = __in__;
#line 332 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            var __qsVar0__n__ = xs.Data.Length;
#line 332 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((__qsVar0__n__, ys.Data.Length, "Integer multiplication requires\n                           equally-sized registers xs and ys."));
#line 332 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply(((2L * __qsVar0__n__), result.Data.Length, "Integer multiplication\n                            requires a 2n-bit result registers."));
#line 332 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            foreach (var __qsVar1__i__ in RangeReverse.Apply(new QRange(0L, (__qsVar0__n__ - 1L))))
#line hidden
            {
#line 332 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                AddI.Controlled.Adjoint.Apply((new QArray<Qubit>(xs.Data[__qsVar1__i__]), (ys, new Microsoft.Quantum.Arithmetic.LittleEndian(result.Data?.Slice(new QRange(__qsVar1__i__, (__qsVar1__i__ + __qsVar0__n__)))))));
            }

#line 332 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumDiagnosticsAssertAllZero.Adjoint.Apply(result.Data);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)), QVoid> ControlledBody => (__in__) =>
        {
            var (controls,(xs,ys,result)) = __in__;
#line 316 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            var n = xs.Data.Length;
#line 318 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((n, ys.Data.Length, "Integer multiplication requires\n                           equally-sized registers xs and ys."));
#line 320 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply(((2L * n), result.Data.Length, "Integer multiplication\n                            requires a 2n-bit result registers."));
#line 322 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumDiagnosticsAssertAllZero.Apply(result.Data);
#line hidden
            {
#line 324 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                var anc = Allocate.Apply();
#line hidden
                bool __arg1__ = true;
                try
                {
#line 325 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    foreach (var i in new QRange(0L, (n - 1L)))
#line hidden
                    {
#line 326 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                        MicrosoftQuantumIntrinsicCNOT.Controlled.Apply((controls, (xs.Data[i], anc)));
#line 327 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                        AddI.Controlled.Apply((new QArray<Qubit>(anc), (ys, new Microsoft.Quantum.Arithmetic.LittleEndian(result.Data?.Slice(new QRange(i, (i + n)))))));
#line 328 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                        MicrosoftQuantumIntrinsicCNOT.Controlled.Apply((controls, (xs.Data[i], anc)));
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(anc);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)), QVoid> ControlledAdjointBody => (__in__) =>
        {
            var (controls,(xs,ys,result)) = __in__;
#line 333 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            var __qsVar0__n__ = xs.Data.Length;
#line 333 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((__qsVar0__n__, ys.Data.Length, "Integer multiplication requires\n                           equally-sized registers xs and ys."));
#line 333 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply(((2L * __qsVar0__n__), result.Data.Length, "Integer multiplication\n                            requires a 2n-bit result registers."));
#line 333 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            {
#line 333 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                var __qsVar1__anc__ = Allocate.Apply();
#line hidden
                bool __arg1__ = true;
                try
                {
#line 333 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    foreach (var __qsVar2__i__ in RangeReverse.Apply(new QRange(0L, (__qsVar0__n__ - 1L))))
#line hidden
                    {
#line 333 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                        MicrosoftQuantumIntrinsicCNOT.Controlled.Adjoint.Apply((controls, (xs.Data[__qsVar2__i__], __qsVar1__anc__)));
#line 333 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                        AddI.Controlled.Adjoint.Apply((new QArray<Qubit>(__qsVar1__anc__), (ys, new Microsoft.Quantum.Arithmetic.LittleEndian(result.Data?.Slice(new QRange(__qsVar2__i__, (__qsVar2__i__ + __qsVar0__n__)))))));
#line 333 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                        MicrosoftQuantumIntrinsicCNOT.Controlled.Adjoint.Apply((controls, (xs.Data[__qsVar2__i__], __qsVar1__anc__)));
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(__qsVar1__anc__);
                    }
                }
            }

#line 333 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumDiagnosticsAssertAllZero.Adjoint.Apply(result.Data);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumDiagnosticsEqualityFactI = this.Factory.Get<ICallable<(Int64,Int64,String), QVoid>>(typeof(Microsoft.Quantum.Diagnostics.EqualityFactI));
            this.MicrosoftQuantumDiagnosticsAssertAllZero = this.Factory.Get<IUnitary<IQArray<Qubit>>>(typeof(Microsoft.Quantum.Diagnostics.AssertAllZero));
            this.AddI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(AddI));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
            this.RangeReverse = this.Factory.Get<ICallable<QRange, QRange>>(typeof(Microsoft.Quantum.Core.RangeReverse));
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MicrosoftQuantumIntrinsicCNOT = this.Factory.Get<IUnitary<(Qubit,Qubit)>>(typeof(Microsoft.Quantum.Intrinsic.CNOT));
        }

        public override IApplyData __dataIn((Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Microsoft.Quantum.Arithmetic.LittleEndian xs, Microsoft.Quantum.Arithmetic.LittleEndian ys, Microsoft.Quantum.Arithmetic.LittleEndian result)
        {
            return __m__.Run<MultiplyI, (Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid>((xs, ys, result));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.Body, 339, 342)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.Adjoint, 358, 359)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.Controlled, 342, 358)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.ControlledAdjoint, 359, 363)]
    public partial class SquareI : Unitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>, ICallable
    {
        public SquareI(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>, IApplyData
        {
            public In((Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1?.Data)?.Qubits, ((IApplyData)Data.Item2?.Data)?.Qubits);
                }
            }
        }

        String ICallable.Name => "SquareI";
        String ICallable.FullName => "Quantum.Bell.SquareI";
        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> self
        {
            get;
            set;
        }

        protected ICallable Length
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,String), QVoid> MicrosoftQuantumDiagnosticsEqualityFactI
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> MicrosoftQuantumDiagnosticsAssertAllZero
        {
            get;
            set;
        }

        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> MicrosoftQuantumIntrinsicCNOT
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> AddI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        protected ICallable<QRange, QRange> RangeReverse
        {
            get;
            set;
        }

        public override Func<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid> Body => (__in__) =>
        {
            var (xs,result) = __in__;
#line 340 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            self.Controlled.Apply((QArray<Qubit>.Create(0L), (xs, result)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid> AdjointBody => (__in__) =>
        {
            var (xs,result) = __in__;
#line 358 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            self.Controlled.Adjoint.Apply((QArray<Qubit>.Create(0L), (xs, result)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)), QVoid> ControlledBody => (__in__) =>
        {
            var (controls,(xs,result)) = __in__;
#line 343 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            var n = xs.Data.Length;
#line 345 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply(((2L * n), result.Data.Length, "Integer multiplication\n                            requires a 2n-bit result registers."));
#line 347 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumDiagnosticsAssertAllZero.Apply(result.Data);
#line hidden
            {
#line 349 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                var anc = Allocate.Apply();
#line hidden
                bool __arg1__ = true;
                try
                {
#line 350 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    foreach (var i in new QRange(0L, (n - 1L)))
#line hidden
                    {
#line 351 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                        MicrosoftQuantumIntrinsicCNOT.Controlled.Apply((controls, (xs.Data[i], anc)));
#line 352 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                        AddI.Controlled.Apply((new QArray<Qubit>(anc), (xs, new Microsoft.Quantum.Arithmetic.LittleEndian(result.Data?.Slice(new QRange(i, (i + n)))))));
#line 354 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                        MicrosoftQuantumIntrinsicCNOT.Controlled.Apply((controls, (xs.Data[i], anc)));
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(anc);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)), QVoid> ControlledAdjointBody => (__in__) =>
        {
            var (controls,(xs,result)) = __in__;
#line 359 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            var __qsVar0__n__ = xs.Data.Length;
#line 359 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply(((2L * __qsVar0__n__), result.Data.Length, "Integer multiplication\n                            requires a 2n-bit result registers."));
#line 359 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            {
#line 359 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                var __qsVar1__anc__ = Allocate.Apply();
#line hidden
                bool __arg1__ = true;
                try
                {
#line 359 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    foreach (var __qsVar2__i__ in RangeReverse.Apply(new QRange(0L, (__qsVar0__n__ - 1L))))
#line hidden
                    {
#line 359 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                        MicrosoftQuantumIntrinsicCNOT.Controlled.Adjoint.Apply((controls, (xs.Data[__qsVar2__i__], __qsVar1__anc__)));
#line 359 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                        AddI.Controlled.Adjoint.Apply((new QArray<Qubit>(__qsVar1__anc__), (xs, new Microsoft.Quantum.Arithmetic.LittleEndian(result.Data?.Slice(new QRange(__qsVar2__i__, (__qsVar2__i__ + __qsVar0__n__)))))));
#line 359 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                        MicrosoftQuantumIntrinsicCNOT.Controlled.Adjoint.Apply((controls, (xs.Data[__qsVar2__i__], __qsVar1__anc__)));
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(__qsVar1__anc__);
                    }
                }
            }

#line 359 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumDiagnosticsAssertAllZero.Adjoint.Apply(result.Data);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.self = this;
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumDiagnosticsEqualityFactI = this.Factory.Get<ICallable<(Int64,Int64,String), QVoid>>(typeof(Microsoft.Quantum.Diagnostics.EqualityFactI));
            this.MicrosoftQuantumDiagnosticsAssertAllZero = this.Factory.Get<IUnitary<IQArray<Qubit>>>(typeof(Microsoft.Quantum.Diagnostics.AssertAllZero));
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MicrosoftQuantumIntrinsicCNOT = this.Factory.Get<IUnitary<(Qubit,Qubit)>>(typeof(Microsoft.Quantum.Intrinsic.CNOT));
            this.AddI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(AddI));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
            this.RangeReverse = this.Factory.Get<ICallable<QRange, QRange>>(typeof(Microsoft.Quantum.Core.RangeReverse));
        }

        public override IApplyData __dataIn((Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Microsoft.Quantum.Arithmetic.LittleEndian xs, Microsoft.Quantum.Arithmetic.LittleEndian result)
        {
            return __m__.Run<SquareI, (Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid>((xs, result));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.Body, 366, 369)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.Adjoint, 390, 391)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.Controlled, 369, 390)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.ControlledAdjoint, 391, 394)]
    public partial class MultiplySI : Unitary<(SignedLittleEndian,SignedLittleEndian,SignedLittleEndian)>, ICallable
    {
        public MultiplySI(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(SignedLittleEndian,SignedLittleEndian,SignedLittleEndian)>, IApplyData
        {
            public In((SignedLittleEndian,SignedLittleEndian,SignedLittleEndian) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1?.Data?.Data)?.Qubits, ((IApplyData)Data.Item2?.Data?.Data)?.Qubits, ((IApplyData)Data.Item3?.Data?.Data)?.Qubits);
                }
            }
        }

        String ICallable.Name => "MultiplySI";
        String ICallable.FullName => "Quantum.Bell.MultiplySI";
        protected IUnitary<(SignedLittleEndian,SignedLittleEndian,SignedLittleEndian)> self
        {
            get;
            set;
        }

        protected ICallable Length
        {
            get;
            set;
        }

        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> MicrosoftQuantumIntrinsicCNOT
        {
            get;
            set;
        }

        protected ICallable MicrosoftQuantumArraysTail
        {
            get;
            set;
        }

        protected IUnitary<SignedLittleEndian> Invert2sSI
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> MultiplyI
        {
            get;
            set;
        }

        public override Func<(SignedLittleEndian,SignedLittleEndian,SignedLittleEndian), QVoid> Body => (__in__) =>
        {
            var (xs,ys,result) = __in__;
#line 367 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            self.Controlled.Apply((QArray<Qubit>.Create(0L), (xs, ys, result)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(SignedLittleEndian,SignedLittleEndian,SignedLittleEndian), QVoid> AdjointBody => (__in__) =>
        {
            var (xs,ys,result) = __in__;
#line 390 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            self.Controlled.Adjoint.Apply((QArray<Qubit>.Create(0L), (xs, ys, result)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(SignedLittleEndian,SignedLittleEndian,SignedLittleEndian)), QVoid> ControlledBody => (__in__) =>
        {
            var (controls,(xs,ys,result)) = __in__;
#line 370 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            var n = xs.Data.Data.Length;
#line hidden
            {
#line 371 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                var (signx,signy) = (Allocate.Apply(), Allocate.Apply());
#line hidden
                bool __arg1__ = true;
                try
                {
#line 372 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumIntrinsicCNOT.Apply((MicrosoftQuantumArraysTail.Apply<Qubit>(xs.Data.Data), signx));
#line 373 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumIntrinsicCNOT.Apply((MicrosoftQuantumArraysTail.Apply<Qubit>(ys.Data.Data), signy));
#line 374 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    Invert2sSI.Controlled.Apply((new QArray<Qubit>(signx), xs));
#line 375 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    Invert2sSI.Controlled.Apply((new QArray<Qubit>(signy), ys));
#line 377 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MultiplyI.Controlled.Apply((controls, (xs.Data, ys.Data, result.Data)));
#line 378 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumIntrinsicCNOT.Apply((signx, signy));
#line 381 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    Invert2sSI.Controlled.Apply((new QArray<Qubit>(signy), result));
#line 382 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumIntrinsicCNOT.Apply((signx, signy));
#line 384 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    Invert2sSI.Adjoint.Controlled.Apply((new QArray<Qubit>(signx), xs));
#line 385 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    Invert2sSI.Adjoint.Controlled.Apply((new QArray<Qubit>(signy), ys));
#line 386 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumIntrinsicCNOT.Apply((MicrosoftQuantumArraysTail.Apply<Qubit>(xs.Data.Data), signx));
#line 387 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumIntrinsicCNOT.Apply((MicrosoftQuantumArraysTail.Apply<Qubit>(ys.Data.Data), signy));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(signx);
#line hidden
                        Release.Apply(signy);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(SignedLittleEndian,SignedLittleEndian,SignedLittleEndian)), QVoid> ControlledAdjointBody => (__in__) =>
        {
            var (controls,(xs,ys,result)) = __in__;
#line 391 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            var __qsVar0__n__ = xs.Data.Data.Length;
#line 391 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            {
#line 391 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                var (__qsVar1__signx__,__qsVar2__signy__) = (Allocate.Apply(), Allocate.Apply());
#line hidden
                bool __arg1__ = true;
                try
                {
#line 391 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumIntrinsicCNOT.Adjoint.Apply((MicrosoftQuantumArraysTail.Apply<Qubit>(ys.Data.Data), __qsVar2__signy__));
#line 391 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumIntrinsicCNOT.Adjoint.Apply((MicrosoftQuantumArraysTail.Apply<Qubit>(xs.Data.Data), __qsVar1__signx__));
#line 391 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    Invert2sSI.Adjoint.Controlled.Adjoint.Apply((new QArray<Qubit>(__qsVar2__signy__), ys));
#line 391 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    Invert2sSI.Adjoint.Controlled.Adjoint.Apply((new QArray<Qubit>(__qsVar1__signx__), xs));
#line 391 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumIntrinsicCNOT.Adjoint.Apply((__qsVar1__signx__, __qsVar2__signy__));
#line 391 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    Invert2sSI.Controlled.Adjoint.Apply((new QArray<Qubit>(__qsVar2__signy__), result));
#line 391 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumIntrinsicCNOT.Adjoint.Apply((__qsVar1__signx__, __qsVar2__signy__));
#line 391 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MultiplyI.Controlled.Adjoint.Apply((controls, (xs.Data, ys.Data, result.Data)));
#line 391 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    Invert2sSI.Controlled.Adjoint.Apply((new QArray<Qubit>(__qsVar2__signy__), ys));
#line 391 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    Invert2sSI.Controlled.Adjoint.Apply((new QArray<Qubit>(__qsVar1__signx__), xs));
#line 391 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumIntrinsicCNOT.Adjoint.Apply((MicrosoftQuantumArraysTail.Apply<Qubit>(ys.Data.Data), __qsVar2__signy__));
#line 391 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumIntrinsicCNOT.Adjoint.Apply((MicrosoftQuantumArraysTail.Apply<Qubit>(xs.Data.Data), __qsVar1__signx__));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(__qsVar1__signx__);
#line hidden
                        Release.Apply(__qsVar2__signy__);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.self = this;
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MicrosoftQuantumIntrinsicCNOT = this.Factory.Get<IUnitary<(Qubit,Qubit)>>(typeof(Microsoft.Quantum.Intrinsic.CNOT));
            this.MicrosoftQuantumArraysTail = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Arrays.Tail<>));
            this.Invert2sSI = this.Factory.Get<IUnitary<SignedLittleEndian>>(typeof(Invert2sSI));
            this.MultiplyI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(MultiplyI));
        }

        public override IApplyData __dataIn((SignedLittleEndian,SignedLittleEndian,SignedLittleEndian) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, SignedLittleEndian xs, SignedLittleEndian ys, SignedLittleEndian result)
        {
            return __m__.Run<MultiplySI, (SignedLittleEndian,SignedLittleEndian,SignedLittleEndian), QVoid>((xs, ys, result));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.Body, 395, 398)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.Adjoint, 407, 408)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.Controlled, 398, 407)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs", OperationFunctor.ControlledAdjoint, 408, -1)]
    public partial class Invert2sSI : Unitary<SignedLittleEndian>, ICallable
    {
        public Invert2sSI(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "Invert2sSI";
        String ICallable.FullName => "Quantum.Bell.Invert2sSI";
        protected IUnitary<SignedLittleEndian> self
        {
            get;
            set;
        }

        protected IUnitary MicrosoftQuantumCanonApplyToEachCA
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected ICallable Length
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> AddI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        public override Func<SignedLittleEndian, QVoid> Body => (__in__) =>
        {
            var xs = __in__;
#line 396 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            self.Controlled.Apply((QArray<Qubit>.Create(0L), xs));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<SignedLittleEndian, QVoid> AdjointBody => (__in__) =>
        {
            var xs = __in__;
#line 407 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            self.Controlled.Adjoint.Apply((QArray<Qubit>.Create(0L), xs));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,SignedLittleEndian), QVoid> ControlledBody => (__in__) =>
        {
            var (controls,xs) = __in__;
#line 399 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumCanonApplyToEachCA.Apply((MicrosoftQuantumIntrinsicX.Controlled.Partial(new Func<Qubit, (IQArray<Qubit>,Qubit)>((__arg1__) => (controls, __arg1__))), xs.Data.Data));
#line hidden
            {
#line 401 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                var ancillas = Allocate.Apply(xs.Data.Data.Length);
#line hidden
                bool __arg2__ = true;
                try
                {
#line 402 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumIntrinsicX.Controlled.Apply((controls, ancillas[0L]));
#line 403 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    AddI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(ancillas), xs.Data));
#line 404 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumIntrinsicX.Controlled.Apply((controls, ancillas[0L]));
                }
#line hidden
                catch
                {
                    __arg2__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg2__)
                    {
#line hidden
                        Release.Apply(ancillas);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,SignedLittleEndian), QVoid> ControlledAdjointBody => (__in__) =>
        {
            var (controls,xs) = __in__;
#line 408 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            {
#line 408 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                var __qsVar0__ancillas__ = Allocate.Apply(xs.Data.Data.Length);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 408 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumIntrinsicX.Controlled.Adjoint.Apply((controls, __qsVar0__ancillas__[0L]));
#line 408 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    AddI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar0__ancillas__), xs.Data));
#line 408 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
                    MicrosoftQuantumIntrinsicX.Controlled.Adjoint.Apply((controls, __qsVar0__ancillas__[0L]));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(__qsVar0__ancillas__);
                    }
                }
            }

#line 408 "/Users/Matt/Documents/Masters/Dissertation/DisQsharp/Inital_Test/Program.qs"
            MicrosoftQuantumCanonApplyToEachCA.Adjoint.Apply((MicrosoftQuantumIntrinsicX.Controlled.Partial(new Func<Qubit, (IQArray<Qubit>,Qubit)>((__arg2__) => (controls, __arg2__))), xs.Data.Data));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.self = this;
            this.MicrosoftQuantumCanonApplyToEachCA = this.Factory.Get<IUnitary>(typeof(Microsoft.Quantum.Canon.ApplyToEachCA<>));
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.AddI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(AddI));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
        }

        public override IApplyData __dataIn(SignedLittleEndian data) => data;
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, SignedLittleEndian xs)
        {
            return __m__.Run<Invert2sSI, SignedLittleEndian, QVoid>(xs);
        }
    }
}