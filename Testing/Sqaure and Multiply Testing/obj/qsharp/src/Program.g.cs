//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Shor.Testing\",\"Name\":\"TestingSquareMultiply\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs\",\"Position\":{\"Item1\":12,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":32}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor.Testing\",\"Name\":\"TestingSquareMultiply\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs\",\"Position\":{\"Item1\":12,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":32}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Shor.Testing\",\"Name\":\"SquareAndMultiply\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs\",\"Position\":{\"Item1\":33,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":28}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"ai\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":29},\"Item2\":{\"Line\":1,\"Column\":31}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"mi\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":36},\"Item2\":{\"Line\":1,\"Column\":38}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"ji\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":43},\"Item2\":{\"Line\":1,\"Column\":45}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor.Testing\",\"Name\":\"SquareAndMultiply\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs\",\"Position\":{\"Item1\":33,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":28}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Shor.Testing\",\"Name\":\"SquareAndMultiplyIteration\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs\",\"Position\":{\"Item1\":325,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":37}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"a\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":38},\"Item2\":{\"Line\":1,\"Column\":39}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"v\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":48},\"Item2\":{\"Line\":1,\"Column\":49}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"m\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":58},\"Item2\":{\"Line\":1,\"Column\":59}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"c\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":68},\"Item2\":{\"Line\":1,\"Column\":69}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"z\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":76},\"Item2\":{\"Line\":1,\"Column\":77}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"ld\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":84},\"Item2\":{\"Line\":1,\"Column\":86}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"t\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":93},\"Item2\":{\"Line\":1,\"Column\":94}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"},{\"Case\":\"Qubit\"},{\"Case\":\"Qubit\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor.Testing\",\"Name\":\"SquareAndMultiplyIteration\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs\",\"Position\":{\"Item1\":325,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":37}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor.Testing\",\"Name\":\"SquareAndMultiplyIteration\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs\",\"Position\":{\"Item1\":325,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":114},\"Item2\":{\"Line\":1,\"Column\":123}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Shor.Testing.SquareAndMultiplyIteration\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor.Testing\",\"Name\":\"SquareAndMultiplyIteration\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs\",\"Position\":{\"Item1\":325,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":114},\"Item2\":{\"Line\":1,\"Column\":123}},\"Documentation\":[\"automatically generated QsControlled specialization for Shor.Testing.SquareAndMultiplyIteration\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor.Testing\",\"Name\":\"SquareAndMultiplyIteration\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs\",\"Position\":{\"Item1\":325,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":114},\"Item2\":{\"Line\":1,\"Column\":123}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for Shor.Testing.SquareAndMultiplyIteration\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Shor.Testing\",\"Name\":\"SquareModM\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs\",\"Position\":{\"Item1\":343,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":21}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"a\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":22},\"Item2\":{\"Line\":1,\"Column\":23}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"Ms\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":32},\"Item2\":{\"Line\":1,\"Column\":34}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"Ts\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":43},\"Item2\":{\"Line\":1,\"Column\":45}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor.Testing\",\"Name\":\"SquareModM\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs\",\"Position\":{\"Item1\":343,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":21}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor.Testing\",\"Name\":\"SquareModM\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs\",\"Position\":{\"Item1\":343,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":65},\"Item2\":{\"Line\":1,\"Column\":74}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Shor.Testing.SquareModM\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor.Testing\",\"Name\":\"SquareModM\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs\",\"Position\":{\"Item1\":343,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":65},\"Item2\":{\"Line\":1,\"Column\":74}},\"Documentation\":[\"automatically generated QsControlled specialization for Shor.Testing.SquareModM\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor.Testing\",\"Name\":\"SquareModM\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs\",\"Position\":{\"Item1\":343,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":65},\"Item2\":{\"Line\":1,\"Column\":74}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for Shor.Testing.SquareModM\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Shor.Testing\",\"Name\":\"MultiplyModM\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs\",\"Position\":{\"Item1\":356,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":23}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"a\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":24},\"Item2\":{\"Line\":1,\"Column\":25}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"b\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":34},\"Item2\":{\"Line\":1,\"Column\":35}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"Ms\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":44},\"Item2\":{\"Line\":1,\"Column\":46}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"Ts\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":55},\"Item2\":{\"Line\":1,\"Column\":57}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor.Testing\",\"Name\":\"MultiplyModM\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs\",\"Position\":{\"Item1\":356,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":23}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor.Testing\",\"Name\":\"MultiplyModM\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs\",\"Position\":{\"Item1\":356,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":77},\"Item2\":{\"Line\":1,\"Column\":86}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Shor.Testing.MultiplyModM\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor.Testing\",\"Name\":\"MultiplyModM\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs\",\"Position\":{\"Item1\":356,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":77},\"Item2\":{\"Line\":1,\"Column\":86}},\"Documentation\":[\"automatically generated QsControlled specialization for Shor.Testing.MultiplyModM\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor.Testing\",\"Name\":\"MultiplyModM\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs\",\"Position\":{\"Item1\":356,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":77},\"Item2\":{\"Line\":1,\"Column\":86}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for Shor.Testing.MultiplyModM\"]}")]
#line hidden
namespace Shor.Testing
{
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs", OperationFunctor.Body, 13, 34)]
    public partial class TestingSquareMultiply : Operation<QVoid, QVoid>, ICallable
    {
        public TestingSquareMultiply(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "TestingSquareMultiply";
        String ICallable.FullName => "Shor.Testing.TestingSquareMultiply";
        protected ICallable<String, QVoid> Message
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,Int64), Int64> SquareAndMultiply
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64), Int64> MicrosoftQuantumMathModI
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> Body => (__in__) =>
        {
#line 14 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
            var accurate = 1L;
#line 15 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
            foreach (var j in new QRange(0L, 0L))
#line hidden
            {
#line 16 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                foreach (var m in new QRange(2L, 15L))
#line hidden
                {
#line 17 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    foreach (var a in new QRange(1L, (m - 1L)))
#line hidden
                    {
#line 18 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                        Message.Apply(String.Format("{0},{1},{2}", a, m, j));
#line 19 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                        var res = SquareAndMultiply.Apply((a, m, j));
#line 20 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                        var exp = MicrosoftQuantumMathModI.Apply((a.Pow(j), m));
#line 21 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                        if ((res != exp))
                        {
#line 21 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                            accurate = 0L;
                        }

#line 22 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                        Message.Apply(String.Format("{0},{1}", res, exp));
#line 23 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                        Message.Apply(String.Format("{0}", accurate));
                    }
                }
            }

#line 29 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
            Message.Apply(String.Format("Final Result is: {0}", accurate));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Message = this.Factory.Get<ICallable<String, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.Message));
            this.SquareAndMultiply = this.Factory.Get<ICallable<(Int64,Int64,Int64), Int64>>(typeof(SquareAndMultiply));
            this.MicrosoftQuantumMathModI = this.Factory.Get<ICallable<(Int64,Int64), Int64>>(typeof(Microsoft.Quantum.Math.ModI));
        }

        public override IApplyData __dataIn(QVoid data) => data;
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<TestingSquareMultiply, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs", OperationFunctor.Body, 34, 326)]
    public partial class SquareAndMultiply : Operation<(Int64,Int64,Int64), Int64>, ICallable
    {
        public SquareAndMultiply(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64,Int64)>, IApplyData
        {
            public In((Int64,Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "SquareAndMultiply";
        String ICallable.FullName => "Shor.Testing.SquareAndMultiply";
        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64), IQArray<Boolean>> MicrosoftQuantumConvertIntAsBoolArray
        {
            get;
            set;
        }

        protected ICallable Length
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        protected IAdjointable MicrosoftQuantumCanonApplyToEachA
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Qubit,IQArray<Qubit>)> SquareAndMultiplyIteration
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> AddI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> MicrosoftQuantumIntrinsicSWAP
        {
            get;
            set;
        }

        protected ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64> MicrosoftQuantumArithmeticMeasureInteger
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> ResetAll
        {
            get;
            set;
        }

        public override Func<(Int64,Int64,Int64), Int64> Body => (__in__) =>
        {
            var (ai,mi,ji) = __in__;
#line hidden
            {
#line 36 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                var (a,m,j,result) = (Allocate.Apply(4L), Allocate.Apply(4L), Allocate.Apply(8L), Allocate.Apply(4L));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 37 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    var ain = (IQArray<Boolean>)MicrosoftQuantumConvertIntAsBoolArray.Apply((ai, 4L));
#line 38 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    var min = (IQArray<Boolean>)MicrosoftQuantumConvertIntAsBoolArray.Apply((mi, 4L));
#line 39 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    var jin = (IQArray<Boolean>)MicrosoftQuantumConvertIntAsBoolArray.Apply((ji, 8L));
#line 40 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    foreach (var i in new QRange(0L, (ain.Length - 1L)))
#line hidden
                    {
#line 41 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                        if ((ain[i] == true))
                        {
#line 41 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                            MicrosoftQuantumIntrinsicX.Apply(a[i]);
                        }

#line 42 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                        if ((min[i] == true))
                        {
#line 42 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                            MicrosoftQuantumIntrinsicX.Apply(m[i]);
                        }
                    }

#line 44 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    foreach (var i in new QRange(0L, (jin.Length - 1L)))
#line hidden
                    {
#line 45 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                        if ((jin[i] == true))
                        {
#line 45 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                            MicrosoftQuantumIntrinsicX.Apply(j[i]);
                        }
                    }

#line 50 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    var len = (j.Length - 1L);
#line 51 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    var numAnc = 0L;
#line 52 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    var sum = 0L;
#line 53 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    var add = 1L;
#line 54 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    while (true)
                    {
#line 55 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                        sum = (sum + add);
#line 56 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                        add = (add + 1L);
#line 57 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                        numAnc = (numAnc + 1L);
                        if ((len <= sum))
                        {
                            break;
                        }
                        else
                        {
                        }
                    }

#line 59 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    var origNumAnc = numAnc;
#line 62 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    var lenA = a.Length;
#line hidden
                    {
#line 63 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                        var (v,c,z,az,ld) = (Allocate.Apply((lenA * numAnc)), Allocate.Apply(), Allocate.Apply(), Allocate.Apply(), Allocate.Apply());
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 65 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                            var curr = 0L;
#line 66 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                            var curReg = 0L;
#line 69 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                            MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j));
#line 70 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                            MicrosoftQuantumIntrinsicX.Controlled.Apply((j, az));
#line 71 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                            MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j));
#line 72 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                            MicrosoftQuantumIntrinsicX.Apply(az);
#line 74 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                            while (true)
                            {
#line 75 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                foreach (var i in new QRange(0L, (numAnc - 1L)))
#line hidden
                                {
#line 78 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                    if ((((i + curr) + 1L) <= (j.Length - 1L)))
                                    {
#line 80 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((i + curr) + 1L), (j.Length - 1L)))));
#line 81 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Controlled.Apply((j?.Slice(new QRange(((i + curr) + 1L), (j.Length - 1L))), z));
#line 82 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((i + curr) + 1L), (j.Length - 1L)))));
#line 83 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Apply(z);
#line 86 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((i + curr) + 2L), (j.Length - 1L)))));
#line 87 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 88 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Controlled.Apply((QArray<Qubit>.Add(QArray<Qubit>.Add(j?.Slice(new QRange(((i + curr) + 2L), (j.Length - 1L))), new QArray<Qubit>(j[0L])), new QArray<Qubit>(j[((i + curr) + 1L)])), ld));
#line 89 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 90 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((i + curr) + 2L), (j.Length - 1L)))));
#line 91 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Apply(ld);
#line 94 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(j[((i + curr) + 1L)]), c));
#line 98 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        SquareAndMultiplyIteration.Controlled.Apply((new QArray<Qubit>(az), (a, QArray<Qubit>.Add(a, v)?.Slice(new QRange(((i + curReg) * lenA), ((((i + curReg) * lenA) + lenA) - 1L))), m, c, z, ld, v?.Slice(new QRange(((i + curReg) * lenA), ((((i + curReg) * lenA) + lenA) - 1L))))));
#line 100 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Apply(az);
#line 101 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(az), v[((i + curReg) * lenA)]));
#line 102 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Apply(az);
#line 107 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(j[((i + curr) + 1L)]), c));
#line 110 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Apply(ld);
#line 111 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((i + curr) + 2L), (j.Length - 1L)))));
#line 112 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 113 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Controlled.Apply((QArray<Qubit>.Add(QArray<Qubit>.Add(j?.Slice(new QRange(((i + curr) + 2L), (j.Length - 1L))), new QArray<Qubit>(j[0L])), new QArray<Qubit>(j[((i + curr) + 1L)])), ld));
#line 114 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 115 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((i + curr) + 2L), (j.Length - 1L)))));
#line 120 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Apply(z);
#line 121 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((i + curr) + 1L), (j.Length - 1L)))));
#line 122 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Controlled.Apply((j?.Slice(new QRange(((i + curr) + 1L), (j.Length - 1L))), z));
#line 123 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((i + curr) + 1L), (j.Length - 1L)))));
                                    }

#line 125 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                    if ((((i + curr) + 1L) == (j.Length - 1L)))
                                    {
#line 126 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        AddI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(v?.Slice(new QRange(((i + curReg) * lenA), ((((i + curReg) * lenA) + lenA) - 1L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(result)));
                                    }
                                }

#line 130 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                var q = 0L;
#line 132 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                foreach (var k in new QRange(0L, (numAnc - 2L)))
#line hidden
                                {
#line 133 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                    q = ((numAnc - 2L) - k);
#line 134 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                    if ((((q + curr) + 1L) <= (j.Length - 1L)))
                                    {
#line 136 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 1L), (j.Length - 1L)))));
#line 137 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Controlled.Apply((j?.Slice(new QRange(((q + curr) + 1L), (j.Length - 1L))), z));
#line 138 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 1L), (j.Length - 1L)))));
#line 139 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Apply(z);
#line 142 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 2L), (j.Length - 1L)))));
#line 143 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 144 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Controlled.Apply((QArray<Qubit>.Add(QArray<Qubit>.Add(j?.Slice(new QRange(((q + curr) + 2L), (j.Length - 1L))), new QArray<Qubit>(j[0L])), new QArray<Qubit>(j[((q + curr) + 1L)])), ld));
#line 145 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 146 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 2L), (j.Length - 1L)))));
#line 147 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Apply(ld);
#line 150 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(j[((q + curr) + 1L)]), c));
#line 154 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        SquareAndMultiplyIteration.Adjoint.Controlled.Apply((new QArray<Qubit>(az), (a, QArray<Qubit>.Add(a, v)?.Slice(new QRange(((q + curReg) * lenA), ((((q + curReg) * lenA) + lenA) - 1L))), m, c, z, ld, v?.Slice(new QRange(((q + curReg) * lenA), ((((q + curReg) * lenA) + lenA) - 1L))))));
#line 156 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Apply(az);
#line 157 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(az), v[((q + curReg) * lenA)]));
#line 158 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Apply(az);
#line 161 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(j[((q + curr) + 1L)]), c));
#line 164 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Apply(ld);
#line 165 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 2L), (j.Length - 1L)))));
#line 166 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 167 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Controlled.Apply((QArray<Qubit>.Add(QArray<Qubit>.Add(j?.Slice(new QRange(((q + curr) + 2L), (j.Length - 1L))), new QArray<Qubit>(j[0L])), new QArray<Qubit>(j[((q + curr) + 1L)])), ld));
#line 168 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 169 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 2L), (j.Length - 1L)))));
#line 173 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Apply(z);
#line 174 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 1L), (j.Length - 1L)))));
#line 175 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Controlled.Apply((j?.Slice(new QRange(((q + curr) + 1L), (j.Length - 1L))), z));
#line 176 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 1L), (j.Length - 1L)))));
                                    }
                                }

#line 182 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                if ((curReg != (origNumAnc - 1L)))
                                {
#line 183 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                    foreach (var i in new QRange(0L, (lenA - 1L)))
#line hidden
                                    {
#line 184 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicSWAP.Apply((v[(i + (curReg * lenA))], v[(i + ((origNumAnc - 1L) * lenA))]));
                                    }
                                }

#line 188 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                curr = (curr + numAnc);
#line 189 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                curReg = (curReg + 1L);
#line 190 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                numAnc = (numAnc - 1L);
                                if ((numAnc == 0L))
                                {
                                    break;
                                }
                                else
                                {
                                }
                            }

#line 195 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                            while (true)
                            {
#line 196 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                numAnc = (numAnc + 1L);
#line 197 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                curReg = (curReg - 1L);
#line 198 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                curr = (curr - numAnc);
#line 200 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                if ((curReg != (origNumAnc - 1L)))
                                {
#line 201 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                    foreach (var i in new QRange(0L, (lenA - 1L)))
#line hidden
                                    {
#line 202 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicSWAP.Apply((v[(i + (curReg * lenA))], v[(i + ((origNumAnc - 1L) * lenA))]));
                                    }
                                }

#line 205 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                foreach (var q in new QRange(0L, (numAnc - 2L)))
#line hidden
                                {
#line 206 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                    if ((((q + curr) + 1L) <= (j.Length - 1L)))
                                    {
#line 208 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 1L), (j.Length - 1L)))));
#line 209 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Controlled.Apply((j?.Slice(new QRange(((q + curr) + 1L), (j.Length - 1L))), z));
#line 210 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 1L), (j.Length - 1L)))));
#line 211 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Apply(z);
#line 214 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 2L), (j.Length - 1L)))));
#line 215 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 216 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Controlled.Apply((QArray<Qubit>.Add(QArray<Qubit>.Add(j?.Slice(new QRange(((q + curr) + 2L), (j.Length - 1L))), new QArray<Qubit>(j[0L])), new QArray<Qubit>(j[((q + curr) + 1L)])), ld));
#line 217 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 218 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 2L), (j.Length - 1L)))));
#line 219 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Apply(ld);
#line 222 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(j[((q + curr) + 1L)]), c));
#line 226 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        SquareAndMultiplyIteration.Controlled.Apply((new QArray<Qubit>(az), (a, QArray<Qubit>.Add(a, v)?.Slice(new QRange(((q + curReg) * lenA), ((((q + curReg) * lenA) + lenA) - 1L))), m, c, z, ld, v?.Slice(new QRange(((q + curReg) * lenA), ((((q + curReg) * lenA) + lenA) - 1L))))));
#line 228 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Apply(az);
#line 229 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(az), v[((q + curReg) * lenA)]));
#line 230 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Apply(az);
#line 234 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(j[((q + curr) + 1L)]), c));
#line 237 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Apply(ld);
#line 238 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 2L), (j.Length - 1L)))));
#line 239 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 240 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Controlled.Apply((QArray<Qubit>.Add(QArray<Qubit>.Add(j?.Slice(new QRange(((q + curr) + 2L), (j.Length - 1L))), new QArray<Qubit>(j[0L])), new QArray<Qubit>(j[((q + curr) + 1L)])), ld));
#line 241 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 242 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 2L), (j.Length - 1L)))));
#line 246 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Apply(z);
#line 247 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 1L), (j.Length - 1L)))));
#line 248 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Controlled.Apply((j?.Slice(new QRange(((q + curr) + 1L), (j.Length - 1L))), z));
#line 249 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((q + curr) + 1L), (j.Length - 1L)))));
                                    }
                                }

#line 254 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                var g = 0L;
#line 255 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                foreach (var k in new QRange(0L, (numAnc - 1L)))
#line hidden
                                {
#line 256 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                    g = ((numAnc - 1L) - k);
#line 258 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                    if ((((g + curr) + 1L) <= (j.Length - 1L)))
                                    {
#line 260 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((g + curr) + 1L), (j.Length - 1L)))));
#line 261 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Controlled.Apply((j?.Slice(new QRange(((g + curr) + 1L), (j.Length - 1L))), z));
#line 262 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((g + curr) + 1L), (j.Length - 1L)))));
#line 263 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Apply(z);
#line 266 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((g + curr) + 2L), (j.Length - 1L)))));
#line 267 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 268 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Controlled.Apply((QArray<Qubit>.Add(QArray<Qubit>.Add(j?.Slice(new QRange(((g + curr) + 2L), (j.Length - 1L))), new QArray<Qubit>(j[0L])), new QArray<Qubit>(j[((g + curr) + 1L)])), ld));
#line 269 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 270 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((g + curr) + 2L), (j.Length - 1L)))));
#line 271 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Apply(ld);
#line 274 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(j[((g + curr) + 1L)]), c));
#line 278 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        SquareAndMultiplyIteration.Adjoint.Controlled.Apply((new QArray<Qubit>(az), (a, QArray<Qubit>.Add(a, v)?.Slice(new QRange(((g + curReg) * lenA), ((((g + curReg) * lenA) + lenA) - 1L))), m, c, z, ld, v?.Slice(new QRange(((g + curReg) * lenA), ((((g + curReg) * lenA) + lenA) - 1L))))));
#line 281 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Apply(az);
#line 282 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(az), v[((g + curReg) * lenA)]));
#line 283 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Apply(az);
#line 288 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(j[((g + curr) + 1L)]), c));
#line 291 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Apply(ld);
#line 292 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((g + curr) + 2L), (j.Length - 1L)))));
#line 293 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 294 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Controlled.Apply((QArray<Qubit>.Add(QArray<Qubit>.Add(j?.Slice(new QRange(((g + curr) + 2L), (j.Length - 1L))), new QArray<Qubit>(j[0L])), new QArray<Qubit>(j[((g + curr) + 1L)])), ld));
#line 295 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Apply(j[0L]);
#line 296 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((g + curr) + 2L), (j.Length - 1L)))));
#line 301 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Apply(z);
#line 302 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((g + curr) + 1L), (j.Length - 1L)))));
#line 303 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumIntrinsicX.Controlled.Apply((j?.Slice(new QRange(((g + curr) + 1L), (j.Length - 1L))), z));
#line 304 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                                        MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j?.Slice(new QRange(((g + curr) + 1L), (j.Length - 1L)))));
                                    }
                                }

                                if ((numAnc == origNumAnc))
                                {
                                    break;
                                }
                                else
                                {
                                }
                            }

#line 314 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                            MicrosoftQuantumIntrinsicX.Apply(az);
#line 315 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                            MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j));
#line 316 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                            MicrosoftQuantumIntrinsicX.Controlled.Apply((j, az));
#line 317 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                            MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, j));
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release.Apply(v);
#line hidden
                                Release.Apply(c);
#line hidden
                                Release.Apply(z);
#line hidden
                                Release.Apply(az);
#line hidden
                                Release.Apply(ld);
                            }
                        }
                    }

#line 321 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    var res = MicrosoftQuantumArithmeticMeasureInteger.Apply(new Microsoft.Quantum.Arithmetic.LittleEndian(result));
#line 322 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    ResetAll.Apply(QArray<Qubit>.Add(QArray<Qubit>.Add(QArray<Qubit>.Add(a, m), j), result));
#line 323 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    return res;
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(a);
#line hidden
                        Release.Apply(m);
#line hidden
                        Release.Apply(j);
#line hidden
                        Release.Apply(result);
                    }
                }
            }
        }

        ;
        public override void Init()
        {
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MicrosoftQuantumConvertIntAsBoolArray = this.Factory.Get<ICallable<(Int64,Int64), IQArray<Boolean>>>(typeof(Microsoft.Quantum.Convert.IntAsBoolArray));
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
            this.MicrosoftQuantumCanonApplyToEachA = this.Factory.Get<IAdjointable>(typeof(Microsoft.Quantum.Canon.ApplyToEachA<>));
            this.SquareAndMultiplyIteration = this.Factory.Get<IUnitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Qubit,IQArray<Qubit>)>>(typeof(SquareAndMultiplyIteration));
            this.AddI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(AddI));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
            this.MicrosoftQuantumIntrinsicSWAP = this.Factory.Get<IUnitary<(Qubit,Qubit)>>(typeof(Microsoft.Quantum.Intrinsic.SWAP));
            this.MicrosoftQuantumArithmeticMeasureInteger = this.Factory.Get<ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64>>(typeof(Microsoft.Quantum.Arithmetic.MeasureInteger));
            this.ResetAll = this.Factory.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.ResetAll));
        }

        public override IApplyData __dataIn((Int64,Int64,Int64) data) => new In(data);
        public override IApplyData __dataOut(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__, Int64 ai, Int64 mi, Int64 ji)
        {
            return __m__.Run<SquareAndMultiply, (Int64,Int64,Int64), Int64>((ai, mi, ji));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs", OperationFunctor.Body, 326, 344)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs", OperationFunctor.Adjoint, 326, 344)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs", OperationFunctor.Controlled, 326, 344)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs", OperationFunctor.ControlledAdjoint, 326, 344)]
    public partial class SquareAndMultiplyIteration : Unitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Qubit,IQArray<Qubit>)>, ICallable
    {
        public SquareAndMultiplyIteration(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Qubit,IQArray<Qubit>)>, IApplyData
        {
            public In((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Qubit,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3)?.Qubits, ((IApplyData)Data.Item4)?.Qubits, ((IApplyData)Data.Item5)?.Qubits, ((IApplyData)Data.Item6)?.Qubits, ((IApplyData)Data.Item7)?.Qubits);
                }
            }
        }

        String ICallable.Name => "SquareAndMultiplyIteration";
        String ICallable.FullName => "Shor.Testing.SquareAndMultiplyIteration";
        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> AddI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected ICallable Length
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)> SquareModM
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)> MultiplyModM
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Qubit,IQArray<Qubit>), QVoid> Body => (__in__) =>
        {
            var (a,v,m,c,z,ld,t) = __in__;
#line 327 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
            MicrosoftQuantumIntrinsicX.Apply(z);
#line 328 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
            AddI.Controlled.Apply((new QArray<Qubit>(z), (new Microsoft.Quantum.Arithmetic.LittleEndian(v), new Microsoft.Quantum.Arithmetic.LittleEndian(t))));
#line 329 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
            MicrosoftQuantumIntrinsicX.Apply(z);
#line hidden
            {
#line 330 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                var anc = Allocate.Apply(v.Length);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 331 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    SquareModM.Controlled.Apply((new QArray<Qubit>(z), (v, m, anc)));
#line 332 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    MultiplyModM.Controlled.Apply((new QArray<Qubit>(z, c, ld), (a, anc, m, t)));
#line 333 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(c);
#line 334 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    AddI.Controlled.Apply((new QArray<Qubit>(z, c), (new Microsoft.Quantum.Arithmetic.LittleEndian(anc), new Microsoft.Quantum.Arithmetic.LittleEndian(t))));
#line 335 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(c);
#line 336 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(ld);
#line 337 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    AddI.Controlled.Apply((new QArray<Qubit>(ld), (new Microsoft.Quantum.Arithmetic.LittleEndian(anc), new Microsoft.Quantum.Arithmetic.LittleEndian(t))));
#line 338 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(ld);
#line 340 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    SquareModM.Adjoint.Controlled.Apply((new QArray<Qubit>(z), (v, m, anc)));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(anc);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Qubit,IQArray<Qubit>), QVoid> AdjointBody => (__in__) =>
        {
            var (a,v,m,c,z,ld,t) = __in__;
#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
            {
#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                var __qsVar0__anc__ = Allocate.Apply(v.Length);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    SquareModM.Adjoint.Controlled.Adjoint.Apply((new QArray<Qubit>(z), (v, m, __qsVar0__anc__)));
#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    MicrosoftQuantumIntrinsicX.Adjoint.Apply(ld);
#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    AddI.Controlled.Adjoint.Apply((new QArray<Qubit>(ld), (new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar0__anc__), new Microsoft.Quantum.Arithmetic.LittleEndian(t))));
#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    MicrosoftQuantumIntrinsicX.Adjoint.Apply(ld);
#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    MicrosoftQuantumIntrinsicX.Adjoint.Apply(c);
#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    AddI.Controlled.Adjoint.Apply((new QArray<Qubit>(z, c), (new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar0__anc__), new Microsoft.Quantum.Arithmetic.LittleEndian(t))));
#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    MicrosoftQuantumIntrinsicX.Adjoint.Apply(c);
#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    MultiplyModM.Controlled.Adjoint.Apply((new QArray<Qubit>(z, c, ld), (a, __qsVar0__anc__, m, t)));
#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    SquareModM.Controlled.Adjoint.Apply((new QArray<Qubit>(z), (v, m, __qsVar0__anc__)));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(__qsVar0__anc__);
                    }
                }
            }

#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
            MicrosoftQuantumIntrinsicX.Adjoint.Apply(z);
#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
            AddI.Controlled.Adjoint.Apply((new QArray<Qubit>(z), (new Microsoft.Quantum.Arithmetic.LittleEndian(v), new Microsoft.Quantum.Arithmetic.LittleEndian(t))));
#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
            MicrosoftQuantumIntrinsicX.Adjoint.Apply(z);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Qubit,IQArray<Qubit>)), QVoid> ControlledBody => (__in__) =>
        {
            var (__controlQubits__,(a,v,m,c,z,ld,t)) = __in__;
#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
            MicrosoftQuantumIntrinsicX.Controlled.Apply((__controlQubits__, z));
#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
            AddI.Controlled.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(z), (new Microsoft.Quantum.Arithmetic.LittleEndian(v), new Microsoft.Quantum.Arithmetic.LittleEndian(t)))));
#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
            MicrosoftQuantumIntrinsicX.Controlled.Apply((__controlQubits__, z));
#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
            {
#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                var anc = Allocate.Apply(v.Length);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    SquareModM.Controlled.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(z), (v, m, anc))));
#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    MultiplyModM.Controlled.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(z, c, ld), (a, anc, m, t))));
#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    MicrosoftQuantumIntrinsicX.Controlled.Apply((__controlQubits__, c));
#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    AddI.Controlled.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(z, c), (new Microsoft.Quantum.Arithmetic.LittleEndian(anc), new Microsoft.Quantum.Arithmetic.LittleEndian(t)))));
#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    MicrosoftQuantumIntrinsicX.Controlled.Apply((__controlQubits__, c));
#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    MicrosoftQuantumIntrinsicX.Controlled.Apply((__controlQubits__, ld));
#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    AddI.Controlled.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(ld), (new Microsoft.Quantum.Arithmetic.LittleEndian(anc), new Microsoft.Quantum.Arithmetic.LittleEndian(t)))));
#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    MicrosoftQuantumIntrinsicX.Controlled.Apply((__controlQubits__, ld));
#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    SquareModM.Adjoint.Controlled.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(z), (v, m, anc))));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(anc);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Qubit,IQArray<Qubit>)), QVoid> ControlledAdjointBody => (__in__) =>
        {
            var (__controlQubits__,(a,v,m,c,z,ld,t)) = __in__;
#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
            {
#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                var __qsVar0__anc__ = Allocate.Apply(v.Length);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    SquareModM.Adjoint.Controlled.Adjoint.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(z), (v, m, __qsVar0__anc__))));
#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    MicrosoftQuantumIntrinsicX.Adjoint.Controlled.Apply((__controlQubits__, ld));
#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    AddI.Controlled.Adjoint.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(ld), (new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar0__anc__), new Microsoft.Quantum.Arithmetic.LittleEndian(t)))));
#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    MicrosoftQuantumIntrinsicX.Adjoint.Controlled.Apply((__controlQubits__, ld));
#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    MicrosoftQuantumIntrinsicX.Adjoint.Controlled.Apply((__controlQubits__, c));
#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    AddI.Controlled.Adjoint.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(z, c), (new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar0__anc__), new Microsoft.Quantum.Arithmetic.LittleEndian(t)))));
#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    MicrosoftQuantumIntrinsicX.Adjoint.Controlled.Apply((__controlQubits__, c));
#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    MultiplyModM.Controlled.Adjoint.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(z, c, ld), (a, __qsVar0__anc__, m, t))));
#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    SquareModM.Controlled.Adjoint.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(z), (v, m, __qsVar0__anc__))));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(__qsVar0__anc__);
                    }
                }
            }

#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
            MicrosoftQuantumIntrinsicX.Adjoint.Controlled.Apply((__controlQubits__, z));
#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
            AddI.Controlled.Adjoint.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(z), (new Microsoft.Quantum.Arithmetic.LittleEndian(v), new Microsoft.Quantum.Arithmetic.LittleEndian(t)))));
#line 326 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
            MicrosoftQuantumIntrinsicX.Adjoint.Controlled.Apply((__controlQubits__, z));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
            this.AddI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(AddI));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.SquareModM = this.Factory.Get<IUnitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)>>(typeof(SquareModM));
            this.MultiplyModM = this.Factory.Get<IUnitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)>>(typeof(MultiplyModM));
        }

        public override IApplyData __dataIn((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Qubit,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> a, IQArray<Qubit> v, IQArray<Qubit> m, Qubit c, Qubit z, Qubit ld, IQArray<Qubit> t)
        {
            return __m__.Run<SquareAndMultiplyIteration, (IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Qubit,IQArray<Qubit>), QVoid>((a, v, m, c, z, ld, t));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs", OperationFunctor.Body, 344, 357)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs", OperationFunctor.Adjoint, 344, 357)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs", OperationFunctor.Controlled, 344, 357)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs", OperationFunctor.ControlledAdjoint, 344, 357)]
    public partial class SquareModM : Unitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)>, ICallable
    {
        public SquareModM(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)>, IApplyData
        {
            public In((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3)?.Qubits);
                }
            }
        }

        String ICallable.Name => "SquareModM";
        String ICallable.FullName => "Shor.Testing.SquareModM";
        protected ICallable Length
        {
            get;
            set;
        }

        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> SquareI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> DivideI
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> AddI
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid> Body => (__in__) =>
        {
            var (a,Ms,Ts) = __in__;
#line 345 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
            var num = a.Length;
#line hidden
            {
#line 346 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                var (aS,aSPad) = (Allocate.Apply(num), Allocate.Apply(num));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 347 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    SquareI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(a), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aS, aSPad))));
#line hidden
                    {
#line 348 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                        var (anc,MsPad) = (Allocate.Apply((num * 2L)), Allocate.Apply(num));
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 349 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                            DivideI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aS, aSPad)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(Ms, MsPad)), new Microsoft.Quantum.Arithmetic.LittleEndian(anc)));
#line 350 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                            AddI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(aS), new Microsoft.Quantum.Arithmetic.LittleEndian(Ts)));
#line 351 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                            DivideI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aS, aSPad)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(Ms, MsPad)), new Microsoft.Quantum.Arithmetic.LittleEndian(anc)));
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release.Apply(anc);
#line hidden
                                Release.Apply(MsPad);
                            }
                        }
                    }

#line 353 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    SquareI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(a), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aS, aSPad))));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(aS);
#line hidden
                        Release.Apply(aSPad);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid> AdjointBody => (__in__) =>
        {
            var (a,Ms,Ts) = __in__;
#line 344 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
            var __qsVar0__num__ = a.Length;
#line 344 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
            {
#line 344 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                var (__qsVar1__aS__,__qsVar2__aSPad__) = (Allocate.Apply(__qsVar0__num__), Allocate.Apply(__qsVar0__num__));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 344 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    SquareI.Adjoint.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(a), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(__qsVar1__aS__, __qsVar2__aSPad__))));
#line 344 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    {
#line 344 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                        var (__qsVar3__anc__,__qsVar4__MsPad__) = (Allocate.Apply((__qsVar0__num__ * 2L)), Allocate.Apply(__qsVar0__num__));
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 344 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                            DivideI.Adjoint.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(__qsVar1__aS__, __qsVar2__aSPad__)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(Ms, __qsVar4__MsPad__)), new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar3__anc__)));
#line 344 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                            AddI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar1__aS__), new Microsoft.Quantum.Arithmetic.LittleEndian(Ts)));
#line 344 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                            DivideI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(__qsVar1__aS__, __qsVar2__aSPad__)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(Ms, __qsVar4__MsPad__)), new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar3__anc__)));
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release.Apply(__qsVar3__anc__);
#line hidden
                                Release.Apply(__qsVar4__MsPad__);
                            }
                        }
                    }

#line 344 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    SquareI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(a), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(__qsVar1__aS__, __qsVar2__aSPad__))));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(__qsVar1__aS__);
#line hidden
                        Release.Apply(__qsVar2__aSPad__);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)), QVoid> ControlledBody => (__in__) =>
        {
            var (__controlQubits__,(a,Ms,Ts)) = __in__;
#line 344 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
            var num = a.Length;
#line 344 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
            {
#line 344 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                var (aS,aSPad) = (Allocate.Apply(num), Allocate.Apply(num));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 344 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    SquareI.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(a), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aS, aSPad)))));
#line 344 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    {
#line 344 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                        var (anc,MsPad) = (Allocate.Apply((num * 2L)), Allocate.Apply(num));
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 344 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                            DivideI.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aS, aSPad)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(Ms, MsPad)), new Microsoft.Quantum.Arithmetic.LittleEndian(anc))));
#line 344 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                            AddI.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(aS), new Microsoft.Quantum.Arithmetic.LittleEndian(Ts))));
#line 344 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                            DivideI.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aS, aSPad)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(Ms, MsPad)), new Microsoft.Quantum.Arithmetic.LittleEndian(anc))));
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release.Apply(anc);
#line hidden
                                Release.Apply(MsPad);
                            }
                        }
                    }

#line 344 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    SquareI.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(a), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aS, aSPad)))));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(aS);
#line hidden
                        Release.Apply(aSPad);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)), QVoid> ControlledAdjointBody => (__in__) =>
        {
            var (__controlQubits__,(a,Ms,Ts)) = __in__;
#line 344 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
            var __qsVar0__num__ = a.Length;
#line 344 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
            {
#line 344 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                var (__qsVar1__aS__,__qsVar2__aSPad__) = (Allocate.Apply(__qsVar0__num__), Allocate.Apply(__qsVar0__num__));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 344 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    SquareI.Adjoint.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(a), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(__qsVar1__aS__, __qsVar2__aSPad__)))));
#line 344 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    {
#line 344 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                        var (__qsVar3__anc__,__qsVar4__MsPad__) = (Allocate.Apply((__qsVar0__num__ * 2L)), Allocate.Apply(__qsVar0__num__));
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 344 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                            DivideI.Adjoint.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(__qsVar1__aS__, __qsVar2__aSPad__)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(Ms, __qsVar4__MsPad__)), new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar3__anc__))));
#line 344 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                            AddI.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar1__aS__), new Microsoft.Quantum.Arithmetic.LittleEndian(Ts))));
#line 344 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                            DivideI.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(__qsVar1__aS__, __qsVar2__aSPad__)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(Ms, __qsVar4__MsPad__)), new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar3__anc__))));
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release.Apply(__qsVar3__anc__);
#line hidden
                                Release.Apply(__qsVar4__MsPad__);
                            }
                        }
                    }

#line 344 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    SquareI.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(a), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(__qsVar1__aS__, __qsVar2__aSPad__)))));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(__qsVar1__aS__);
#line hidden
                        Release.Apply(__qsVar2__aSPad__);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.SquareI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(SquareI));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
            this.DivideI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(DivideI));
            this.AddI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(AddI));
        }

        public override IApplyData __dataIn((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> a, IQArray<Qubit> Ms, IQArray<Qubit> Ts)
        {
            return __m__.Run<SquareModM, (IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid>((a, Ms, Ts));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs", OperationFunctor.Body, 357, -1)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs", OperationFunctor.Adjoint, 357, -1)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs", OperationFunctor.Controlled, 357, -1)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs", OperationFunctor.ControlledAdjoint, 357, -1)]
    public partial class MultiplyModM : Unitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)>, ICallable
    {
        public MultiplyModM(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)>, IApplyData
        {
            public In((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3)?.Qubits, ((IApplyData)Data.Item4)?.Qubits);
                }
            }
        }

        String ICallable.Name => "MultiplyModM";
        String ICallable.FullName => "Shor.Testing.MultiplyModM";
        protected ICallable Length
        {
            get;
            set;
        }

        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> MultiplyI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> DivideI
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> AddI
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid> Body => (__in__) =>
        {
            var (a,b,Ms,Ts) = __in__;
#line 358 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
            var num = a.Length;
#line hidden
            {
#line 359 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                var (aS,aSPad) = (Allocate.Apply(num), Allocate.Apply(num));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 360 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    MultiplyI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(a), new Microsoft.Quantum.Arithmetic.LittleEndian(b), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aS, aSPad))));
#line hidden
                    {
#line 361 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                        var (anc,MsPad) = (Allocate.Apply((num * 2L)), Allocate.Apply(num));
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 362 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                            DivideI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aS, aSPad)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(Ms, MsPad)), new Microsoft.Quantum.Arithmetic.LittleEndian(anc)));
#line 363 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                            AddI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(aS), new Microsoft.Quantum.Arithmetic.LittleEndian(Ts)));
#line 364 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                            DivideI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aS, aSPad)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(Ms, MsPad)), new Microsoft.Quantum.Arithmetic.LittleEndian(anc)));
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release.Apply(anc);
#line hidden
                                Release.Apply(MsPad);
                            }
                        }
                    }

#line 366 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    MultiplyI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(a), new Microsoft.Quantum.Arithmetic.LittleEndian(b), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aS, aSPad))));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(aS);
#line hidden
                        Release.Apply(aSPad);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid> AdjointBody => (__in__) =>
        {
            var (a,b,Ms,Ts) = __in__;
#line 357 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
            var __qsVar0__num__ = a.Length;
#line 357 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
            {
#line 357 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                var (__qsVar1__aS__,__qsVar2__aSPad__) = (Allocate.Apply(__qsVar0__num__), Allocate.Apply(__qsVar0__num__));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 357 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    MultiplyI.Adjoint.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(a), new Microsoft.Quantum.Arithmetic.LittleEndian(b), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(__qsVar1__aS__, __qsVar2__aSPad__))));
#line 357 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    {
#line 357 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                        var (__qsVar3__anc__,__qsVar4__MsPad__) = (Allocate.Apply((__qsVar0__num__ * 2L)), Allocate.Apply(__qsVar0__num__));
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 357 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                            DivideI.Adjoint.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(__qsVar1__aS__, __qsVar2__aSPad__)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(Ms, __qsVar4__MsPad__)), new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar3__anc__)));
#line 357 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                            AddI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar1__aS__), new Microsoft.Quantum.Arithmetic.LittleEndian(Ts)));
#line 357 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                            DivideI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(__qsVar1__aS__, __qsVar2__aSPad__)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(Ms, __qsVar4__MsPad__)), new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar3__anc__)));
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release.Apply(__qsVar3__anc__);
#line hidden
                                Release.Apply(__qsVar4__MsPad__);
                            }
                        }
                    }

#line 357 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    MultiplyI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(a), new Microsoft.Quantum.Arithmetic.LittleEndian(b), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(__qsVar1__aS__, __qsVar2__aSPad__))));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(__qsVar1__aS__);
#line hidden
                        Release.Apply(__qsVar2__aSPad__);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)), QVoid> ControlledBody => (__in__) =>
        {
            var (__controlQubits__,(a,b,Ms,Ts)) = __in__;
#line 357 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
            var num = a.Length;
#line 357 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
            {
#line 357 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                var (aS,aSPad) = (Allocate.Apply(num), Allocate.Apply(num));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 357 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    MultiplyI.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(a), new Microsoft.Quantum.Arithmetic.LittleEndian(b), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aS, aSPad)))));
#line 357 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    {
#line 357 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                        var (anc,MsPad) = (Allocate.Apply((num * 2L)), Allocate.Apply(num));
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 357 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                            DivideI.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aS, aSPad)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(Ms, MsPad)), new Microsoft.Quantum.Arithmetic.LittleEndian(anc))));
#line 357 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                            AddI.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(aS), new Microsoft.Quantum.Arithmetic.LittleEndian(Ts))));
#line 357 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                            DivideI.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aS, aSPad)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(Ms, MsPad)), new Microsoft.Quantum.Arithmetic.LittleEndian(anc))));
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release.Apply(anc);
#line hidden
                                Release.Apply(MsPad);
                            }
                        }
                    }

#line 357 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    MultiplyI.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(a), new Microsoft.Quantum.Arithmetic.LittleEndian(b), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aS, aSPad)))));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(aS);
#line hidden
                        Release.Apply(aSPad);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)), QVoid> ControlledAdjointBody => (__in__) =>
        {
            var (__controlQubits__,(a,b,Ms,Ts)) = __in__;
#line 357 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
            var __qsVar0__num__ = a.Length;
#line 357 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
            {
#line 357 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                var (__qsVar1__aS__,__qsVar2__aSPad__) = (Allocate.Apply(__qsVar0__num__), Allocate.Apply(__qsVar0__num__));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 357 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    MultiplyI.Adjoint.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(a), new Microsoft.Quantum.Arithmetic.LittleEndian(b), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(__qsVar1__aS__, __qsVar2__aSPad__)))));
#line 357 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    {
#line 357 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                        var (__qsVar3__anc__,__qsVar4__MsPad__) = (Allocate.Apply((__qsVar0__num__ * 2L)), Allocate.Apply(__qsVar0__num__));
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 357 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                            DivideI.Adjoint.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(__qsVar1__aS__, __qsVar2__aSPad__)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(Ms, __qsVar4__MsPad__)), new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar3__anc__))));
#line 357 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                            AddI.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar1__aS__), new Microsoft.Quantum.Arithmetic.LittleEndian(Ts))));
#line 357 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                            DivideI.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(__qsVar1__aS__, __qsVar2__aSPad__)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(Ms, __qsVar4__MsPad__)), new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar3__anc__))));
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release.Apply(__qsVar3__anc__);
#line hidden
                                Release.Apply(__qsVar4__MsPad__);
                            }
                        }
                    }

#line 357 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Testing/Sqaure and Multiply Testing/Program.qs"
                    MultiplyI.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(a), new Microsoft.Quantum.Arithmetic.LittleEndian(b), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(__qsVar1__aS__, __qsVar2__aSPad__)))));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(__qsVar1__aS__);
#line hidden
                        Release.Apply(__qsVar2__aSPad__);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MultiplyI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(MultiplyI));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
            this.DivideI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(DivideI));
            this.AddI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(AddI));
        }

        public override IApplyData __dataIn((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> a, IQArray<Qubit> b, IQArray<Qubit> Ms, IQArray<Qubit> Ts)
        {
            return __m__.Run<MultiplyModM, (IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid>((a, b, Ms, Ts));
        }
    }
}