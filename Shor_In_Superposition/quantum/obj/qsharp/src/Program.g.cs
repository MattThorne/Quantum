//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Shor\",\"Name\":\"Mk1\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":11,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":14}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"Mk1\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":11,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":14}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Shor\",\"Name\":\"Test_Operation\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":36,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":25}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"number\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":27},\"Item2\":{\"Line\":1,\"Column\":33}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"isOdd\"]},\"Type\":{\"Case\":\"Bool\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":41},\"Item2\":{\"Line\":1,\"Column\":46}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Bool\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"Test_Operation\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":36,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":25}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Shor\",\"Name\":\"EvenOddNumbersSuperposition\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":64,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":38}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"isOdd\"]},\"Type\":{\"Case\":\"Bool\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":40},\"Item2\":{\"Line\":1,\"Column\":45}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"qs\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":54},\"Item2\":{\"Line\":1,\"Column\":56}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Bool\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"EvenOddNumbersSuperposition\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":64,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":38}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Shor\",\"Name\":\"Set\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":82,\"Item2\":2},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":14}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"desired\"]},\"Type\":{\"Case\":\"Result\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":15},\"Item2\":{\"Line\":1,\"Column\":22}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"q1\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":33},\"Item2\":{\"Line\":1,\"Column\":35}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Result\"},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"Set\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":82,\"Item2\":2},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":14}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Shor\",\"Name\":\"TestBellState\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":88,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"count\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":25},\"Item2\":{\"Line\":1,\"Column\":30}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"initial\"]},\"Type\":{\"Case\":\"Result\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":38},\"Item2\":{\"Line\":1,\"Column\":45}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Result\"}]]},\"ReturnType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"TestBellState\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":88,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Shor\",\"Name\":\"DivideI\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":142,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"xs\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":24},\"Item2\":{\"Line\":1,\"Column\":36}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":20},\"Item2\":{\"Line\":1,\"Column\":22}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"ys\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":42},\"Item2\":{\"Line\":1,\"Column\":54}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":38},\"Item2\":{\"Line\":1,\"Column\":40}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"result\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":2,\"Column\":40},\"Item2\":{\"Line\":2,\"Column\":52}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":32},\"Item2\":{\"Line\":2,\"Column\":38}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" Divides two quantum integers.\",\"\",\" # Description\",\" `xs` will hold the\",\" remainder `xs - floor(xs/ys) * ys` and `result` will hold\",\" `floor(xs/ys)`.\",\"\",\" # Input\",\" ## xs\",\" $n$-bit dividend, will be replaced by the remainder.\",\" ## ys\",\" $n$-bit divisor\",\" ## result\",\" $n$-bit result, must be in state $\\\\ket{0}$ initially\",\" and will be replaced by the result of the integer division.\",\"\",\" # Remarks\",\" Uses a standard shift-and-subtract approach to implement the division.\",\" The controlled version is specialized such the subtraction does not\",\" require additional controls.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"DivideI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":144,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":5}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"DivideI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":167,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":8}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"DivideI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":147,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":11}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"DivideI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":168,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":19}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Shor\",\"Name\":\"AddI\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":182,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":15}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"xs\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":21},\"Item2\":{\"Line\":1,\"Column\":33}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":17},\"Item2\":{\"Line\":1,\"Column\":19}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"ys\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":39},\"Item2\":{\"Line\":1,\"Column\":51}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":35},\"Item2\":{\"Line\":1,\"Column\":37}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" Automatically chooses between addition with\",\" carry and without, depending on the register size of `ys`.\",\"\",\" # Input\",\" ## xs\",\" $n$-bit addend.\",\" ## ys\",\" Addend with at least $n$ qubits. Will hold the result.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"AddI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":182,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":15}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"AddI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":182,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":63},\"Item2\":{\"Line\":1,\"Column\":72}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Shor.AddI\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"AddI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":182,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":63},\"Item2\":{\"Line\":1,\"Column\":72}},\"Documentation\":[\"automatically generated QsControlled specialization for Shor.AddI\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"AddI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":182,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":63},\"Item2\":{\"Line\":1,\"Column\":72}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for Shor.AddI\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Shor\",\"Name\":\"CompareGTI\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":207,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":21}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"xs\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":27},\"Item2\":{\"Line\":1,\"Column\":39}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":23},\"Item2\":{\"Line\":1,\"Column\":25}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"ys\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":45},\"Item2\":{\"Line\":1,\"Column\":57}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":41},\"Item2\":{\"Line\":1,\"Column\":43}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"result\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":29},\"Item2\":{\"Line\":2,\"Column\":35}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" Wrapper for integer comparison: `result = x > y`.\",\"\",\" # Input\",\" ## xs\",\" First $n$-bit number\",\" ## ys\",\" Second $n$-bit number\",\" ## result\",\" Will be flipped if $x > y$\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"CompareGTI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":207,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":21}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"CompareGTI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":207,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":2,\"Column\":54},\"Item2\":{\"Line\":2,\"Column\":63}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Shor.CompareGTI\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"CompareGTI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":207,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":2,\"Column\":54},\"Item2\":{\"Line\":2,\"Column\":63}},\"Documentation\":[\"automatically generated QsControlled specialization for Shor.CompareGTI\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"CompareGTI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":207,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":2,\"Column\":54},\"Item2\":{\"Line\":2,\"Column\":63}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for Shor.CompareGTI\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Shor\",\"Name\":\"MultiplyI\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":229,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"xs\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":26},\"Item2\":{\"Line\":1,\"Column\":38}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":22},\"Item2\":{\"Line\":1,\"Column\":24}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"ys\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":44},\"Item2\":{\"Line\":1,\"Column\":56}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":40},\"Item2\":{\"Line\":1,\"Column\":42}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"result\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":2,\"Column\":34},\"Item2\":{\"Line\":2,\"Column\":46}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":26},\"Item2\":{\"Line\":2,\"Column\":32}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" Multiply integer `xs` by integer `ys` and store the result in `result`,\",\" which must be zero initially.\",\"\",\" # Input\",\" ## xs\",\" $n$-bit multiplicand (LittleEndian)\",\" ## ys\",\" $n$-bit multiplier (LittleEndian)\",\" ## result\",\" $2n$-bit result (LittleEndian), must be in state $\\\\ket{0}$ initially.\",\"\",\" # Remarks\",\" Uses a standard shift-and-add approach to implement the multiplication.\",\" The controlled version was improved by copying out $x_i$ to an ancilla\",\" qubit conditioned on the control qubits, and then controlling the\",\" addition on the ancilla qubit.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"MultiplyI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":231,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":5}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"MultiplyI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":261,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":8}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"MultiplyI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":244,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":11}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"MultiplyI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":262,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":19}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Shor\",\"Name\":\"ArbitraryAdderInPlace_Reference\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":266,\"Item2\":5},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":42}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"a\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":44},\"Item2\":{\"Line\":1,\"Column\":45}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"b\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":57},\"Item2\":{\"Line\":1,\"Column\":58}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"carry\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":70},\"Item2\":{\"Line\":1,\"Column\":75}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"ArbitraryAdderInPlace_Reference\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":266,\"Item2\":5},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":42}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"ArbitraryAdderInPlace_Reference\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":266,\"Item2\":5},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":95},\"Item2\":{\"Line\":1,\"Column\":98}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Shor.ArbitraryAdderInPlace_Reference\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Shor\",\"Name\":\"LowestBitCarry_Reference\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":289,\"Item2\":5},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":35}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"a\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":37},\"Item2\":{\"Line\":1,\"Column\":38}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"b\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":48},\"Item2\":{\"Line\":1,\"Column\":49}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"carry\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":59},\"Item2\":{\"Line\":1,\"Column\":64}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Qubit\"},{\"Case\":\"Qubit\"},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"LowestBitCarry_Reference\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":289,\"Item2\":5},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":35}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"LowestBitCarry_Reference\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":289,\"Item2\":5},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":84},\"Item2\":{\"Line\":1,\"Column\":87}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Shor.LowestBitCarry_Reference\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Shor\",\"Name\":\"HighBitCarry_Reference\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":293,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":33}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"a\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":35},\"Item2\":{\"Line\":1,\"Column\":36}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"b\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":46},\"Item2\":{\"Line\":1,\"Column\":47}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"carryin\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":57},\"Item2\":{\"Line\":1,\"Column\":64}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"carryout\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":74},\"Item2\":{\"Line\":1,\"Column\":82}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Qubit\"},{\"Case\":\"Qubit\"},{\"Case\":\"Qubit\"},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"HighBitCarry_Reference\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":293,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":33}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"HighBitCarry_Reference\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":293,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":102},\"Item2\":{\"Line\":1,\"Column\":105}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Shor.HighBitCarry_Reference\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Shor\",\"Name\":\"LowestBitSumInPlace_Reference\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":299,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":40}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"a\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":42},\"Item2\":{\"Line\":1,\"Column\":43}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"b\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":53},\"Item2\":{\"Line\":1,\"Column\":54}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Qubit\"},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"LowestBitSumInPlace_Reference\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":299,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":40}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"LowestBitSumInPlace_Reference\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":299,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":74},\"Item2\":{\"Line\":1,\"Column\":77}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Shor.LowestBitSumInPlace_Reference\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Shor\",\"Name\":\"HighBitSumInPlace_Reference\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":303,\"Item2\":7},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":38}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"a\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":40},\"Item2\":{\"Line\":1,\"Column\":41}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"b\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":51},\"Item2\":{\"Line\":1,\"Column\":52}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"carryin\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":62},\"Item2\":{\"Line\":1,\"Column\":69}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Qubit\"},{\"Case\":\"Qubit\"},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"HighBitSumInPlace_Reference\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":303,\"Item2\":7},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":38}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"HighBitSumInPlace_Reference\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":303,\"Item2\":7},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":89},\"Item2\":{\"Line\":1,\"Column\":92}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Shor.HighBitSumInPlace_Reference\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Shor\",\"Name\":\"ArbitraryAdder_Challenge_Reference\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":308,\"Item2\":2},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":45}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"a\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":47},\"Item2\":{\"Line\":1,\"Column\":48}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"b\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":60},\"Item2\":{\"Line\":1,\"Column\":61}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"sum\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":73},\"Item2\":{\"Line\":1,\"Column\":76}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"carry\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":88},\"Item2\":{\"Line\":1,\"Column\":93}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"ArbitraryAdder_Challenge_Reference\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":308,\"Item2\":2},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":45}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"ArbitraryAdder_Challenge_Reference\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":308,\"Item2\":2},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":113},\"Item2\":{\"Line\":1,\"Column\":116}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Shor.ArbitraryAdder_Challenge_Reference\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Shor\",\"Name\":\"HighBitSum_Reference\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":327,\"Item2\":5},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":31}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"a\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":33},\"Item2\":{\"Line\":1,\"Column\":34}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"b\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":44},\"Item2\":{\"Line\":1,\"Column\":45}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"carryin\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":55},\"Item2\":{\"Line\":1,\"Column\":62}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"sum\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":72},\"Item2\":{\"Line\":1,\"Column\":75}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Qubit\"},{\"Case\":\"Qubit\"},{\"Case\":\"Qubit\"},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"HighBitSum_Reference\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":327,\"Item2\":5},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":31}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"HighBitSum_Reference\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":327,\"Item2\":5},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":95},\"Item2\":{\"Line\":1,\"Column\":98}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Shor.HighBitSum_Reference\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Shor\",\"Name\":\"LowestBitSum_Reference\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":333,\"Item2\":8},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":33}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"a\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":35},\"Item2\":{\"Line\":1,\"Column\":36}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"b\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":46},\"Item2\":{\"Line\":1,\"Column\":47}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"sum\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":57},\"Item2\":{\"Line\":1,\"Column\":60}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Qubit\"},{\"Case\":\"Qubit\"},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"LowestBitSum_Reference\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":333,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":33}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"LowestBitSum_Reference\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":333,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":80},\"Item2\":{\"Line\":1,\"Column\":83}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Shor.LowestBitSum_Reference\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Shor\",\"Name\":\"SquareI\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":353,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"xs\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":24},\"Item2\":{\"Line\":1,\"Column\":36}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":20},\"Item2\":{\"Line\":1,\"Column\":22}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"result\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":46},\"Item2\":{\"Line\":1,\"Column\":58}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":38},\"Item2\":{\"Line\":1,\"Column\":44}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" Computes the square of the integer `xs` into `result`,\",\" which must be zero initially.\",\"\",\" # Input\",\" ## xs\",\" $n$-bit number to square (LittleEndian)\",\" ## result\",\" $2n$-bit result (LittleEndian), must be in state $\\\\ket{0}$ initially.\",\"\",\" # Remarks\",\" Uses a standard shift-and-add approach to compute the square. Saves\",\" $n-1$ qubits compared to the straight-forward solution which first\",\" copies out xs before applying a regular multiplier and then undoing\",\" the copy operation.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"SquareI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":354,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":5}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"SquareI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":373,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":8}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"SquareI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":357,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":11}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Shor\",\"Name\":\"SquareI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs\",\"Position\":{\"Item1\":374,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":19}},\"Documentation\":[]}")]
#line hidden
namespace Shor
{
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs", OperationFunctor.Body, 12, 37)]
    public partial class Mk1 : Operation<QVoid, QVoid>, ICallable
    {
        public Mk1(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "Mk1";
        String ICallable.FullName => "Shor.Mk1";
        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> SquareI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        protected ICallable MicrosoftQuantumDiagnosticsDumpMachine
        {
            get;
            set;
        }

        protected ICallable MicrosoftQuantumDiagnosticsDumpRegister
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> MicrosoftQuantumIntrinsicResetAll
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> Body => (__in__) =>
        {
#line hidden
            {
#line 14 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                var a0 = Allocate.Apply(2L);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 15 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(a0[1L]);
#line hidden
                    {
#line 16 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                        var a1 = Allocate.Apply(4L);
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 17 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                            SquareI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(a0), new Microsoft.Quantum.Arithmetic.LittleEndian(a1)));
#line 18 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                            MicrosoftQuantumDiagnosticsDumpMachine.Apply("/Users/Matt/Documents/Masters/Dissertation/Qsharp/Qs_Output.txt");
#line hidden
                            {
#line 19 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                                var a2 = Allocate.Apply(8L);
#line hidden
                                bool __arg3__ = true;
                                try
                                {
#line 20 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                                    SquareI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(a1), new Microsoft.Quantum.Arithmetic.LittleEndian(a2)));
#line 22 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                                    SquareI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(a0), new Microsoft.Quantum.Arithmetic.LittleEndian(a1)));
#line 24 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                                    MicrosoftQuantumDiagnosticsDumpRegister.Apply((QVoid.Instance, a1));
#line 25 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                                    MicrosoftQuantumIntrinsicResetAll.Apply(a2);
                                }
#line hidden
                                catch
                                {
                                    __arg3__ = false;
                                    throw;
                                }
#line hidden
                                finally
                                {
                                    if (__arg3__)
                                    {
#line hidden
                                        Release.Apply(a2);
                                    }
                                }
                            }

#line 27 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                            MicrosoftQuantumIntrinsicResetAll.Apply(a1);
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release.Apply(a1);
                            }
                        }
                    }

#line 29 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                    MicrosoftQuantumIntrinsicResetAll.Apply(a0);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(a0);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
            this.SquareI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(SquareI));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
            this.MicrosoftQuantumDiagnosticsDumpMachine = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Diagnostics.DumpMachine<>));
            this.MicrosoftQuantumDiagnosticsDumpRegister = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Diagnostics.DumpRegister<>));
            this.MicrosoftQuantumIntrinsicResetAll = this.Factory.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.ResetAll));
        }

        public override IApplyData __dataIn(QVoid data) => data;
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<Mk1, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs", OperationFunctor.Body, 37, 65)]
    public partial class Test_Operation : Operation<(Int64,Boolean), QVoid>, ICallable
    {
        public Test_Operation(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Boolean)>, IApplyData
        {
            public In((Int64,Boolean) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "Test_Operation";
        String ICallable.FullName => "Shor.Test_Operation";
        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicH
        {
            get;
            set;
        }

        protected ICallable MicrosoftQuantumDiagnosticsDumpMachine
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> DivideI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> MicrosoftQuantumIntrinsicResetAll
        {
            get;
            set;
        }

        public override Func<(Int64,Boolean), QVoid> Body => (__in__) =>
        {
            var (number,isOdd) = __in__;
#line hidden
            {
#line 40 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                var qs = Allocate.Apply(number);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 41 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(qs[0L]);
#line 42 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                    MicrosoftQuantumIntrinsicH.Apply(qs[1L]);
#line 43 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                    MicrosoftQuantumDiagnosticsDumpMachine.Apply(QVoid.Instance);
#line hidden
                    {
#line 44 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                        var ys = Allocate.Apply(number);
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 45 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                            MicrosoftQuantumIntrinsicH.Apply(ys[1L]);
#line 46 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                            MicrosoftQuantumDiagnosticsDumpMachine.Apply(QVoid.Instance);
#line hidden
                            {
#line 47 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                                var rs = Allocate.Apply(number);
#line hidden
                                bool __arg3__ = true;
                                try
                                {
#line 48 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                                    var qsLE = new Microsoft.Quantum.Arithmetic.LittleEndian(qs);
#line 49 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                                    var ysLE = new Microsoft.Quantum.Arithmetic.LittleEndian(ys);
#line 50 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                                    var rsLE = new Microsoft.Quantum.Arithmetic.LittleEndian(rs);
#line 52 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                                    DivideI.Apply((ysLE, qsLE, rsLE));
#line 53 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                                    MicrosoftQuantumDiagnosticsDumpMachine.Apply(QVoid.Instance);
#line 54 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                                    MicrosoftQuantumIntrinsicResetAll.Apply(rs);
                                }
#line hidden
                                catch
                                {
                                    __arg3__ = false;
                                    throw;
                                }
#line hidden
                                finally
                                {
                                    if (__arg3__)
                                    {
#line hidden
                                        Release.Apply(rs);
                                    }
                                }
                            }

#line 56 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                            MicrosoftQuantumIntrinsicResetAll.Apply(ys);
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release.Apply(ys);
                            }
                        }
                    }

#line 58 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                    MicrosoftQuantumIntrinsicResetAll.Apply(qs);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(qs);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
            this.MicrosoftQuantumIntrinsicH = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.H));
            this.MicrosoftQuantumDiagnosticsDumpMachine = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Diagnostics.DumpMachine<>));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
            this.DivideI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(DivideI));
            this.MicrosoftQuantumIntrinsicResetAll = this.Factory.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.ResetAll));
        }

        public override IApplyData __dataIn((Int64,Boolean) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Int64 number, Boolean isOdd)
        {
            return __m__.Run<Test_Operation, (Int64,Boolean), QVoid>((number, isOdd));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs", OperationFunctor.Body, 65, 83)]
    public partial class EvenOddNumbersSuperposition : Operation<(Boolean,IQArray<Qubit>), QVoid>, ICallable
    {
        public EvenOddNumbersSuperposition(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Boolean,IQArray<Qubit>)>, IApplyData
        {
            public In((Boolean,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return ((IApplyData)Data.Item2)?.Qubits;
                }
            }
        }

        String ICallable.Name => "EvenOddNumbersSuperposition";
        String ICallable.FullName => "Shor.EvenOddNumbersSuperposition";
        protected ICallable Length
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicH
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        public override Func<(Boolean,IQArray<Qubit>), QVoid> Body => (__in__) =>
        {
            var (isOdd,qs) = __in__;
#line 68 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            var N = qs.Length;
#line 69 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            foreach (var i in new QRange(1L, (N - 1L)))
#line hidden
            {
#line 70 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                MicrosoftQuantumIntrinsicH.Apply(qs[i]);
            }

#line 73 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            if (isOdd)
            {
#line 74 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                MicrosoftQuantumIntrinsicX.Apply(qs[0L]);
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumIntrinsicH = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.H));
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
        }

        public override IApplyData __dataIn((Boolean,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Boolean isOdd, IQArray<Qubit> qs)
        {
            return __m__.Run<EvenOddNumbersSuperposition, (Boolean,IQArray<Qubit>), QVoid>((isOdd, qs));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs", OperationFunctor.Body, 83, 89)]
    public partial class Set : Operation<(Result,Qubit), QVoid>, ICallable
    {
        public Set(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Result,Qubit)>, IApplyData
        {
            public In((Result,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    yield return Data.Item2;
                }
            }
        }

        String ICallable.Name => "Set";
        String ICallable.FullName => "Shor.Set";
        protected ICallable<Qubit, Result> MicrosoftQuantumIntrinsicM
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        public override Func<(Result,Qubit), QVoid> Body => (__in__) =>
        {
            var (desired,q1) = __in__;
#line 84 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            if ((desired != MicrosoftQuantumIntrinsicM.Apply(q1)))
            {
#line 85 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                MicrosoftQuantumIntrinsicX.Apply(q1);
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumIntrinsicM = this.Factory.Get<ICallable<Qubit, Result>>(typeof(Microsoft.Quantum.Intrinsic.M));
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
        }

        public override IApplyData __dataIn((Result,Qubit) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Result desired, Qubit q1)
        {
            return __m__.Run<Set, (Result,Qubit), QVoid>((desired, q1));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs", OperationFunctor.Body, 89, 143)]
    public partial class TestBellState : Operation<(Int64,Result), (Int64,Int64,Int64)>, ICallable
    {
        public TestBellState(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Result)>, IApplyData
        {
            public In((Int64,Result) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        public class Out : QTuple<(Int64,Int64,Int64)>, IApplyData
        {
            public Out((Int64,Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "TestBellState";
        String ICallable.FullName => "Shor.TestBellState";
        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected ICallable<(Result,Qubit), QVoid> Set
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicH
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> MicrosoftQuantumIntrinsicCNOT
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> MicrosoftQuantumIntrinsicM
        {
            get;
            set;
        }

        public override Func<(Int64,Result), (Int64,Int64,Int64)> Body => (__in__) =>
        {
            var (count,initial) = __in__;
#line 91 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            var numOnes = 0L;
#line 92 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            var agree = 0L;
#line hidden
            {
#line 93 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                var (q0,q1) = (Allocate.Apply(), Allocate.Apply());
#line hidden
                bool __arg1__ = true;
                try
                {
#line 95 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                    foreach (var test in new QRange(1L, count))
#line hidden
                    {
#line 96 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                        Set.Apply((initial, q0));
#line 97 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                        Set.Apply((Result.Zero, q1));
#line 98 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                        MicrosoftQuantumIntrinsicH.Apply(q0);
#line 99 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                        MicrosoftQuantumIntrinsicCNOT.Apply((q0, q1));
#line 103 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                        var res = MicrosoftQuantumIntrinsicM.Apply(q0);
#line 105 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                        if ((MicrosoftQuantumIntrinsicM.Apply(q1) == res))
                        {
#line 106 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                            agree = (agree + 1L);
                        }

#line 110 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                        if ((res == Result.One))
                        {
#line 111 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                            numOnes = (numOnes + 1L);
                        }
                    }

#line 115 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                    Set.Apply((Result.Zero, q1));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(q0);
#line hidden
                        Release.Apply(q1);
                    }
                }
            }

#line 119 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            return ((count - numOnes), numOnes, agree);
        }

        ;
        public override void Init()
        {
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.Set = this.Factory.Get<ICallable<(Result,Qubit), QVoid>>(typeof(Set));
            this.MicrosoftQuantumIntrinsicH = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.H));
            this.MicrosoftQuantumIntrinsicCNOT = this.Factory.Get<IUnitary<(Qubit,Qubit)>>(typeof(Microsoft.Quantum.Intrinsic.CNOT));
            this.MicrosoftQuantumIntrinsicM = this.Factory.Get<ICallable<Qubit, Result>>(typeof(Microsoft.Quantum.Intrinsic.M));
        }

        public override IApplyData __dataIn((Int64,Result) data) => new In(data);
        public override IApplyData __dataOut((Int64,Int64,Int64) data) => new Out(data);
        public static System.Threading.Tasks.Task<(Int64,Int64,Int64)> Run(IOperationFactory __m__, Int64 count, Result initial)
        {
            return __m__.Run<TestBellState, (Int64,Result), (Int64,Int64,Int64)>((count, initial));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs", OperationFunctor.Body, 145, 148)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs", OperationFunctor.Adjoint, 168, 169)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs", OperationFunctor.Controlled, 148, 168)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs", OperationFunctor.ControlledAdjoint, 169, 183)]
    public partial class DivideI : Unitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>, ICallable
    {
        public DivideI(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>, IApplyData
        {
            public In((Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1?.Data)?.Qubits, ((IApplyData)Data.Item2?.Data)?.Qubits, ((IApplyData)Data.Item3?.Data)?.Qubits);
                }
            }
        }

        String ICallable.Name => "DivideI";
        String ICallable.FullName => "Shor.DivideI";
        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> self
        {
            get;
            set;
        }

        protected ICallable Length
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,String), QVoid> MicrosoftQuantumDiagnosticsEqualityFactI
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> MicrosoftQuantumDiagnosticsAssertAllZero
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)> CompareGTI
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> AddI
        {
            get;
            set;
        }

        protected ICallable<QRange, QRange> RangeReverse
        {
            get;
            set;
        }

        public override Func<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid> Body => (__in__) =>
        {
            var (xs,ys,result) = __in__;
#line 146 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            self.Controlled.Apply((QArray<Qubit>.Create(0L), (xs, ys, result)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid> AdjointBody => (__in__) =>
        {
            var (xs,ys,result) = __in__;
#line 168 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            self.Controlled.Adjoint.Apply((QArray<Qubit>.Create(0L), (xs, ys, result)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)), QVoid> ControlledBody => (__in__) =>
        {
            var (controls,(xs,ys,result)) = __in__;
#line 149 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            var n = result.Data.Length;
#line 151 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((n, ys.Data.Length, "Integer division requires\n                           equally-sized registers ys and result."));
#line 153 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((n, xs.Data.Length, "Integer division\n                            requires an n-bit dividend registers."));
#line 155 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumDiagnosticsAssertAllZero.Apply(result.Data);
#line 157 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            var xpadded = new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(xs.Data, result.Data));
#line 159 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            foreach (var i in new QRange((n - 1L), -(1L), 0L))
#line hidden
            {
#line 160 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                var xtrunc = new Microsoft.Quantum.Arithmetic.LittleEndian(xpadded.Data?.Slice(new QRange(i, ((i + n) - 1L))));
#line 162 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                CompareGTI.Controlled.Apply((controls, (ys, xtrunc, result.Data[i])));
#line 164 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                MicrosoftQuantumIntrinsicX.Controlled.Apply((controls, result.Data[i]));
#line 165 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                AddI.Adjoint.Controlled.Apply((new QArray<Qubit>(result.Data[i]), (ys, xtrunc)));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)), QVoid> ControlledAdjointBody => (__in__) =>
        {
            var (controls,(xs,ys,result)) = __in__;
#line 169 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            var __qsVar0__n__ = result.Data.Length;
#line 169 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((__qsVar0__n__, ys.Data.Length, "Integer division requires\n                           equally-sized registers ys and result."));
#line 169 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((__qsVar0__n__, xs.Data.Length, "Integer division\n                            requires an n-bit dividend registers."));
#line 169 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            var __qsVar1__xpadded__ = new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(xs.Data, result.Data));
#line 169 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            foreach (var __qsVar2__i__ in RangeReverse.Apply(new QRange((__qsVar0__n__ - 1L), -(1L), 0L)))
#line hidden
            {
#line 169 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                var __qsVar3__xtrunc__ = new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar1__xpadded__.Data?.Slice(new QRange(__qsVar2__i__, ((__qsVar2__i__ + __qsVar0__n__) - 1L))));
#line 169 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                AddI.Adjoint.Controlled.Adjoint.Apply((new QArray<Qubit>(result.Data[__qsVar2__i__]), (ys, __qsVar3__xtrunc__)));
#line 169 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                MicrosoftQuantumIntrinsicX.Controlled.Adjoint.Apply((controls, result.Data[__qsVar2__i__]));
#line 169 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                CompareGTI.Controlled.Adjoint.Apply((controls, (ys, __qsVar3__xtrunc__, result.Data[__qsVar2__i__])));
            }

#line 169 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumDiagnosticsAssertAllZero.Adjoint.Apply(result.Data);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.self = this;
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumDiagnosticsEqualityFactI = this.Factory.Get<ICallable<(Int64,Int64,String), QVoid>>(typeof(Microsoft.Quantum.Diagnostics.EqualityFactI));
            this.MicrosoftQuantumDiagnosticsAssertAllZero = this.Factory.Get<IUnitary<IQArray<Qubit>>>(typeof(Microsoft.Quantum.Diagnostics.AssertAllZero));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
            this.CompareGTI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)>>(typeof(CompareGTI));
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
            this.AddI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(AddI));
            this.RangeReverse = this.Factory.Get<ICallable<QRange, QRange>>(typeof(Microsoft.Quantum.Core.RangeReverse));
        }

        public override IApplyData __dataIn((Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Microsoft.Quantum.Arithmetic.LittleEndian xs, Microsoft.Quantum.Arithmetic.LittleEndian ys, Microsoft.Quantum.Arithmetic.LittleEndian result)
        {
            return __m__.Run<DivideI, (Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid>((xs, ys, result));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs", OperationFunctor.Body, 183, 208)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs", OperationFunctor.Adjoint, 183, 208)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs", OperationFunctor.Controlled, 183, 208)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs", OperationFunctor.ControlledAdjoint, 183, 208)]
    public partial class AddI : Unitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>, ICallable
    {
        public AddI(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>, IApplyData
        {
            public In((Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1?.Data)?.Qubits, ((IApplyData)Data.Item2?.Data)?.Qubits);
                }
            }
        }

        String ICallable.Name => "AddI";
        String ICallable.FullName => "Shor.AddI";
        protected ICallable Length
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> MicrosoftQuantumArithmeticRippleCarryAdderNoCarryTTK
        {
            get;
            set;
        }

        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)> MicrosoftQuantumArithmeticRippleCarryAdderTTK
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        protected ICallable MicrosoftQuantumArraysMost
        {
            get;
            set;
        }

        protected ICallable MicrosoftQuantumArraysTail
        {
            get;
            set;
        }

        public override Func<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid> Body => (__in__) =>
        {
            var (xs,ys) = __in__;
#line 184 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            if ((xs.Data.Length == ys.Data.Length))
            {
#line 185 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                MicrosoftQuantumArithmeticRippleCarryAdderNoCarryTTK.Apply((xs, ys));
            }
            else if ((ys.Data.Length > xs.Data.Length))
            {
#line hidden
                {
#line 188 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                    var qs = Allocate.Apply(((ys.Data.Length - xs.Data.Length) - 1L));
#line hidden
                    bool __arg1__ = true;
                    try
                    {
#line 189 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                        MicrosoftQuantumArithmeticRippleCarryAdderTTK.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(xs.Data, qs)), new Microsoft.Quantum.Arithmetic.LittleEndian(MicrosoftQuantumArraysMost.Apply<IQArray<Qubit>>(ys.Data)), MicrosoftQuantumArraysTail.Apply<Qubit>(ys.Data)));
                    }
#line hidden
                    catch
                    {
                        __arg1__ = false;
                        throw;
                    }
#line hidden
                    finally
                    {
                        if (__arg1__)
                        {
#line hidden
                            Release.Apply(qs);
                        }
                    }
                }
            }
            else
            {
#line 194 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                throw new ExecutionFailException("xs must not contain more qubits than ys!");
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid> AdjointBody => (__in__) =>
        {
            var (xs,ys) = __in__;
#line 183 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            if ((xs.Data.Length == ys.Data.Length))
            {
#line 183 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                MicrosoftQuantumArithmeticRippleCarryAdderNoCarryTTK.Adjoint.Apply((xs, ys));
            }
            else if ((ys.Data.Length > xs.Data.Length))
            {
#line 183 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                {
#line 183 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                    var __qsVar0__qs__ = Allocate.Apply(((ys.Data.Length - xs.Data.Length) - 1L));
#line hidden
                    bool __arg1__ = true;
                    try
                    {
#line 183 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                        MicrosoftQuantumArithmeticRippleCarryAdderTTK.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(xs.Data, __qsVar0__qs__)), new Microsoft.Quantum.Arithmetic.LittleEndian(MicrosoftQuantumArraysMost.Apply<IQArray<Qubit>>(ys.Data)), MicrosoftQuantumArraysTail.Apply<Qubit>(ys.Data)));
                    }
#line hidden
                    catch
                    {
                        __arg1__ = false;
                        throw;
                    }
#line hidden
                    finally
                    {
                        if (__arg1__)
                        {
#line hidden
                            Release.Apply(__qsVar0__qs__);
                        }
                    }
                }
            }
            else
            {
#line 183 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                throw new ExecutionFailException("xs must not contain more qubits than ys!");
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)), QVoid> ControlledBody => (__in__) =>
        {
            var (__controlQubits__,(xs,ys)) = __in__;
#line 183 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            if ((xs.Data.Length == ys.Data.Length))
            {
#line 183 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                MicrosoftQuantumArithmeticRippleCarryAdderNoCarryTTK.Controlled.Apply((__controlQubits__, (xs, ys)));
            }
            else if ((ys.Data.Length > xs.Data.Length))
            {
#line 183 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                {
#line 183 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                    var qs = Allocate.Apply(((ys.Data.Length - xs.Data.Length) - 1L));
#line hidden
                    bool __arg1__ = true;
                    try
                    {
#line 183 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                        MicrosoftQuantumArithmeticRippleCarryAdderTTK.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(xs.Data, qs)), new Microsoft.Quantum.Arithmetic.LittleEndian(MicrosoftQuantumArraysMost.Apply<IQArray<Qubit>>(ys.Data)), MicrosoftQuantumArraysTail.Apply<Qubit>(ys.Data))));
                    }
#line hidden
                    catch
                    {
                        __arg1__ = false;
                        throw;
                    }
#line hidden
                    finally
                    {
                        if (__arg1__)
                        {
#line hidden
                            Release.Apply(qs);
                        }
                    }
                }
            }
            else
            {
#line 183 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                throw new ExecutionFailException("xs must not contain more qubits than ys!");
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)), QVoid> ControlledAdjointBody => (__in__) =>
        {
            var (__controlQubits__,(xs,ys)) = __in__;
#line 183 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            if ((xs.Data.Length == ys.Data.Length))
            {
#line 183 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                MicrosoftQuantumArithmeticRippleCarryAdderNoCarryTTK.Adjoint.Controlled.Apply((__controlQubits__, (xs, ys)));
            }
            else if ((ys.Data.Length > xs.Data.Length))
            {
#line 183 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                {
#line 183 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                    var __qsVar0__qs__ = Allocate.Apply(((ys.Data.Length - xs.Data.Length) - 1L));
#line hidden
                    bool __arg1__ = true;
                    try
                    {
#line 183 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                        MicrosoftQuantumArithmeticRippleCarryAdderTTK.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(xs.Data, __qsVar0__qs__)), new Microsoft.Quantum.Arithmetic.LittleEndian(MicrosoftQuantumArraysMost.Apply<IQArray<Qubit>>(ys.Data)), MicrosoftQuantumArraysTail.Apply<Qubit>(ys.Data))));
                    }
#line hidden
                    catch
                    {
                        __arg1__ = false;
                        throw;
                    }
#line hidden
                    finally
                    {
                        if (__arg1__)
                        {
#line hidden
                            Release.Apply(__qsVar0__qs__);
                        }
                    }
                }
            }
            else
            {
#line 183 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                throw new ExecutionFailException("xs must not contain more qubits than ys!");
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumArithmeticRippleCarryAdderNoCarryTTK = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(Microsoft.Quantum.Arithmetic.RippleCarryAdderNoCarryTTK));
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MicrosoftQuantumArithmeticRippleCarryAdderTTK = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)>>(typeof(Microsoft.Quantum.Arithmetic.RippleCarryAdderTTK));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
            this.MicrosoftQuantumArraysMost = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Arrays.Most<>));
            this.MicrosoftQuantumArraysTail = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Arrays.Tail<>));
        }

        public override IApplyData __dataIn((Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Microsoft.Quantum.Arithmetic.LittleEndian xs, Microsoft.Quantum.Arithmetic.LittleEndian ys)
        {
            return __m__.Run<AddI, (Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid>((xs, ys));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs", OperationFunctor.Body, 208, 230)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs", OperationFunctor.Adjoint, 208, 230)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs", OperationFunctor.Controlled, 208, 230)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs", OperationFunctor.ControlledAdjoint, 208, 230)]
    public partial class CompareGTI : Unitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)>, ICallable
    {
        public CompareGTI(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)>, IApplyData
        {
            public In((Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1?.Data)?.Qubits, ((IApplyData)Data.Item2?.Data)?.Qubits, ((IApplyData)Data.Item3)?.Qubits);
                }
            }
        }

        String ICallable.Name => "CompareGTI";
        String ICallable.FullName => "Shor.CompareGTI";
        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)> MicrosoftQuantumArithmeticGreaterThan
        {
            get;
            set;
        }

        public override Func<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit), QVoid> Body => (__in__) =>
        {
            var (xs,ys,result) = __in__;
#line 210 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumArithmeticGreaterThan.Apply((xs, ys, result));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit), QVoid> AdjointBody => (__in__) =>
        {
            var (xs,ys,result) = __in__;
#line 208 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumArithmeticGreaterThan.Adjoint.Apply((xs, ys, result));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)), QVoid> ControlledBody => (__in__) =>
        {
            var (__controlQubits__,(xs,ys,result)) = __in__;
#line 208 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumArithmeticGreaterThan.Controlled.Apply((__controlQubits__, (xs, ys, result)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)), QVoid> ControlledAdjointBody => (__in__) =>
        {
            var (__controlQubits__,(xs,ys,result)) = __in__;
#line 208 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumArithmeticGreaterThan.Adjoint.Controlled.Apply((__controlQubits__, (xs, ys, result)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumArithmeticGreaterThan = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)>>(typeof(Microsoft.Quantum.Arithmetic.GreaterThan));
        }

        public override IApplyData __dataIn((Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Microsoft.Quantum.Arithmetic.LittleEndian xs, Microsoft.Quantum.Arithmetic.LittleEndian ys, Qubit result)
        {
            return __m__.Run<CompareGTI, (Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit), QVoid>((xs, ys, result));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs", OperationFunctor.Body, 232, 245)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs", OperationFunctor.Adjoint, 262, 263)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs", OperationFunctor.Controlled, 245, 262)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs", OperationFunctor.ControlledAdjoint, 263, 267)]
    public partial class MultiplyI : Unitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>, ICallable
    {
        public MultiplyI(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>, IApplyData
        {
            public In((Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1?.Data)?.Qubits, ((IApplyData)Data.Item2?.Data)?.Qubits, ((IApplyData)Data.Item3?.Data)?.Qubits);
                }
            }
        }

        String ICallable.Name => "MultiplyI";
        String ICallable.FullName => "Shor.MultiplyI";
        protected ICallable Length
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,String), QVoid> MicrosoftQuantumDiagnosticsEqualityFactI
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> MicrosoftQuantumDiagnosticsAssertAllZero
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> AddI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        protected ICallable<QRange, QRange> RangeReverse
        {
            get;
            set;
        }

        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> MicrosoftQuantumIntrinsicCNOT
        {
            get;
            set;
        }

        public override Func<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid> Body => (__in__) =>
        {
            var (xs,ys,result) = __in__;
#line 233 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            var n = xs.Data.Length;
#line 235 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((n, ys.Data.Length, "Integer multiplication requires\n                           equally-sized registers xs and ys."));
#line 237 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply(((2L * n), result.Data.Length, "Integer multiplication\n                            requires a 2n-bit result registers."));
#line 239 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumDiagnosticsAssertAllZero.Apply(result.Data);
#line 241 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            foreach (var i in new QRange(0L, (n - 1L)))
#line hidden
            {
#line 242 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                AddI.Controlled.Apply((new QArray<Qubit>(xs.Data[i]), (ys, new Microsoft.Quantum.Arithmetic.LittleEndian(result.Data?.Slice(new QRange(i, (i + n)))))));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid> AdjointBody => (__in__) =>
        {
            var (xs,ys,result) = __in__;
#line 262 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            var __qsVar0__n__ = xs.Data.Length;
#line 262 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((__qsVar0__n__, ys.Data.Length, "Integer multiplication requires\n                           equally-sized registers xs and ys."));
#line 262 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply(((2L * __qsVar0__n__), result.Data.Length, "Integer multiplication\n                            requires a 2n-bit result registers."));
#line 262 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            foreach (var __qsVar1__i__ in RangeReverse.Apply(new QRange(0L, (__qsVar0__n__ - 1L))))
#line hidden
            {
#line 262 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                AddI.Controlled.Adjoint.Apply((new QArray<Qubit>(xs.Data[__qsVar1__i__]), (ys, new Microsoft.Quantum.Arithmetic.LittleEndian(result.Data?.Slice(new QRange(__qsVar1__i__, (__qsVar1__i__ + __qsVar0__n__)))))));
            }

#line 262 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumDiagnosticsAssertAllZero.Adjoint.Apply(result.Data);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)), QVoid> ControlledBody => (__in__) =>
        {
            var (controls,(xs,ys,result)) = __in__;
#line 246 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            var n = xs.Data.Length;
#line 248 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((n, ys.Data.Length, "Integer multiplication requires\n                           equally-sized registers xs and ys."));
#line 250 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply(((2L * n), result.Data.Length, "Integer multiplication\n                            requires a 2n-bit result registers."));
#line 252 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumDiagnosticsAssertAllZero.Apply(result.Data);
#line hidden
            {
#line 254 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                var anc = Allocate.Apply();
#line hidden
                bool __arg1__ = true;
                try
                {
#line 255 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                    foreach (var i in new QRange(0L, (n - 1L)))
#line hidden
                    {
#line 256 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                        MicrosoftQuantumIntrinsicCNOT.Controlled.Apply((controls, (xs.Data[i], anc)));
#line 257 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                        AddI.Controlled.Apply((new QArray<Qubit>(anc), (ys, new Microsoft.Quantum.Arithmetic.LittleEndian(result.Data?.Slice(new QRange(i, (i + n)))))));
#line 258 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                        MicrosoftQuantumIntrinsicCNOT.Controlled.Apply((controls, (xs.Data[i], anc)));
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(anc);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)), QVoid> ControlledAdjointBody => (__in__) =>
        {
            var (controls,(xs,ys,result)) = __in__;
#line 263 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            var __qsVar0__n__ = xs.Data.Length;
#line 263 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((__qsVar0__n__, ys.Data.Length, "Integer multiplication requires\n                           equally-sized registers xs and ys."));
#line 263 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply(((2L * __qsVar0__n__), result.Data.Length, "Integer multiplication\n                            requires a 2n-bit result registers."));
#line 263 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            {
#line 263 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                var __qsVar1__anc__ = Allocate.Apply();
#line hidden
                bool __arg1__ = true;
                try
                {
#line 263 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                    foreach (var __qsVar2__i__ in RangeReverse.Apply(new QRange(0L, (__qsVar0__n__ - 1L))))
#line hidden
                    {
#line 263 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                        MicrosoftQuantumIntrinsicCNOT.Controlled.Adjoint.Apply((controls, (xs.Data[__qsVar2__i__], __qsVar1__anc__)));
#line 263 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                        AddI.Controlled.Adjoint.Apply((new QArray<Qubit>(__qsVar1__anc__), (ys, new Microsoft.Quantum.Arithmetic.LittleEndian(result.Data?.Slice(new QRange(__qsVar2__i__, (__qsVar2__i__ + __qsVar0__n__)))))));
#line 263 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                        MicrosoftQuantumIntrinsicCNOT.Controlled.Adjoint.Apply((controls, (xs.Data[__qsVar2__i__], __qsVar1__anc__)));
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(__qsVar1__anc__);
                    }
                }
            }

#line 263 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumDiagnosticsAssertAllZero.Adjoint.Apply(result.Data);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumDiagnosticsEqualityFactI = this.Factory.Get<ICallable<(Int64,Int64,String), QVoid>>(typeof(Microsoft.Quantum.Diagnostics.EqualityFactI));
            this.MicrosoftQuantumDiagnosticsAssertAllZero = this.Factory.Get<IUnitary<IQArray<Qubit>>>(typeof(Microsoft.Quantum.Diagnostics.AssertAllZero));
            this.AddI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(AddI));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
            this.RangeReverse = this.Factory.Get<ICallable<QRange, QRange>>(typeof(Microsoft.Quantum.Core.RangeReverse));
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MicrosoftQuantumIntrinsicCNOT = this.Factory.Get<IUnitary<(Qubit,Qubit)>>(typeof(Microsoft.Quantum.Intrinsic.CNOT));
        }

        public override IApplyData __dataIn((Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Microsoft.Quantum.Arithmetic.LittleEndian xs, Microsoft.Quantum.Arithmetic.LittleEndian ys, Microsoft.Quantum.Arithmetic.LittleEndian result)
        {
            return __m__.Run<MultiplyI, (Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid>((xs, ys, result));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs", OperationFunctor.Body, 267, 290)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs", OperationFunctor.Adjoint, 267, 290)]
    public partial class ArbitraryAdderInPlace_Reference : Adjointable<(IQArray<Qubit>,IQArray<Qubit>,Qubit)>, ICallable
    {
        public ArbitraryAdderInPlace_Reference(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IQArray<Qubit>,Qubit)>, IApplyData
        {
            public In((IQArray<Qubit>,IQArray<Qubit>,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3)?.Qubits);
                }
            }
        }

        String ICallable.Name => "ArbitraryAdderInPlace_Reference";
        String ICallable.FullName => "Shor.ArbitraryAdderInPlace_Reference";
        protected ICallable Length
        {
            get;
            set;
        }

        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected IAdjointable<(Qubit,Qubit,Qubit)> LowestBitCarry_Reference
        {
            get;
            set;
        }

        protected IAdjointable<(Qubit,Qubit,Qubit,Qubit)> HighBitCarry_Reference
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> MicrosoftQuantumIntrinsicCNOT
        {
            get;
            set;
        }

        protected IAdjointable<(Qubit,Qubit,Qubit)> HighBitSumInPlace_Reference
        {
            get;
            set;
        }

        protected IAdjointable<(Qubit,Qubit)> LowestBitSumInPlace_Reference
        {
            get;
            set;
        }

        protected ICallable<QRange, QRange> RangeReverse
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IQArray<Qubit>,Qubit), QVoid> Body => (__in__) =>
        {
            var (a,b,carry) = __in__;
#line 268 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            var N = a.Length;
#line hidden
            {
#line 270 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                var internalCarries = Allocate.Apply(N);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 272 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                    LowestBitCarry_Reference.Apply((a[0L], b[0L], internalCarries[0L]));
#line 273 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                    foreach (var i in new QRange(1L, (N - 1L)))
#line hidden
                    {
#line 274 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                        HighBitCarry_Reference.Apply((a[i], b[i], internalCarries[(i - 1L)], internalCarries[i]));
                    }

#line 276 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                    MicrosoftQuantumIntrinsicCNOT.Apply((internalCarries[(N - 1L)], carry));
#line 279 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                    foreach (var i in new QRange((N - 1L), -(1L), 1L))
#line hidden
                    {
#line 280 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                        HighBitCarry_Reference.Adjoint.Apply((a[i], b[i], internalCarries[(i - 1L)], internalCarries[i]));
#line 281 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                        HighBitSumInPlace_Reference.Apply((a[i], b[i], internalCarries[(i - 1L)]));
                    }

#line 283 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                    LowestBitCarry_Reference.Adjoint.Apply((a[0L], b[0L], internalCarries[0L]));
#line 284 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                    LowestBitSumInPlace_Reference.Apply((a[0L], b[0L]));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(internalCarries);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Qubit>,Qubit), QVoid> AdjointBody => (__in__) =>
        {
            var (a,b,carry) = __in__;
#line 267 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            var __qsVar0__N__ = a.Length;
#line 267 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            {
#line 267 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                var __qsVar1__internalCarries__ = Allocate.Apply(__qsVar0__N__);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 267 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                    LowestBitSumInPlace_Reference.Adjoint.Apply((a[0L], b[0L]));
#line 267 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                    LowestBitCarry_Reference.Adjoint.Adjoint.Apply((a[0L], b[0L], __qsVar1__internalCarries__[0L]));
#line 267 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                    foreach (var __qsVar3__i__ in RangeReverse.Apply(new QRange((__qsVar0__N__ - 1L), -(1L), 1L)))
#line hidden
                    {
#line 267 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                        HighBitSumInPlace_Reference.Adjoint.Apply((a[__qsVar3__i__], b[__qsVar3__i__], __qsVar1__internalCarries__[(__qsVar3__i__ - 1L)]));
#line 267 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                        HighBitCarry_Reference.Adjoint.Adjoint.Apply((a[__qsVar3__i__], b[__qsVar3__i__], __qsVar1__internalCarries__[(__qsVar3__i__ - 1L)], __qsVar1__internalCarries__[__qsVar3__i__]));
                    }

#line 267 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                    MicrosoftQuantumIntrinsicCNOT.Adjoint.Apply((__qsVar1__internalCarries__[(__qsVar0__N__ - 1L)], carry));
#line 267 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                    foreach (var __qsVar2__i__ in RangeReverse.Apply(new QRange(1L, (__qsVar0__N__ - 1L))))
#line hidden
                    {
#line 267 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                        HighBitCarry_Reference.Adjoint.Apply((a[__qsVar2__i__], b[__qsVar2__i__], __qsVar1__internalCarries__[(__qsVar2__i__ - 1L)], __qsVar1__internalCarries__[__qsVar2__i__]));
                    }

#line 267 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                    LowestBitCarry_Reference.Adjoint.Apply((a[0L], b[0L], __qsVar1__internalCarries__[0L]));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(__qsVar1__internalCarries__);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.LowestBitCarry_Reference = this.Factory.Get<IAdjointable<(Qubit,Qubit,Qubit)>>(typeof(LowestBitCarry_Reference));
            this.HighBitCarry_Reference = this.Factory.Get<IAdjointable<(Qubit,Qubit,Qubit,Qubit)>>(typeof(HighBitCarry_Reference));
            this.MicrosoftQuantumIntrinsicCNOT = this.Factory.Get<IUnitary<(Qubit,Qubit)>>(typeof(Microsoft.Quantum.Intrinsic.CNOT));
            this.HighBitSumInPlace_Reference = this.Factory.Get<IAdjointable<(Qubit,Qubit,Qubit)>>(typeof(HighBitSumInPlace_Reference));
            this.LowestBitSumInPlace_Reference = this.Factory.Get<IAdjointable<(Qubit,Qubit)>>(typeof(LowestBitSumInPlace_Reference));
            this.RangeReverse = this.Factory.Get<ICallable<QRange, QRange>>(typeof(Microsoft.Quantum.Core.RangeReverse));
        }

        public override IApplyData __dataIn((IQArray<Qubit>,IQArray<Qubit>,Qubit) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> a, IQArray<Qubit> b, Qubit carry)
        {
            return __m__.Run<ArbitraryAdderInPlace_Reference, (IQArray<Qubit>,IQArray<Qubit>,Qubit), QVoid>((a, b, carry));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs", OperationFunctor.Body, 290, 294)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs", OperationFunctor.Adjoint, 290, 294)]
    public partial class LowestBitCarry_Reference : Adjointable<(Qubit,Qubit,Qubit)>, ICallable
    {
        public LowestBitCarry_Reference(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Qubit,Qubit,Qubit)>, IApplyData
        {
            public In((Qubit,Qubit,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    yield return Data.Item1;
                    yield return Data.Item2;
                    yield return Data.Item3;
                }
            }
        }

        String ICallable.Name => "LowestBitCarry_Reference";
        String ICallable.FullName => "Shor.LowestBitCarry_Reference";
        protected IUnitary<(Qubit,Qubit,Qubit)> MicrosoftQuantumIntrinsicCCNOT
        {
            get;
            set;
        }

        public override Func<(Qubit,Qubit,Qubit), QVoid> Body => (__in__) =>
        {
            var (a,b,carry) = __in__;
#line 291 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumIntrinsicCCNOT.Apply((a, b, carry));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(Qubit,Qubit,Qubit), QVoid> AdjointBody => (__in__) =>
        {
            var (a,b,carry) = __in__;
#line 290 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumIntrinsicCCNOT.Adjoint.Apply((a, b, carry));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumIntrinsicCCNOT = this.Factory.Get<IUnitary<(Qubit,Qubit,Qubit)>>(typeof(Microsoft.Quantum.Intrinsic.CCNOT));
        }

        public override IApplyData __dataIn((Qubit,Qubit,Qubit) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Qubit a, Qubit b, Qubit carry)
        {
            return __m__.Run<LowestBitCarry_Reference, (Qubit,Qubit,Qubit), QVoid>((a, b, carry));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs", OperationFunctor.Body, 294, 300)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs", OperationFunctor.Adjoint, 294, 300)]
    public partial class HighBitCarry_Reference : Adjointable<(Qubit,Qubit,Qubit,Qubit)>, ICallable
    {
        public HighBitCarry_Reference(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Qubit,Qubit,Qubit,Qubit)>, IApplyData
        {
            public In((Qubit,Qubit,Qubit,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    yield return Data.Item1;
                    yield return Data.Item2;
                    yield return Data.Item3;
                    yield return Data.Item4;
                }
            }
        }

        String ICallable.Name => "HighBitCarry_Reference";
        String ICallable.FullName => "Shor.HighBitCarry_Reference";
        protected IUnitary<(Qubit,Qubit,Qubit)> MicrosoftQuantumIntrinsicCCNOT
        {
            get;
            set;
        }

        public override Func<(Qubit,Qubit,Qubit,Qubit), QVoid> Body => (__in__) =>
        {
            var (a,b,carryin,carryout) = __in__;
#line 295 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumIntrinsicCCNOT.Apply((a, b, carryout));
#line 296 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumIntrinsicCCNOT.Apply((a, carryin, carryout));
#line 297 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumIntrinsicCCNOT.Apply((b, carryin, carryout));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(Qubit,Qubit,Qubit,Qubit), QVoid> AdjointBody => (__in__) =>
        {
            var (a,b,carryin,carryout) = __in__;
#line 294 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumIntrinsicCCNOT.Adjoint.Apply((b, carryin, carryout));
#line 294 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumIntrinsicCCNOT.Adjoint.Apply((a, carryin, carryout));
#line 294 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumIntrinsicCCNOT.Adjoint.Apply((a, b, carryout));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumIntrinsicCCNOT = this.Factory.Get<IUnitary<(Qubit,Qubit,Qubit)>>(typeof(Microsoft.Quantum.Intrinsic.CCNOT));
        }

        public override IApplyData __dataIn((Qubit,Qubit,Qubit,Qubit) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Qubit a, Qubit b, Qubit carryin, Qubit carryout)
        {
            return __m__.Run<HighBitCarry_Reference, (Qubit,Qubit,Qubit,Qubit), QVoid>((a, b, carryin, carryout));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs", OperationFunctor.Body, 300, 304)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs", OperationFunctor.Adjoint, 300, 304)]
    public partial class LowestBitSumInPlace_Reference : Adjointable<(Qubit,Qubit)>, ICallable
    {
        public LowestBitSumInPlace_Reference(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Qubit,Qubit)>, IApplyData
        {
            public In((Qubit,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    yield return Data.Item1;
                    yield return Data.Item2;
                }
            }
        }

        String ICallable.Name => "LowestBitSumInPlace_Reference";
        String ICallable.FullName => "Shor.LowestBitSumInPlace_Reference";
        protected IUnitary<(Qubit,Qubit)> MicrosoftQuantumIntrinsicCNOT
        {
            get;
            set;
        }

        public override Func<(Qubit,Qubit), QVoid> Body => (__in__) =>
        {
            var (a,b) = __in__;
#line 301 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Apply((a, b));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(Qubit,Qubit), QVoid> AdjointBody => (__in__) =>
        {
            var (a,b) = __in__;
#line 300 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Adjoint.Apply((a, b));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumIntrinsicCNOT = this.Factory.Get<IUnitary<(Qubit,Qubit)>>(typeof(Microsoft.Quantum.Intrinsic.CNOT));
        }

        public override IApplyData __dataIn((Qubit,Qubit) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Qubit a, Qubit b)
        {
            return __m__.Run<LowestBitSumInPlace_Reference, (Qubit,Qubit), QVoid>((a, b));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs", OperationFunctor.Body, 304, 309)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs", OperationFunctor.Adjoint, 304, 309)]
    public partial class HighBitSumInPlace_Reference : Adjointable<(Qubit,Qubit,Qubit)>, ICallable
    {
        public HighBitSumInPlace_Reference(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Qubit,Qubit,Qubit)>, IApplyData
        {
            public In((Qubit,Qubit,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    yield return Data.Item1;
                    yield return Data.Item2;
                    yield return Data.Item3;
                }
            }
        }

        String ICallable.Name => "HighBitSumInPlace_Reference";
        String ICallable.FullName => "Shor.HighBitSumInPlace_Reference";
        protected IUnitary<(Qubit,Qubit)> MicrosoftQuantumIntrinsicCNOT
        {
            get;
            set;
        }

        public override Func<(Qubit,Qubit,Qubit), QVoid> Body => (__in__) =>
        {
            var (a,b,carryin) = __in__;
#line 305 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Apply((a, b));
#line 306 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Apply((carryin, b));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(Qubit,Qubit,Qubit), QVoid> AdjointBody => (__in__) =>
        {
            var (a,b,carryin) = __in__;
#line 304 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Adjoint.Apply((carryin, b));
#line 304 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Adjoint.Apply((a, b));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumIntrinsicCNOT = this.Factory.Get<IUnitary<(Qubit,Qubit)>>(typeof(Microsoft.Quantum.Intrinsic.CNOT));
        }

        public override IApplyData __dataIn((Qubit,Qubit,Qubit) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Qubit a, Qubit b, Qubit carryin)
        {
            return __m__.Run<HighBitSumInPlace_Reference, (Qubit,Qubit,Qubit), QVoid>((a, b, carryin));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs", OperationFunctor.Body, 309, 328)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs", OperationFunctor.Adjoint, 309, 328)]
    public partial class ArbitraryAdder_Challenge_Reference : Adjointable<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit)>, ICallable
    {
        public ArbitraryAdder_Challenge_Reference(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit)>, IApplyData
        {
            public In((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3)?.Qubits, ((IApplyData)Data.Item4)?.Qubits);
                }
            }
        }

        String ICallable.Name => "ArbitraryAdder_Challenge_Reference";
        String ICallable.FullName => "Shor.ArbitraryAdder_Challenge_Reference";
        protected ICallable Length
        {
            get;
            set;
        }

        protected IAdjointable<(Qubit,Qubit,Qubit)> LowestBitCarry_Reference
        {
            get;
            set;
        }

        protected IAdjointable<(Qubit,Qubit,Qubit,Qubit)> HighBitCarry_Reference
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> MicrosoftQuantumIntrinsicCNOT
        {
            get;
            set;
        }

        protected IAdjointable<(Qubit,Qubit,Qubit,Qubit)> HighBitSum_Reference
        {
            get;
            set;
        }

        protected IAdjointable<(Qubit,Qubit,Qubit)> LowestBitSum_Reference
        {
            get;
            set;
        }

        protected ICallable<QRange, QRange> RangeReverse
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit), QVoid> Body => (__in__) =>
        {
            var (a,b,sum,carry) = __in__;
#line 310 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            var N = a.Length;
#line 313 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            LowestBitCarry_Reference.Apply((a[0L], b[0L], sum[0L]));
#line 314 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            foreach (var i in new QRange(1L, (N - 1L)))
#line hidden
            {
#line 315 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                HighBitCarry_Reference.Apply((a[i], b[i], sum[(i - 1L)], sum[i]));
            }

#line 317 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Apply((sum[(N - 1L)], carry));
#line 320 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            foreach (var i in new QRange((N - 1L), -(1L), 1L))
#line hidden
            {
#line 321 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                HighBitCarry_Reference.Adjoint.Apply((a[i], b[i], sum[(i - 1L)], sum[i]));
#line 322 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                HighBitSum_Reference.Apply((a[i], b[i], sum[(i - 1L)], sum[i]));
            }

#line 324 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            LowestBitCarry_Reference.Adjoint.Apply((a[0L], b[0L], sum[0L]));
#line 325 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            LowestBitSum_Reference.Apply((a[0L], b[0L], sum[0L]));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit), QVoid> AdjointBody => (__in__) =>
        {
            var (a,b,sum,carry) = __in__;
#line 309 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            var __qsVar0__N__ = a.Length;
#line 309 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            LowestBitSum_Reference.Adjoint.Apply((a[0L], b[0L], sum[0L]));
#line 309 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            LowestBitCarry_Reference.Adjoint.Adjoint.Apply((a[0L], b[0L], sum[0L]));
#line 309 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            foreach (var __qsVar2__i__ in RangeReverse.Apply(new QRange((__qsVar0__N__ - 1L), -(1L), 1L)))
#line hidden
            {
#line 309 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                HighBitSum_Reference.Adjoint.Apply((a[__qsVar2__i__], b[__qsVar2__i__], sum[(__qsVar2__i__ - 1L)], sum[__qsVar2__i__]));
#line 309 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                HighBitCarry_Reference.Adjoint.Adjoint.Apply((a[__qsVar2__i__], b[__qsVar2__i__], sum[(__qsVar2__i__ - 1L)], sum[__qsVar2__i__]));
            }

#line 309 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Adjoint.Apply((sum[(__qsVar0__N__ - 1L)], carry));
#line 309 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            foreach (var __qsVar1__i__ in RangeReverse.Apply(new QRange(1L, (__qsVar0__N__ - 1L))))
#line hidden
            {
#line 309 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                HighBitCarry_Reference.Adjoint.Apply((a[__qsVar1__i__], b[__qsVar1__i__], sum[(__qsVar1__i__ - 1L)], sum[__qsVar1__i__]));
            }

#line 309 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            LowestBitCarry_Reference.Adjoint.Apply((a[0L], b[0L], sum[0L]));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.LowestBitCarry_Reference = this.Factory.Get<IAdjointable<(Qubit,Qubit,Qubit)>>(typeof(LowestBitCarry_Reference));
            this.HighBitCarry_Reference = this.Factory.Get<IAdjointable<(Qubit,Qubit,Qubit,Qubit)>>(typeof(HighBitCarry_Reference));
            this.MicrosoftQuantumIntrinsicCNOT = this.Factory.Get<IUnitary<(Qubit,Qubit)>>(typeof(Microsoft.Quantum.Intrinsic.CNOT));
            this.HighBitSum_Reference = this.Factory.Get<IAdjointable<(Qubit,Qubit,Qubit,Qubit)>>(typeof(HighBitSum_Reference));
            this.LowestBitSum_Reference = this.Factory.Get<IAdjointable<(Qubit,Qubit,Qubit)>>(typeof(LowestBitSum_Reference));
            this.RangeReverse = this.Factory.Get<ICallable<QRange, QRange>>(typeof(Microsoft.Quantum.Core.RangeReverse));
        }

        public override IApplyData __dataIn((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> a, IQArray<Qubit> b, IQArray<Qubit> sum, Qubit carry)
        {
            return __m__.Run<ArbitraryAdder_Challenge_Reference, (IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit), QVoid>((a, b, sum, carry));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs", OperationFunctor.Body, 328, 334)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs", OperationFunctor.Adjoint, 328, 334)]
    public partial class HighBitSum_Reference : Adjointable<(Qubit,Qubit,Qubit,Qubit)>, ICallable
    {
        public HighBitSum_Reference(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Qubit,Qubit,Qubit,Qubit)>, IApplyData
        {
            public In((Qubit,Qubit,Qubit,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    yield return Data.Item1;
                    yield return Data.Item2;
                    yield return Data.Item3;
                    yield return Data.Item4;
                }
            }
        }

        String ICallable.Name => "HighBitSum_Reference";
        String ICallable.FullName => "Shor.HighBitSum_Reference";
        protected IUnitary<(Qubit,Qubit)> MicrosoftQuantumIntrinsicCNOT
        {
            get;
            set;
        }

        public override Func<(Qubit,Qubit,Qubit,Qubit), QVoid> Body => (__in__) =>
        {
            var (a,b,carryin,sum) = __in__;
#line 329 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Apply((a, sum));
#line 330 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Apply((b, sum));
#line 331 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Apply((carryin, sum));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(Qubit,Qubit,Qubit,Qubit), QVoid> AdjointBody => (__in__) =>
        {
            var (a,b,carryin,sum) = __in__;
#line 328 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Adjoint.Apply((carryin, sum));
#line 328 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Adjoint.Apply((b, sum));
#line 328 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Adjoint.Apply((a, sum));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumIntrinsicCNOT = this.Factory.Get<IUnitary<(Qubit,Qubit)>>(typeof(Microsoft.Quantum.Intrinsic.CNOT));
        }

        public override IApplyData __dataIn((Qubit,Qubit,Qubit,Qubit) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Qubit a, Qubit b, Qubit carryin, Qubit sum)
        {
            return __m__.Run<HighBitSum_Reference, (Qubit,Qubit,Qubit,Qubit), QVoid>((a, b, carryin, sum));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs", OperationFunctor.Body, 334, 354)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs", OperationFunctor.Adjoint, 334, 354)]
    public partial class LowestBitSum_Reference : Adjointable<(Qubit,Qubit,Qubit)>, ICallable
    {
        public LowestBitSum_Reference(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Qubit,Qubit,Qubit)>, IApplyData
        {
            public In((Qubit,Qubit,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    yield return Data.Item1;
                    yield return Data.Item2;
                    yield return Data.Item3;
                }
            }
        }

        String ICallable.Name => "LowestBitSum_Reference";
        String ICallable.FullName => "Shor.LowestBitSum_Reference";
        protected IUnitary<(Qubit,Qubit)> MicrosoftQuantumIntrinsicCNOT
        {
            get;
            set;
        }

        public override Func<(Qubit,Qubit,Qubit), QVoid> Body => (__in__) =>
        {
            var (a,b,sum) = __in__;
#line 335 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Apply((a, sum));
#line 336 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Apply((b, sum));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(Qubit,Qubit,Qubit), QVoid> AdjointBody => (__in__) =>
        {
            var (a,b,sum) = __in__;
#line 334 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Adjoint.Apply((b, sum));
#line 334 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Adjoint.Apply((a, sum));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumIntrinsicCNOT = this.Factory.Get<IUnitary<(Qubit,Qubit)>>(typeof(Microsoft.Quantum.Intrinsic.CNOT));
        }

        public override IApplyData __dataIn((Qubit,Qubit,Qubit) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Qubit a, Qubit b, Qubit sum)
        {
            return __m__.Run<LowestBitSum_Reference, (Qubit,Qubit,Qubit), QVoid>((a, b, sum));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs", OperationFunctor.Body, 355, 358)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs", OperationFunctor.Adjoint, 374, 375)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs", OperationFunctor.Controlled, 358, 374)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs", OperationFunctor.ControlledAdjoint, 375, -1)]
    public partial class SquareI : Unitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>, ICallable
    {
        public SquareI(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>, IApplyData
        {
            public In((Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1?.Data)?.Qubits, ((IApplyData)Data.Item2?.Data)?.Qubits);
                }
            }
        }

        String ICallable.Name => "SquareI";
        String ICallable.FullName => "Shor.SquareI";
        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> self
        {
            get;
            set;
        }

        protected ICallable Length
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,String), QVoid> MicrosoftQuantumDiagnosticsEqualityFactI
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> MicrosoftQuantumDiagnosticsAssertAllZero
        {
            get;
            set;
        }

        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> MicrosoftQuantumIntrinsicCNOT
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> AddI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        protected ICallable<QRange, QRange> RangeReverse
        {
            get;
            set;
        }

        public override Func<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid> Body => (__in__) =>
        {
            var (xs,result) = __in__;
#line 356 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            self.Controlled.Apply((QArray<Qubit>.Create(0L), (xs, result)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid> AdjointBody => (__in__) =>
        {
            var (xs,result) = __in__;
#line 374 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            self.Controlled.Adjoint.Apply((QArray<Qubit>.Create(0L), (xs, result)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)), QVoid> ControlledBody => (__in__) =>
        {
            var (controls,(xs,result)) = __in__;
#line 359 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            var n = xs.Data.Length;
#line 361 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply(((2L * n), result.Data.Length, "Integer multiplication\n                            requires a 2n-bit result registers."));
#line 363 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumDiagnosticsAssertAllZero.Apply(result.Data);
#line hidden
            {
#line 365 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                var anc = Allocate.Apply();
#line hidden
                bool __arg1__ = true;
                try
                {
#line 366 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                    foreach (var i in new QRange(0L, (n - 1L)))
#line hidden
                    {
#line 367 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                        MicrosoftQuantumIntrinsicCNOT.Controlled.Apply((controls, (xs.Data[i], anc)));
#line 368 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                        AddI.Controlled.Apply((new QArray<Qubit>(anc), (xs, new Microsoft.Quantum.Arithmetic.LittleEndian(result.Data?.Slice(new QRange(i, (i + n)))))));
#line 370 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                        MicrosoftQuantumIntrinsicCNOT.Controlled.Apply((controls, (xs.Data[i], anc)));
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(anc);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)), QVoid> ControlledAdjointBody => (__in__) =>
        {
            var (controls,(xs,result)) = __in__;
#line 375 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            var __qsVar0__n__ = xs.Data.Length;
#line 375 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply(((2L * __qsVar0__n__), result.Data.Length, "Integer multiplication\n                            requires a 2n-bit result registers."));
#line 375 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            {
#line 375 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                var __qsVar1__anc__ = Allocate.Apply();
#line hidden
                bool __arg1__ = true;
                try
                {
#line 375 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                    foreach (var __qsVar2__i__ in RangeReverse.Apply(new QRange(0L, (__qsVar0__n__ - 1L))))
#line hidden
                    {
#line 375 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                        MicrosoftQuantumIntrinsicCNOT.Controlled.Adjoint.Apply((controls, (xs.Data[__qsVar2__i__], __qsVar1__anc__)));
#line 375 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                        AddI.Controlled.Adjoint.Apply((new QArray<Qubit>(__qsVar1__anc__), (xs, new Microsoft.Quantum.Arithmetic.LittleEndian(result.Data?.Slice(new QRange(__qsVar2__i__, (__qsVar2__i__ + __qsVar0__n__)))))));
#line 375 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
                        MicrosoftQuantumIntrinsicCNOT.Controlled.Adjoint.Apply((controls, (xs.Data[__qsVar2__i__], __qsVar1__anc__)));
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(__qsVar1__anc__);
                    }
                }
            }

#line 375 "/Users/Matt/Documents/Masters/Dissertation/QSharp/Shor_In_Superposition/quantum/Program.qs"
            MicrosoftQuantumDiagnosticsAssertAllZero.Adjoint.Apply(result.Data);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.self = this;
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumDiagnosticsEqualityFactI = this.Factory.Get<ICallable<(Int64,Int64,String), QVoid>>(typeof(Microsoft.Quantum.Diagnostics.EqualityFactI));
            this.MicrosoftQuantumDiagnosticsAssertAllZero = this.Factory.Get<IUnitary<IQArray<Qubit>>>(typeof(Microsoft.Quantum.Diagnostics.AssertAllZero));
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MicrosoftQuantumIntrinsicCNOT = this.Factory.Get<IUnitary<(Qubit,Qubit)>>(typeof(Microsoft.Quantum.Intrinsic.CNOT));
            this.AddI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(AddI));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
            this.RangeReverse = this.Factory.Get<ICallable<QRange, QRange>>(typeof(Microsoft.Quantum.Core.RangeReverse));
        }

        public override IApplyData __dataIn((Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Microsoft.Quantum.Arithmetic.LittleEndian xs, Microsoft.Quantum.Arithmetic.LittleEndian result)
        {
            return __m__.Run<SquareI, (Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid>((xs, result));
        }
    }
}