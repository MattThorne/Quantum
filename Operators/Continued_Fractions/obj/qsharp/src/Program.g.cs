//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Simulation.Core;

[assembly: TypeDeclaration("{\"QualifiedName\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"SignedLittleEndian\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":19,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":9},\"Item2\":{\"Line\":1,\"Column\":27}},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeItems\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"Case\":\"Anonymous\",\"Fields\":[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":30},\"Item2\":{\"Line\":1,\"Column\":42}}]}}]}]}]}]]},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"TypeConstructor\"},\"QualifiedName\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"SignedLittleEndian\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":19,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":9},\"Item2\":{\"Line\":1,\"Column\":27}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"__Item1__\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":1}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},\"ReturnType\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"ContinuedFractions\",\"Name\":\"SignedLittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":true}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":true}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"SignedLittleEndian\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":19,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":9},\"Item2\":{\"Line\":1,\"Column\":27}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"Testing_in_Superposition\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":23,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":35}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"bitSize\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":36},\"Item2\":{\"Line\":1,\"Column\":43}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"Int\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\"Resources Estimator Operation///////\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"Testing_in_Superposition\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":23,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":35}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"Testing_with_Toffoli\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":30,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":31}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"n\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":32},\"Item2\":{\"Line\":1,\"Column\":33}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"mI\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":39},\"Item2\":{\"Line\":1,\"Column\":41}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"resI\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":46},\"Item2\":{\"Line\":1,\"Column\":50}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"bitSize\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":55},\"Item2\":{\"Line\":1,\"Column\":62}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"adj\"]},\"Type\":{\"Case\":\"Bool\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":67},\"Item2\":{\"Line\":1,\"Column\":70}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"Bool\"}]]},\"ReturnType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"BigInt\"}]]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\"THE TOFFOLI SIMULATOR OPERATION/////////////////\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"Testing_with_Toffoli\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":30,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":31}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"CFC\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":59,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":14}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"p\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":15},\"Item2\":{\"Line\":1,\"Column\":16}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"m\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":25},\"Item2\":{\"Line\":1,\"Column\":26}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"u\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":35},\"Item2\":{\"Line\":1,\"Column\":36}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"adj\"]},\"Type\":{\"Case\":\"Bool\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":45},\"Item2\":{\"Line\":1,\"Column\":48}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Bool\"}]]},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"CFC\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":59,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":14}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"CFMainNew\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":71,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"p\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":21},\"Item2\":{\"Line\":1,\"Column\":22}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"m\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":31},\"Item2\":{\"Line\":1,\"Column\":32}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"u\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":41},\"Item2\":{\"Line\":1,\"Column\":42}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"adj\"]},\"Type\":{\"Case\":\"Bool\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":51},\"Item2\":{\"Line\":1,\"Column\":54}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Bool\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"CFMainNew\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":71,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"Pebble\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":100,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":17}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"s\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":18},\"Item2\":{\"Line\":1,\"Column\":19}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"n\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":26},\"Item2\":{\"Line\":1,\"Column\":27}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"arr\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":33},\"Item2\":{\"Line\":1,\"Column\":36}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"p\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":43},\"Item2\":{\"Line\":1,\"Column\":44}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"m\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":53},\"Item2\":{\"Line\":1,\"Column\":54}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"u\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":63},\"Item2\":{\"Line\":1,\"Column\":64}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"r1\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":73},\"Item2\":{\"Line\":1,\"Column\":75}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"r2\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":84},\"Item2\":{\"Line\":1,\"Column\":86}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"s1\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":95},\"Item2\":{\"Line\":1,\"Column\":97}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"s2\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":106},\"Item2\":{\"Line\":1,\"Column\":108}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"quo\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":117},\"Item2\":{\"Line\":1,\"Column\":120}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"qTs2\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":129},\"Item2\":{\"Line\":1,\"Column\":133}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"C1\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":142},\"Item2\":{\"Line\":1,\"Column\":144}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"anc1\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":153},\"Item2\":{\"Line\":1,\"Column\":157}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"anc2\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":166},\"Item2\":{\"Line\":1,\"Column\":170}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"adj\"]},\"Type\":{\"Case\":\"Bool\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":179},\"Item2\":{\"Line\":1,\"Column\":182}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Bool\"}]]},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"Pebble\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":100,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":17}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"Unpebble\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":118,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":19}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"s\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":20},\"Item2\":{\"Line\":1,\"Column\":21}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"n\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":28},\"Item2\":{\"Line\":1,\"Column\":29}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"arr\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":35},\"Item2\":{\"Line\":1,\"Column\":38}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"p\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":45},\"Item2\":{\"Line\":1,\"Column\":46}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"m\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":55},\"Item2\":{\"Line\":1,\"Column\":56}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"u\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":65},\"Item2\":{\"Line\":1,\"Column\":66}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"r1\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":75},\"Item2\":{\"Line\":1,\"Column\":77}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"r2\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":86},\"Item2\":{\"Line\":1,\"Column\":88}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"s1\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":97},\"Item2\":{\"Line\":1,\"Column\":99}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"s2\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":108},\"Item2\":{\"Line\":1,\"Column\":110}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"quo\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":119},\"Item2\":{\"Line\":1,\"Column\":122}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"qTs2\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":131},\"Item2\":{\"Line\":1,\"Column\":135}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"C1\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":144},\"Item2\":{\"Line\":1,\"Column\":146}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"anc1\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":155},\"Item2\":{\"Line\":1,\"Column\":159}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"anc2\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":168},\"Item2\":{\"Line\":1,\"Column\":172}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"adj\"]},\"Type\":{\"Case\":\"Bool\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":181},\"Item2\":{\"Line\":1,\"Column\":184}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Bool\"}]]},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"Unpebble\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":118,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":19}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"CFStep\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":136,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":17}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"t\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":18},\"Item2\":{\"Line\":1,\"Column\":19}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"arr\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":24},\"Item2\":{\"Line\":1,\"Column\":27}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"d\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":35},\"Item2\":{\"Line\":1,\"Column\":36}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"p\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":41},\"Item2\":{\"Line\":1,\"Column\":42}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"m\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":51},\"Item2\":{\"Line\":1,\"Column\":52}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"u\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":61},\"Item2\":{\"Line\":1,\"Column\":62}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"r1\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":71},\"Item2\":{\"Line\":1,\"Column\":73}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"r2\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":82},\"Item2\":{\"Line\":1,\"Column\":84}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"s1\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":93},\"Item2\":{\"Line\":1,\"Column\":95}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"s2\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":104},\"Item2\":{\"Line\":1,\"Column\":106}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"quo\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":115},\"Item2\":{\"Line\":1,\"Column\":118}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"qTs2\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":127},\"Item2\":{\"Line\":1,\"Column\":131}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"C1\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":140},\"Item2\":{\"Line\":1,\"Column\":142}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"anc1\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":151},\"Item2\":{\"Line\":1,\"Column\":155}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"anc2\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":164},\"Item2\":{\"Line\":1,\"Column\":168}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"adj\"]},\"Type\":{\"Case\":\"Bool\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":177},\"Item2\":{\"Line\":1,\"Column\":180}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},{\"Case\":\"Int\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Bool\"}]]},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"CFStep\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":136,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":17}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"CFExtractRes\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":246,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":23}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"res\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":24},\"Item2\":{\"Line\":1,\"Column\":27}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"m\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":36},\"Item2\":{\"Line\":1,\"Column\":37}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"r2\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":46},\"Item2\":{\"Line\":1,\"Column\":48}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"s1\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":57},\"Item2\":{\"Line\":1,\"Column\":59}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"s2\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":68},\"Item2\":{\"Line\":1,\"Column\":70}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"adj\"]},\"Type\":{\"Case\":\"Bool\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":79},\"Item2\":{\"Line\":1,\"Column\":82}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Bool\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"CFExtractRes\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":247,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":5}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"CFExtractRes\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":275,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":11}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"CFIteration\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":307,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":22}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"r1\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":24},\"Item2\":{\"Line\":1,\"Column\":26}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"r2\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":35},\"Item2\":{\"Line\":1,\"Column\":37}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"s1\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":46},\"Item2\":{\"Line\":1,\"Column\":48}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"s2\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":57},\"Item2\":{\"Line\":1,\"Column\":59}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"quo\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":68},\"Item2\":{\"Line\":1,\"Column\":71}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"qTs2\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":80},\"Item2\":{\"Line\":1,\"Column\":84}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"anc1\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":93},\"Item2\":{\"Line\":1,\"Column\":97}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"anc2\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":104},\"Item2\":{\"Line\":1,\"Column\":108}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"CFIteration\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":307,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":22}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"CFIteration\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":307,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":124},\"Item2\":{\"Line\":1,\"Column\":133}},\"Documentation\":[\"automatically generated QsAdjoint specialization for ContinuedFractions.CFIteration\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"CFIteration\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":307,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":124},\"Item2\":{\"Line\":1,\"Column\":133}},\"Documentation\":[\"automatically generated QsControlled specialization for ContinuedFractions.CFIteration\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"CFIteration\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":307,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":124},\"Item2\":{\"Line\":1,\"Column\":133}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for ContinuedFractions.CFIteration\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"CFCheck\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":335,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"r2\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":20},\"Item2\":{\"Line\":1,\"Column\":22}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"s2\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":31},\"Item2\":{\"Line\":1,\"Column\":33}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"m\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":42},\"Item2\":{\"Line\":1,\"Column\":43}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"C\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":52},\"Item2\":{\"Line\":1,\"Column\":53}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"CFCheck\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":336,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":5}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"CFCheck\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":335,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":69},\"Item2\":{\"Line\":1,\"Column\":78}},\"Documentation\":[\"automatically generated QsAdjoint specialization for ContinuedFractions.CFCheck\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"CFCheck\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":362,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":11}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"CFCheck\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":335,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":69},\"Item2\":{\"Line\":1,\"Column\":78}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for ContinuedFractions.CFCheck\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"MinimalMultiplyI\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":393,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":27}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"xs\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":29},\"Item2\":{\"Line\":1,\"Column\":31}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"ys\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":42},\"Item2\":{\"Line\":1,\"Column\":44}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"result\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":55},\"Item2\":{\"Line\":1,\"Column\":61}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\"Fundemental Operators////////////////////////\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"MinimalMultiplyI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":393,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":27}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"SignedSubtract\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":406,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":25}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"a\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":26},\"Item2\":{\"Line\":1,\"Column\":27}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"b\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":36},\"Item2\":{\"Line\":1,\"Column\":37}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"anc\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":46},\"Item2\":{\"Line\":1,\"Column\":49}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"anc2\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":56},\"Item2\":{\"Line\":1,\"Column\":60}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"SignedSubtract\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":407,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":5}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"SignedSubtract\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":426,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":8}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"SignedSubtract\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":406,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":76},\"Item2\":{\"Line\":1,\"Column\":85}},\"Documentation\":[\"automatically generated QsControlled specialization for ContinuedFractions.SignedSubtract\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"SignedSubtract\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":406,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":76},\"Item2\":{\"Line\":1,\"Column\":85}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for ContinuedFractions.SignedSubtract\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"SignedMultiply\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":430,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":25}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"a\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":26},\"Item2\":{\"Line\":1,\"Column\":27}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"b\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":39},\"Item2\":{\"Line\":1,\"Column\":40}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"c\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":50},\"Item2\":{\"Line\":1,\"Column\":51}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"SignedMultiply\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":432,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":5}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"SignedMultiply\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":442,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":8}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"SignedMultiply\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":430,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":71},\"Item2\":{\"Line\":1,\"Column\":80}},\"Documentation\":[\"automatically generated QsControlled specialization for ContinuedFractions.SignedMultiply\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"SignedMultiply\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":430,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":71},\"Item2\":{\"Line\":1,\"Column\":80}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for ContinuedFractions.SignedMultiply\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"DivideI\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":446,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"xs\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":24},\"Item2\":{\"Line\":1,\"Column\":36}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":20},\"Item2\":{\"Line\":1,\"Column\":22}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"ys\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":42},\"Item2\":{\"Line\":1,\"Column\":54}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":38},\"Item2\":{\"Line\":1,\"Column\":40}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"result\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":2,\"Column\":37},\"Item2\":{\"Line\":2,\"Column\":49}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":29},\"Item2\":{\"Line\":2,\"Column\":35}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"DivideI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":448,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":5}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"DivideI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":471,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":8}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"DivideI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":451,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":11}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"DivideI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":472,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":19}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"AddI\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":477,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":15}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"xs\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":21},\"Item2\":{\"Line\":1,\"Column\":33}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":17},\"Item2\":{\"Line\":1,\"Column\":19}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"ys\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":39},\"Item2\":{\"Line\":1,\"Column\":51}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":35},\"Item2\":{\"Line\":1,\"Column\":37}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"AddI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":477,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":15}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"AddI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":477,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":63},\"Item2\":{\"Line\":1,\"Column\":72}},\"Documentation\":[\"automatically generated QsAdjoint specialization for ContinuedFractions.AddI\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"AddI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":477,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":63},\"Item2\":{\"Line\":1,\"Column\":72}},\"Documentation\":[\"automatically generated QsControlled specialization for ContinuedFractions.AddI\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"AddI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":477,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":63},\"Item2\":{\"Line\":1,\"Column\":72}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for ContinuedFractions.AddI\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"CompareGTI\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":493,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":21}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"xs\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":27},\"Item2\":{\"Line\":1,\"Column\":39}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":23},\"Item2\":{\"Line\":1,\"Column\":25}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"ys\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":45},\"Item2\":{\"Line\":1,\"Column\":57}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":41},\"Item2\":{\"Line\":1,\"Column\":43}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"result\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":25},\"Item2\":{\"Line\":2,\"Column\":31}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"CompareGTI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":493,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":21}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"CompareGTI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":493,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":2,\"Column\":50},\"Item2\":{\"Line\":2,\"Column\":59}},\"Documentation\":[\"automatically generated QsAdjoint specialization for ContinuedFractions.CompareGTI\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"CompareGTI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":493,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":2,\"Column\":50},\"Item2\":{\"Line\":2,\"Column\":59}},\"Documentation\":[\"automatically generated QsControlled specialization for ContinuedFractions.CompareGTI\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"CompareGTI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":493,\"Item2\":0},\"HeaderRange\":{\"Item1\":{\"Line\":2,\"Column\":50},\"Item2\":{\"Line\":2,\"Column\":59}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for ContinuedFractions.CompareGTI\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"MultiplyI\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":498,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"xs\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":26},\"Item2\":{\"Line\":1,\"Column\":38}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":22},\"Item2\":{\"Line\":1,\"Column\":24}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"ys\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":44},\"Item2\":{\"Line\":1,\"Column\":56}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":40},\"Item2\":{\"Line\":1,\"Column\":42}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"result\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":2,\"Column\":33},\"Item2\":{\"Line\":2,\"Column\":45}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":25},\"Item2\":{\"Line\":2,\"Column\":31}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"MultiplyI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":500,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":5}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"MultiplyI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":530,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":8}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"MultiplyI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":513,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":11}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"MultiplyI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":531,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":19}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"SquareI\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":536,\"Item2\":0},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"xs\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":24},\"Item2\":{\"Line\":1,\"Column\":36}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":20},\"Item2\":{\"Line\":1,\"Column\":22}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"result\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":46},\"Item2\":{\"Line\":1,\"Column\":58}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":38},\"Item2\":{\"Line\":1,\"Column\":44}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]},{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"LittleEndian\",\"Range\":{\"Case\":\"Null\"}}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"SquareI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":537,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":5}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"SquareI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":556,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":8}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"SquareI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":540,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":11}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractions\",\"Name\":\"SquareI\"},\"Attributes\":[],\"SourceFile\":\"/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs\",\"Position\":{\"Item1\":557,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":19}},\"Documentation\":[]}")]
#line hidden
namespace ContinuedFractions
{
    public class SignedLittleEndian : UDTBase<Microsoft.Quantum.Arithmetic.LittleEndian>, IApplyData
    {
        public SignedLittleEndian() : base(default(Microsoft.Quantum.Arithmetic.LittleEndian))
        {
        }

        public SignedLittleEndian(Microsoft.Quantum.Arithmetic.LittleEndian data) : base(data)
        {
        }

        System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
        {
            get
            {
                return ((IApplyData)Data?.Data)?.Qubits;
            }
        }

        public void Deconstruct()
        {
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.Body, 24, 31)]
    public partial class Testing_in_Superposition : Operation<Int64, QVoid>, ICallable
    {
        public Testing_in_Superposition(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "Testing_in_Superposition";
        String ICallable.FullName => "ContinuedFractions.Testing_in_Superposition";
        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), Int64> CFC
        {
            get;
            set;
        }

        public override Func<Int64, QVoid> Body => (__in__) =>
        {
            var bitSize = __in__;
#line hidden
            {
#line 25 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                var (p,m,u) = (Allocate.Apply(bitSize), Allocate.Apply(bitSize), Allocate.Apply(bitSize));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 25 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    var res = CFC.Apply((p, m, u, false));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(p);
#line hidden
                        Release.Apply(m);
#line hidden
                        Release.Apply(u);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.CFC = this.Factory.Get<ICallable<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), Int64>>(typeof(CFC));
        }

        public override IApplyData __dataIn(Int64 data) => new QTuple<Int64>(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Int64 bitSize)
        {
            return __m__.Run<Testing_in_Superposition, Int64, QVoid>(bitSize);
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.Body, 31, 60)]
    public partial class Testing_with_Toffoli : Operation<(Int64,Int64,Int64,Int64,Boolean), (Int64,System.Numerics.BigInteger)>, ICallable
    {
        public Testing_with_Toffoli(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64,Int64,Int64,Boolean)>, IApplyData
        {
            public In((Int64,Int64,Int64,Int64,Boolean) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        public class Out : QTuple<(Int64,System.Numerics.BigInteger)>, IApplyData
        {
            public Out((Int64,System.Numerics.BigInteger) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "Testing_with_Toffoli";
        String ICallable.FullName => "ContinuedFractions.Testing_with_Toffoli";
        protected ICallable<(Microsoft.Quantum.Math.BigFraction,System.Numerics.BigInteger), Microsoft.Quantum.Math.BigFraction> MicrosoftQuantumMathContinuedFractionConvergentL
        {
            get;
            set;
        }

        protected ICallable<(System.Numerics.BigInteger,System.Numerics.BigInteger), Microsoft.Quantum.Math.BigFraction> MicrosoftQuantumMathBigFraction
        {
            get;
            set;
        }

        protected ICallable<Int64, System.Numerics.BigInteger> MicrosoftQuantumConvertIntAsBigInt
        {
            get;
            set;
        }

        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64), IQArray<Boolean>> MicrosoftQuantumConvertIntAsBoolArray
        {
            get;
            set;
        }

        protected ICallable Length
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), Int64> CFC
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> ResetAll
        {
            get;
            set;
        }

        public override Func<(Int64,Int64,Int64,Int64,Boolean), (Int64,System.Numerics.BigInteger)> Body => (__in__) =>
        {
            var (n,mI,resI,bitSize,adj) = __in__;
#line 32 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var res = 0L;
#line 35 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var approximatedFraction = MicrosoftQuantumMathContinuedFractionConvergentL.Apply((new Microsoft.Quantum.Math.BigFraction((MicrosoftQuantumConvertIntAsBigInt.Apply(n), MicrosoftQuantumConvertIntAsBigInt.Apply(2L.Pow(bitSize)))), MicrosoftQuantumConvertIntAsBigInt.Apply(mI)));
#line 36 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var (approximatedNumerator,approximatedDenominator) = approximatedFraction.Data;
#line hidden
            {
#line 39 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                var (p,m,u) = (Allocate.Apply(bitSize), Allocate.Apply(bitSize), Allocate.Apply(bitSize));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 41 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    var nArr = (IQArray<Boolean>)MicrosoftQuantumConvertIntAsBoolArray.Apply((n, bitSize));
#line 42 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    var mArr = (IQArray<Boolean>)MicrosoftQuantumConvertIntAsBoolArray.Apply((mI, bitSize));
#line 43 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    var resArr = (IQArray<Boolean>)MicrosoftQuantumConvertIntAsBoolArray.Apply((resI, bitSize));
#line 45 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    foreach (var t in new QRange(0L, (nArr.Length - 1L)))
#line hidden
                    {
#line 46 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                        if ((nArr[t] == true))
                        {
#line 46 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                            MicrosoftQuantumIntrinsicX.Apply(u[t]);
                        }

#line 47 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                        if ((mArr[t] == true))
                        {
#line 47 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                            MicrosoftQuantumIntrinsicX.Apply(m[t]);
                        }

#line 48 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                        if ((resArr[t] == true))
                        {
#line 48 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                            MicrosoftQuantumIntrinsicX.Apply(p[t]);
                        }
                    }

#line 51 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    res = CFC.Apply((p, m, u, adj));
#line 53 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    ResetAll.Apply(QArray<Qubit>.Add(QArray<Qubit>.Add(p, m), u));
#line 54 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    return (res, approximatedDenominator);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(p);
#line hidden
                        Release.Apply(m);
#line hidden
                        Release.Apply(u);
                    }
                }
            }
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumMathContinuedFractionConvergentL = this.Factory.Get<ICallable<(Microsoft.Quantum.Math.BigFraction,System.Numerics.BigInteger), Microsoft.Quantum.Math.BigFraction>>(typeof(Microsoft.Quantum.Math.ContinuedFractionConvergentL));
            this.MicrosoftQuantumMathBigFraction = this.Factory.Get<ICallable<(System.Numerics.BigInteger,System.Numerics.BigInteger), Microsoft.Quantum.Math.BigFraction>>(typeof(Microsoft.Quantum.Math.BigFraction));
            this.MicrosoftQuantumConvertIntAsBigInt = this.Factory.Get<ICallable<Int64, System.Numerics.BigInteger>>(typeof(Microsoft.Quantum.Convert.IntAsBigInt));
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MicrosoftQuantumConvertIntAsBoolArray = this.Factory.Get<ICallable<(Int64,Int64), IQArray<Boolean>>>(typeof(Microsoft.Quantum.Convert.IntAsBoolArray));
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
            this.CFC = this.Factory.Get<ICallable<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), Int64>>(typeof(CFC));
            this.ResetAll = this.Factory.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.ResetAll));
        }

        public override IApplyData __dataIn((Int64,Int64,Int64,Int64,Boolean) data) => new In(data);
        public override IApplyData __dataOut((Int64,System.Numerics.BigInteger) data) => new Out(data);
        public static System.Threading.Tasks.Task<(Int64,System.Numerics.BigInteger)> Run(IOperationFactory __m__, Int64 n, Int64 mI, Int64 resI, Int64 bitSize, Boolean adj)
        {
            return __m__.Run<Testing_with_Toffoli, (Int64,Int64,Int64,Int64,Boolean), (Int64,System.Numerics.BigInteger)>((n, mI, resI, bitSize, adj));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.Body, 60, 72)]
    public partial class CFC : Operation<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), Int64>, ICallable
    {
        public CFC(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean)>, IApplyData
        {
            public In((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3)?.Qubits);
                }
            }
        }

        String ICallable.Name => "CFC";
        String ICallable.FullName => "ContinuedFractions.CFC";
        protected ICallable<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), QVoid> CFMainNew
        {
            get;
            set;
        }

        protected ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64> MicrosoftQuantumArithmeticMeasureInteger
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), Int64> Body => (__in__) =>
        {
            var (p,m,u,adj) = __in__;
#line 61 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var result = 0L;
#line 63 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            CFMainNew.Apply((p, m, u, adj));
#line 65 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            result = MicrosoftQuantumArithmeticMeasureInteger.Apply(new Microsoft.Quantum.Arithmetic.LittleEndian(p));
#line 68 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            return result;
        }

        ;
        public override void Init()
        {
            this.CFMainNew = this.Factory.Get<ICallable<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), QVoid>>(typeof(CFMainNew));
            this.MicrosoftQuantumArithmeticMeasureInteger = this.Factory.Get<ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64>>(typeof(Microsoft.Quantum.Arithmetic.MeasureInteger));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
        }

        public override IApplyData __dataIn((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean) data) => new In(data);
        public override IApplyData __dataOut(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__, IQArray<Qubit> p, IQArray<Qubit> m, IQArray<Qubit> u, Boolean adj)
        {
            return __m__.Run<CFC, (IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), Int64>((p, m, u, adj));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.Body, 72, 101)]
    public partial class CFMainNew : Operation<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), QVoid>, ICallable
    {
        public CFMainNew(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean)>, IApplyData
        {
            public In((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3)?.Qubits);
                }
            }
        }

        String ICallable.Name => "CFMainNew";
        String ICallable.FullName => "ContinuedFractions.CFMainNew";
        protected ICallable Length
        {
            get;
            set;
        }

        protected ICallable<Double, Int64> MicrosoftQuantumMathCeiling
        {
            get;
            set;
        }

        protected ICallable<Double, Double> MicrosoftQuantumMathLg
        {
            get;
            set;
        }

        protected ICallable<Int64, Double> MicrosoftQuantumConvertIntAsDouble
        {
            get;
            set;
        }

        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), IQArray<Int64>> Pebble
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), IQArray<Int64>> Unpebble
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), QVoid> Body => (__in__) =>
        {
            var (p,m,u,adj) = __in__;
#line 73 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var len = u.Length;
#line 75 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var numAnc = (MicrosoftQuantumMathCeiling.Apply(MicrosoftQuantumMathLg.Apply((1.44D * MicrosoftQuantumConvertIntAsDouble.Apply((len + 1L))))) + 1L);
#line 78 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var arr = QArray<Int64>.Create((numAnc + 2L));
#line 80 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            arr.Modify(0L, 1L);
#line 81 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            numAnc = (numAnc + 1L);
#line hidden
            {
#line 90 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                var (r1,r2,s1,s2,quo,qTs2,C1,anc1,anc2) = (Allocate.Apply(((len + 1L) * numAnc)), Allocate.Apply(((len + 1L) * numAnc)), Allocate.Apply(((len + 2L) * numAnc)), Allocate.Apply(((len + 2L) * numAnc)), Allocate.Apply(((len + 1L) * numAnc)), Allocate.Apply((((2L * (len + 1L)) + 1L) * numAnc)), Allocate.Apply(numAnc), Allocate.Apply(numAnc), Allocate.Apply(numAnc));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 91 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    numAnc = (numAnc - 1L);
#line 94 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    arr.Modify(new QRange(0L, (arr.Length - 1L)), Pebble.Apply((1L, numAnc, arr?.Copy(), p, m, u, r1, r2, s1, s2, quo, qTs2, C1, anc1, anc2, adj)));
#line 95 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    arr.Modify(new QRange(0L, (arr.Length - 1L)), Unpebble.Apply((1L, numAnc, arr?.Copy(), p, m, u, r1, r2, s1, s2, quo, qTs2, C1, anc1, anc2, adj)));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(r1);
#line hidden
                        Release.Apply(r2);
#line hidden
                        Release.Apply(s1);
#line hidden
                        Release.Apply(s2);
#line hidden
                        Release.Apply(quo);
#line hidden
                        Release.Apply(qTs2);
#line hidden
                        Release.Apply(C1);
#line hidden
                        Release.Apply(anc1);
#line hidden
                        Release.Apply(anc2);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumMathCeiling = this.Factory.Get<ICallable<Double, Int64>>(typeof(Microsoft.Quantum.Math.Ceiling));
            this.MicrosoftQuantumMathLg = this.Factory.Get<ICallable<Double, Double>>(typeof(Microsoft.Quantum.Math.Lg));
            this.MicrosoftQuantumConvertIntAsDouble = this.Factory.Get<ICallable<Int64, Double>>(typeof(Microsoft.Quantum.Convert.IntAsDouble));
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.Pebble = this.Factory.Get<ICallable<(Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), IQArray<Int64>>>(typeof(Pebble));
            this.Unpebble = this.Factory.Get<ICallable<(Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), IQArray<Int64>>>(typeof(Unpebble));
        }

        public override IApplyData __dataIn((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> p, IQArray<Qubit> m, IQArray<Qubit> u, Boolean adj)
        {
            return __m__.Run<CFMainNew, (IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), QVoid>((p, m, u, adj));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.Body, 101, 119)]
    public partial class Pebble : Operation<(Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), IQArray<Int64>>, ICallable
    {
        public Pebble(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean)>, IApplyData
        {
            public In((Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item4)?.Qubits, ((IApplyData)Data.Item5)?.Qubits, ((IApplyData)Data.Item6)?.Qubits, ((IApplyData)Data.Item7)?.Qubits, ((IApplyData)Data.Item8)?.Qubits, ((IApplyData)Data.Item9)?.Qubits, ((IApplyData)Data.Item10)?.Qubits, ((IApplyData)Data.Item11)?.Qubits, ((IApplyData)Data.Item12)?.Qubits, ((IApplyData)Data.Item13)?.Qubits, ((IApplyData)Data.Item14)?.Qubits, ((IApplyData)Data.Item15)?.Qubits);
                }
            }
        }

        String ICallable.Name => "Pebble";
        String ICallable.FullName => "ContinuedFractions.Pebble";
        protected ICallable Length
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64), Int64> MicrosoftQuantumMathPowI
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), IQArray<Int64>> self
        {
            get;
            set;
        }

        protected ICallable<(Int64,IQArray<Int64>,Int64,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), IQArray<Int64>> CFStep
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), IQArray<Int64>> Unpebble
        {
            get;
            set;
        }

        public override Func<(Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), IQArray<Int64>> Body => (__in__) =>
        {
            var (s,n,arr,p,m,u,r1,r2,s1,s2,quo,qTs2,C1,anc1,anc2,adj) = __in__;
#line 103 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var narr = QArray<Int64>.Create(0L);
#line 104 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            foreach (var i in new QRange(0L, (arr.Length - 1L)))
#line hidden
            {
#line 105 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                narr = QArray<Int64>.Add(narr, new QArray<Int64>(arr[i]));
            }

#line 107 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            if ((n != 0L))
            {
#line 108 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                var t = (s + MicrosoftQuantumMathPowI.Apply((2L, (n - 1L))));
#line 109 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                narr.Modify(new QRange(0L, (narr.Length - 1L)), self.Apply<IQArray<Int64>>((s, (n - 1L), narr?.Copy(), p, m, u, r1, r2, s1, s2, quo, qTs2, C1, anc1, anc2, adj)));
#line 111 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                narr.Modify(new QRange(0L, (narr.Length - 1L)), CFStep.Apply((t, narr?.Copy(), 1L, p, m, u, r1, r2, s1, s2, quo, qTs2, C1, anc1, anc2, adj)));
#line 112 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                narr.Modify(new QRange(0L, (narr.Length - 1L)), Unpebble.Apply((s, (n - 1L), narr?.Copy(), p, m, u, r1, r2, s1, s2, quo, qTs2, C1, anc1, anc2, adj)));
#line 113 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                narr.Modify(new QRange(0L, (narr.Length - 1L)), self.Apply<IQArray<Int64>>((t, (n - 1L), narr?.Copy(), p, m, u, r1, r2, s1, s2, quo, qTs2, C1, anc1, anc2, adj)));
            }

#line 116 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            return narr;
        }

        ;
        public override void Init()
        {
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumMathPowI = this.Factory.Get<ICallable<(Int64,Int64), Int64>>(typeof(Microsoft.Quantum.Math.PowI));
            this.self = this;
            this.CFStep = this.Factory.Get<ICallable<(Int64,IQArray<Int64>,Int64,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), IQArray<Int64>>>(typeof(CFStep));
            this.Unpebble = this.Factory.Get<ICallable<(Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), IQArray<Int64>>>(typeof(Unpebble));
        }

        public override IApplyData __dataIn((Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean) data) => new In(data);
        public override IApplyData __dataOut(IQArray<Int64> data) => data;
        public static System.Threading.Tasks.Task<IQArray<Int64>> Run(IOperationFactory __m__, Int64 s, Int64 n, IQArray<Int64> arr, IQArray<Qubit> p, IQArray<Qubit> m, IQArray<Qubit> u, IQArray<Qubit> r1, IQArray<Qubit> r2, IQArray<Qubit> s1, IQArray<Qubit> s2, IQArray<Qubit> quo, IQArray<Qubit> qTs2, IQArray<Qubit> C1, IQArray<Qubit> anc1, IQArray<Qubit> anc2, Boolean adj)
        {
            return __m__.Run<Pebble, (Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), IQArray<Int64>>((s, n, arr, p, m, u, r1, r2, s1, s2, quo, qTs2, C1, anc1, anc2, adj));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.Body, 119, 137)]
    public partial class Unpebble : Operation<(Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), IQArray<Int64>>, ICallable
    {
        public Unpebble(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean)>, IApplyData
        {
            public In((Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item4)?.Qubits, ((IApplyData)Data.Item5)?.Qubits, ((IApplyData)Data.Item6)?.Qubits, ((IApplyData)Data.Item7)?.Qubits, ((IApplyData)Data.Item8)?.Qubits, ((IApplyData)Data.Item9)?.Qubits, ((IApplyData)Data.Item10)?.Qubits, ((IApplyData)Data.Item11)?.Qubits, ((IApplyData)Data.Item12)?.Qubits, ((IApplyData)Data.Item13)?.Qubits, ((IApplyData)Data.Item14)?.Qubits, ((IApplyData)Data.Item15)?.Qubits);
                }
            }
        }

        String ICallable.Name => "Unpebble";
        String ICallable.FullName => "ContinuedFractions.Unpebble";
        protected ICallable Length
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64), Int64> MicrosoftQuantumMathPowI
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), IQArray<Int64>> self
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), IQArray<Int64>> Pebble
        {
            get;
            set;
        }

        protected ICallable<(Int64,IQArray<Int64>,Int64,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), IQArray<Int64>> CFStep
        {
            get;
            set;
        }

        public override Func<(Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), IQArray<Int64>> Body => (__in__) =>
        {
            var (s,n,arr,p,m,u,r1,r2,s1,s2,quo,qTs2,C1,anc1,anc2,adj) = __in__;
#line 120 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var narr = QArray<Int64>.Create(0L);
#line 121 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            foreach (var i in new QRange(0L, (arr.Length - 1L)))
#line hidden
            {
#line 122 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                narr = QArray<Int64>.Add(narr, new QArray<Int64>(arr[i]));
            }

#line 124 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            if ((n != 0L))
            {
#line 125 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                var t = (s + MicrosoftQuantumMathPowI.Apply((2L, (n - 1L))));
#line 126 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                narr.Modify(new QRange(0L, (narr.Length - 1L)), self.Apply<IQArray<Int64>>((t, (n - 1L), narr?.Copy(), p, m, u, r1, r2, s1, s2, quo, qTs2, C1, anc1, anc2, adj)));
#line 127 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                narr.Modify(new QRange(0L, (narr.Length - 1L)), Pebble.Apply((s, (n - 1L), narr?.Copy(), p, m, u, r1, r2, s1, s2, quo, qTs2, C1, anc1, anc2, adj)));
#line 129 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                narr.Modify(new QRange(0L, (narr.Length - 1L)), CFStep.Apply((t, narr?.Copy(), 0L, p, m, u, r1, r2, s1, s2, quo, qTs2, C1, anc1, anc2, adj)));
#line 130 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                narr.Modify(new QRange(0L, (narr.Length - 1L)), self.Apply<IQArray<Int64>>((s, (n - 1L), narr?.Copy(), p, m, u, r1, r2, s1, s2, quo, qTs2, C1, anc1, anc2, adj)));
            }

#line 132 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            return narr;
        }

        ;
        public override void Init()
        {
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumMathPowI = this.Factory.Get<ICallable<(Int64,Int64), Int64>>(typeof(Microsoft.Quantum.Math.PowI));
            this.self = this;
            this.Pebble = this.Factory.Get<ICallable<(Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), IQArray<Int64>>>(typeof(Pebble));
            this.CFStep = this.Factory.Get<ICallable<(Int64,IQArray<Int64>,Int64,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), IQArray<Int64>>>(typeof(CFStep));
        }

        public override IApplyData __dataIn((Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean) data) => new In(data);
        public override IApplyData __dataOut(IQArray<Int64> data) => data;
        public static System.Threading.Tasks.Task<IQArray<Int64>> Run(IOperationFactory __m__, Int64 s, Int64 n, IQArray<Int64> arr, IQArray<Qubit> p, IQArray<Qubit> m, IQArray<Qubit> u, IQArray<Qubit> r1, IQArray<Qubit> r2, IQArray<Qubit> s1, IQArray<Qubit> s2, IQArray<Qubit> quo, IQArray<Qubit> qTs2, IQArray<Qubit> C1, IQArray<Qubit> anc1, IQArray<Qubit> anc2, Boolean adj)
        {
            return __m__.Run<Unpebble, (Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), IQArray<Int64>>((s, n, arr, p, m, u, r1, r2, s1, s2, quo, qTs2, C1, anc1, anc2, adj));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.Body, 137, 247)]
    public partial class CFStep : Operation<(Int64,IQArray<Int64>,Int64,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), IQArray<Int64>>, ICallable
    {
        public CFStep(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,IQArray<Int64>,Int64,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean)>, IApplyData
        {
            public In((Int64,IQArray<Int64>,Int64,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item4)?.Qubits, ((IApplyData)Data.Item5)?.Qubits, ((IApplyData)Data.Item6)?.Qubits, ((IApplyData)Data.Item7)?.Qubits, ((IApplyData)Data.Item8)?.Qubits, ((IApplyData)Data.Item9)?.Qubits, ((IApplyData)Data.Item10)?.Qubits, ((IApplyData)Data.Item11)?.Qubits, ((IApplyData)Data.Item12)?.Qubits, ((IApplyData)Data.Item13)?.Qubits, ((IApplyData)Data.Item14)?.Qubits, ((IApplyData)Data.Item15)?.Qubits);
                }
            }
        }

        String ICallable.Name => "CFStep";
        String ICallable.FullName => "ContinuedFractions.CFStep";
        protected ICallable Length
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> AddI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit)> CFCheck
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit)> CFIteration
        {
            get;
            set;
        }

        protected ICallable<Double, Int64> MicrosoftQuantumMathCeiling
        {
            get;
            set;
        }

        protected ICallable<Int64, Double> MicrosoftQuantumConvertIntAsDouble
        {
            get;
            set;
        }

        protected IControllable<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean)> CFExtractRes
        {
            get;
            set;
        }

        public override Func<(Int64,IQArray<Int64>,Int64,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), IQArray<Int64>> Body => (__in__) =>
        {
            var (t,arr,d,p,m,u,r1,r2,s1,s2,quo,qTs2,C1,anc1,anc2,adj) = __in__;
#line 138 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var narr = QArray<Int64>.Create(0L);
#line 139 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            foreach (var k in new QRange(0L, (arr.Length - 1L)))
#line hidden
            {
#line 140 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                narr = QArray<Int64>.Add(narr, new QArray<Int64>(arr[k]));
            }

#line 144 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var next = 0L;
#line 145 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var curr = 0L;
#line 146 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var len = (u.Length + 1L);
#line 147 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var lens = (len + 1L);
#line 150 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            if (((t == 2L) && (d == 1L)))
            {
#line 151 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                MicrosoftQuantumIntrinsicX.Apply(r2[(len - 1L)]);
#line 152 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                MicrosoftQuantumIntrinsicX.Apply(s1[0L]);
#line 153 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                AddI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(u), new Microsoft.Quantum.Arithmetic.LittleEndian(r1?.Slice(new QRange(0L, (len - 2L))))));
            }

#line 159 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var found = false;
#line 160 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var i = 0L;
#line 161 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            while (true)
            {
#line 162 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                if ((arr[i] == (t - 1L)))
                {
#line 163 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    curr = i;
#line 164 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    found = true;
                }

#line 166 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                i = (i + 1L);
                if ((found == true))
                {
                    break;
                }
                else
                {
                }
            }

#line 169 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            if ((d == 1L))
            {
#line 172 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                found = false;
#line 173 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                i = 0L;
#line 174 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                while (true)
                {
#line 175 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    if ((arr[i] == 0L))
                    {
#line 176 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                        next = i;
#line 177 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                        found = true;
                    }

#line 179 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    i = (i + 1L);
                    if ((found == true))
                    {
                        break;
                    }
                    else
                    {
                    }
                }

#line 182 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                narr.Modify(next, (narr[next] + (narr[curr] + 1L)));
#line 186 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                AddI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(r1?.Slice(new QRange((curr * len), (((curr * len) + len) - 1L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(r1?.Slice(new QRange((next * len), (((next * len) + len) - 1L))))));
#line 187 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                AddI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(r2?.Slice(new QRange((curr * len), (((curr * len) + len) - 1L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(r2?.Slice(new QRange((next * len), (((next * len) + len) - 1L))))));
#line 189 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                AddI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(s1?.Slice(new QRange((curr * lens), (((curr * lens) + lens) - 1L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(s1?.Slice(new QRange((next * lens), (((next * lens) + lens) - 1L))))));
#line 190 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                AddI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(s2?.Slice(new QRange((curr * lens), (((curr * lens) + lens) - 1L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(s2?.Slice(new QRange((next * lens), (((next * lens) + lens) - 1L))))));
#line 193 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                CFCheck.Apply((r2?.Slice(new QRange((next * len), (((next * len) + len) - 1L))), s2?.Slice(new QRange((next * lens), (((next * lens) + lens) - 1L))), m, C1[next]));
#line 194 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                MicrosoftQuantumIntrinsicX.Apply(C1[next]);
#line 195 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                CFIteration.Controlled.Apply((new QArray<Qubit>(C1[next]), (r1?.Slice(new QRange((next * len), (((next * len) + len) - 1L))), r2?.Slice(new QRange((next * len), (((next * len) + len) - 1L))), s1?.Slice(new QRange((next * lens), (((next * lens) + lens) - 1L))), s2?.Slice(new QRange((next * lens), (((next * lens) + lens) - 1L))), quo?.Slice(new QRange((next * len), (((next * len) + len) - 1L))), qTs2?.Slice(new QRange((next * ((2L * len) + 1L)), (((next * ((2L * len) + 1L)) + ((2L * len) + 1L)) - 1L))), anc1[next], anc2[next])));
#line 197 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                if (((MicrosoftQuantumMathCeiling.Apply((1.44D * MicrosoftQuantumConvertIntAsDouble.Apply(len))) <= narr[next]) && (narr[(narr.Length - 1L)] == 0L)))
                {
#line 198 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    CFExtractRes.Apply((p, m, r2?.Slice(new QRange((next * len), (((next * len) + len) - 1L))), s1?.Slice(new QRange((next * lens), (((next * lens) + lens) - 1L))), s2?.Slice(new QRange((next * lens), (((next * lens) + lens) - 1L))), adj));
#line 199 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    narr.Modify((narr.Length - 1L), 1L);
                }
            }

#line 205 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            if ((d == 0L))
            {
#line 207 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                found = false;
#line 208 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                i = 0L;
#line 209 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                while (true)
                {
#line 210 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    if ((arr[i] == t))
                    {
#line 211 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                        next = i;
#line 212 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                        found = true;
                    }

#line 214 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    i = (i + 1L);
                    if ((found == true))
                    {
                        break;
                    }
                    else
                    {
                    }
                }

#line 217 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                CFIteration.Adjoint.Controlled.Apply((new QArray<Qubit>(C1[next]), (r1?.Slice(new QRange((next * len), (((next * len) + len) - 1L))), r2?.Slice(new QRange((next * len), (((next * len) + len) - 1L))), s1?.Slice(new QRange((next * lens), (((next * lens) + lens) - 1L))), s2?.Slice(new QRange((next * lens), (((next * lens) + lens) - 1L))), quo?.Slice(new QRange((next * len), (((next * len) + len) - 1L))), qTs2?.Slice(new QRange((next * ((2L * len) + 1L)), (((next * ((2L * len) + 1L)) + ((2L * len) + 1L)) - 1L))), anc1[next], anc2[next])));
#line 218 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                MicrosoftQuantumIntrinsicX.Apply(C1[next]);
#line 219 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                CFCheck.Adjoint.Apply((r2?.Slice(new QRange((next * len), (((next * len) + len) - 1L))), s2?.Slice(new QRange((next * lens), (((next * lens) + lens) - 1L))), m, C1[next]));
#line 222 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                AddI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(r1?.Slice(new QRange((curr * len), (((curr * len) + len) - 1L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(r1?.Slice(new QRange((next * len), (((next * len) + len) - 1L))))));
#line 223 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                AddI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(r2?.Slice(new QRange((curr * len), (((curr * len) + len) - 1L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(r2?.Slice(new QRange((next * len), (((next * len) + len) - 1L))))));
#line 225 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                AddI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(s1?.Slice(new QRange((curr * lens), (((curr * lens) + lens) - 1L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(s1?.Slice(new QRange((next * lens), (((next * lens) + lens) - 1L))))));
#line 226 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                AddI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(s2?.Slice(new QRange((curr * lens), (((curr * lens) + lens) - 1L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(s2?.Slice(new QRange((next * lens), (((next * lens) + lens) - 1L))))));
#line 229 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                narr.Modify(next, (narr[next] - (narr[curr] + 1L)));
            }

#line 233 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            if (((t == 2L) && (d == 0L)))
            {
#line 234 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                MicrosoftQuantumIntrinsicX.Apply(r2[(len - 1L)]);
#line 235 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                MicrosoftQuantumIntrinsicX.Apply(s1[0L]);
#line 236 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                AddI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(u), new Microsoft.Quantum.Arithmetic.LittleEndian(r1?.Slice(new QRange(0L, (len - 2L))))));
            }

#line 240 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            return narr;
        }

        ;
        public override void Init()
        {
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
            this.AddI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(AddI));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
            this.CFCheck = this.Factory.Get<IUnitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit)>>(typeof(CFCheck));
            this.CFIteration = this.Factory.Get<IUnitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit)>>(typeof(CFIteration));
            this.MicrosoftQuantumMathCeiling = this.Factory.Get<ICallable<Double, Int64>>(typeof(Microsoft.Quantum.Math.Ceiling));
            this.MicrosoftQuantumConvertIntAsDouble = this.Factory.Get<ICallable<Int64, Double>>(typeof(Microsoft.Quantum.Convert.IntAsDouble));
            this.CFExtractRes = this.Factory.Get<IControllable<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean)>>(typeof(CFExtractRes));
        }

        public override IApplyData __dataIn((Int64,IQArray<Int64>,Int64,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean) data) => new In(data);
        public override IApplyData __dataOut(IQArray<Int64> data) => data;
        public static System.Threading.Tasks.Task<IQArray<Int64>> Run(IOperationFactory __m__, Int64 t, IQArray<Int64> arr, Int64 d, IQArray<Qubit> p, IQArray<Qubit> m, IQArray<Qubit> u, IQArray<Qubit> r1, IQArray<Qubit> r2, IQArray<Qubit> s1, IQArray<Qubit> s2, IQArray<Qubit> quo, IQArray<Qubit> qTs2, IQArray<Qubit> C1, IQArray<Qubit> anc1, IQArray<Qubit> anc2, Boolean adj)
        {
            return __m__.Run<CFStep, (Int64,IQArray<Int64>,Int64,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), IQArray<Int64>>((t, arr, d, p, m, u, r1, r2, s1, s2, quo, qTs2, C1, anc1, anc2, adj));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.Body, 248, 276)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.Controlled, 276, 308)]
    public partial class CFExtractRes : Controllable<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean)>, ICallable
    {
        public CFExtractRes(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean)>, IApplyData
        {
            public In((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3)?.Qubits, ((IApplyData)Data.Item4)?.Qubits, ((IApplyData)Data.Item5)?.Qubits);
                }
            }
        }

        String ICallable.Name => "CFExtractRes";
        String ICallable.FullName => "ContinuedFractions.CFExtractRes";
        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected IAdjointable MicrosoftQuantumCanonApplyToEachA
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)> CompareGTI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        protected ICallable Length
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> AddI
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), QVoid> Body => (__in__) =>
        {
            var (res,m,r2,s1,s2,adj) = __in__;
#line hidden
            {
#line 249 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                var (c1,c2,c3,mPad) = (Allocate.Apply(), Allocate.Apply(), Allocate.Apply(), Allocate.Apply());
#line hidden
                bool __arg1__ = true;
                try
                {
#line 250 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, r2));
#line 251 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Controlled.Apply((r2, c1));
#line 253 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    CompareGTI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(s2?.Slice(new QRange(0L, (s2.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(m, new QArray<Qubit>(mPad))), c2));
#line 254 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(c2);
#line 256 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(c1, c2), c3));
#line 257 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(c3);
#line 259 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    if ((adj == false))
                    {
#line 260 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                        AddI.Controlled.Apply((new QArray<Qubit>(c1, c2), (new Microsoft.Quantum.Arithmetic.LittleEndian(s2?.Slice(new QRange(0L, (s2.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(res, new QArray<Qubit>(mPad))))));
#line 261 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                        AddI.Controlled.Apply((new QArray<Qubit>(c3), (new Microsoft.Quantum.Arithmetic.LittleEndian(s1?.Slice(new QRange(0L, (s1.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(res, new QArray<Qubit>(mPad))))));
                    }

#line 263 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    if ((adj == true))
                    {
#line 264 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                        AddI.Controlled.Adjoint.Apply((new QArray<Qubit>(c1, c2), (new Microsoft.Quantum.Arithmetic.LittleEndian(s2?.Slice(new QRange(0L, (s2.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(res, new QArray<Qubit>(mPad))))));
#line 265 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                        AddI.Controlled.Adjoint.Apply((new QArray<Qubit>(c3), (new Microsoft.Quantum.Arithmetic.LittleEndian(s1?.Slice(new QRange(0L, (s1.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(res, new QArray<Qubit>(mPad))))));
                    }

#line 267 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(c3);
#line 268 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(c1, c2), c3));
#line 269 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(c2);
#line 270 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    CompareGTI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(s2?.Slice(new QRange(0L, (s2.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(m, new QArray<Qubit>(mPad))), c2));
#line 272 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Controlled.Apply((r2, c1));
#line 273 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, r2));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(c1);
#line hidden
                        Release.Apply(c2);
#line hidden
                        Release.Apply(c3);
#line hidden
                        Release.Apply(mPad);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean)), QVoid> ControlledBody => (__in__) =>
        {
            var (cs,(res,m,r2,s1,s2,adj)) = __in__;
#line hidden
            {
#line 277 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                var (c1,c2,c3,mPad) = (Allocate.Apply(), Allocate.Apply(), Allocate.Apply(), Allocate.Apply());
#line hidden
                bool __arg1__ = true;
                try
                {
#line 278 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, r2));
#line 279 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Controlled.Apply((r2, c1));
#line 281 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    CompareGTI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(s2?.Slice(new QRange(0L, (s2.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(m, new QArray<Qubit>(mPad))), c2));
#line 282 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(c2);
#line 284 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(c1, c2), c3));
#line 285 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(c3);
#line 287 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    AddI.Controlled.Apply((new QArray<Qubit>(c1, c2), (new Microsoft.Quantum.Arithmetic.LittleEndian(s2?.Slice(new QRange(0L, (s2.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(res, new QArray<Qubit>(mPad))))));
#line 289 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    AddI.Controlled.Apply((new QArray<Qubit>(c3), (new Microsoft.Quantum.Arithmetic.LittleEndian(s1?.Slice(new QRange(0L, (s1.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(res, new QArray<Qubit>(mPad))))));
#line 291 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(c3);
#line 292 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(c1, c2), c3));
#line 293 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(c2);
#line 294 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    CompareGTI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(s2?.Slice(new QRange(0L, (s2.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(m, new QArray<Qubit>(mPad))), c2));
#line 296 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Controlled.Apply((r2, c1));
#line 297 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, r2));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(c1);
#line hidden
                        Release.Apply(c2);
#line hidden
                        Release.Apply(c3);
#line hidden
                        Release.Apply(mPad);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MicrosoftQuantumCanonApplyToEachA = this.Factory.Get<IAdjointable>(typeof(Microsoft.Quantum.Canon.ApplyToEachA<>));
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
            this.CompareGTI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)>>(typeof(CompareGTI));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.AddI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(AddI));
        }

        public override IApplyData __dataIn((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> res, IQArray<Qubit> m, IQArray<Qubit> r2, IQArray<Qubit> s1, IQArray<Qubit> s2, Boolean adj)
        {
            return __m__.Run<CFExtractRes, (IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), QVoid>((res, m, r2, s1, s2, adj));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.Body, 308, 336)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.Adjoint, 308, 336)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.Controlled, 308, 336)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.ControlledAdjoint, 308, 336)]
    public partial class CFIteration : Unitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit)>, ICallable
    {
        public CFIteration(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit)>, IApplyData
        {
            public In((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3)?.Qubits, ((IApplyData)Data.Item4)?.Qubits, ((IApplyData)Data.Item5)?.Qubits, ((IApplyData)Data.Item6)?.Qubits, ((IApplyData)Data.Item7)?.Qubits, ((IApplyData)Data.Item8)?.Qubits);
                }
            }
        }

        String ICallable.Name => "CFIteration";
        String ICallable.FullName => "ContinuedFractions.CFIteration";
        protected ICallable Length
        {
            get;
            set;
        }

        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> DivideI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> MicrosoftQuantumIntrinsicSWAP
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)> SignedMultiply
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit)> SignedSubtract
        {
            get;
            set;
        }

        protected ICallable<QRange, QRange> RangeReverse
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit), QVoid> Body => (__in__) =>
        {
            var (r1,r2,s1,s2,quo,qTs2,anc1,anc2) = __in__;
#line 310 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var len = r1.Length;
#line hidden
            {
#line 311 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                var (s2Pad,quoS) = (Allocate.Apply((len + 1L)), Allocate.Apply());
#line hidden
                bool __arg1__ = true;
                try
                {
#line 314 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    DivideI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(r1), new Microsoft.Quantum.Arithmetic.LittleEndian(r2), new Microsoft.Quantum.Arithmetic.LittleEndian(quo)));
#line 316 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    foreach (var i in new QRange(0L, (len - 1L)))
#line hidden
                    {
#line 317 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                        MicrosoftQuantumIntrinsicSWAP.Apply((r1[i], r2[i]));
                    }

#line 320 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    SignedMultiply.Apply((s2, QArray<Qubit>.Add(quo, new QArray<Qubit>(quoS)), qTs2));
#line 322 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    foreach (var i in new QRange(0L, (s1.Length - 1L)))
#line hidden
                    {
#line 323 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                        MicrosoftQuantumIntrinsicSWAP.Apply((s1[i], s2[i]));
                    }

#line 326 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    SignedSubtract.Apply((QArray<Qubit>.Add(QArray<Qubit>.Add(s2?.Slice(new QRange(0L, (s2.Length - 2L))), s2Pad), new QArray<Qubit>(s2[(s2.Length - 1L)])), qTs2, anc1, anc2));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(s2Pad);
#line hidden
                        Release.Apply(quoS);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit), QVoid> AdjointBody => (__in__) =>
        {
            var (r1,r2,s1,s2,quo,qTs2,anc1,anc2) = __in__;
#line 308 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var __qsVar0__len__ = r1.Length;
#line 308 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            {
#line 308 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                var (__qsVar1__s2Pad__,__qsVar2__quoS__) = (Allocate.Apply((__qsVar0__len__ + 1L)), Allocate.Apply());
#line hidden
                bool __arg1__ = true;
                try
                {
#line 308 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    SignedSubtract.Adjoint.Apply((QArray<Qubit>.Add(QArray<Qubit>.Add(s2?.Slice(new QRange(0L, (s2.Length - 2L))), __qsVar1__s2Pad__), new QArray<Qubit>(s2[(s2.Length - 1L)])), qTs2, anc1, anc2));
#line 308 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    foreach (var __qsVar4__i__ in RangeReverse.Apply(new QRange(0L, (s1.Length - 1L))))
#line hidden
                    {
#line 308 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                        MicrosoftQuantumIntrinsicSWAP.Adjoint.Apply((s1[__qsVar4__i__], s2[__qsVar4__i__]));
                    }

#line 308 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    SignedMultiply.Adjoint.Apply((s2, QArray<Qubit>.Add(quo, new QArray<Qubit>(__qsVar2__quoS__)), qTs2));
#line 308 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    foreach (var __qsVar3__i__ in RangeReverse.Apply(new QRange(0L, (__qsVar0__len__ - 1L))))
#line hidden
                    {
#line 308 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                        MicrosoftQuantumIntrinsicSWAP.Adjoint.Apply((r1[__qsVar3__i__], r2[__qsVar3__i__]));
                    }

#line 308 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    DivideI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(r1), new Microsoft.Quantum.Arithmetic.LittleEndian(r2), new Microsoft.Quantum.Arithmetic.LittleEndian(quo)));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(__qsVar1__s2Pad__);
#line hidden
                        Release.Apply(__qsVar2__quoS__);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit)), QVoid> ControlledBody => (__in__) =>
        {
            var (__controlQubits__,(r1,r2,s1,s2,quo,qTs2,anc1,anc2)) = __in__;
#line 308 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var len = r1.Length;
#line 308 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            {
#line 308 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                var (s2Pad,quoS) = (Allocate.Apply((len + 1L)), Allocate.Apply());
#line hidden
                bool __arg1__ = true;
                try
                {
#line 308 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    DivideI.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(r1), new Microsoft.Quantum.Arithmetic.LittleEndian(r2), new Microsoft.Quantum.Arithmetic.LittleEndian(quo))));
#line 308 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    foreach (var i in new QRange(0L, (len - 1L)))
#line hidden
                    {
#line 308 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                        MicrosoftQuantumIntrinsicSWAP.Controlled.Apply((__controlQubits__, (r1[i], r2[i])));
                    }

#line 308 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    SignedMultiply.Controlled.Apply((__controlQubits__, (s2, QArray<Qubit>.Add(quo, new QArray<Qubit>(quoS)), qTs2)));
#line 308 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    foreach (var i in new QRange(0L, (s1.Length - 1L)))
#line hidden
                    {
#line 308 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                        MicrosoftQuantumIntrinsicSWAP.Controlled.Apply((__controlQubits__, (s1[i], s2[i])));
                    }

#line 308 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    SignedSubtract.Controlled.Apply((__controlQubits__, (QArray<Qubit>.Add(QArray<Qubit>.Add(s2?.Slice(new QRange(0L, (s2.Length - 2L))), s2Pad), new QArray<Qubit>(s2[(s2.Length - 1L)])), qTs2, anc1, anc2)));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(s2Pad);
#line hidden
                        Release.Apply(quoS);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit)), QVoid> ControlledAdjointBody => (__in__) =>
        {
            var (__controlQubits__,(r1,r2,s1,s2,quo,qTs2,anc1,anc2)) = __in__;
#line 308 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var __qsVar0__len__ = r1.Length;
#line 308 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            {
#line 308 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                var (__qsVar1__s2Pad__,__qsVar2__quoS__) = (Allocate.Apply((__qsVar0__len__ + 1L)), Allocate.Apply());
#line hidden
                bool __arg1__ = true;
                try
                {
#line 308 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    SignedSubtract.Adjoint.Controlled.Apply((__controlQubits__, (QArray<Qubit>.Add(QArray<Qubit>.Add(s2?.Slice(new QRange(0L, (s2.Length - 2L))), __qsVar1__s2Pad__), new QArray<Qubit>(s2[(s2.Length - 1L)])), qTs2, anc1, anc2)));
#line 308 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    foreach (var __qsVar4__i__ in RangeReverse.Apply(new QRange(0L, (s1.Length - 1L))))
#line hidden
                    {
#line 308 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                        MicrosoftQuantumIntrinsicSWAP.Adjoint.Controlled.Apply((__controlQubits__, (s1[__qsVar4__i__], s2[__qsVar4__i__])));
                    }

#line 308 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    SignedMultiply.Adjoint.Controlled.Apply((__controlQubits__, (s2, QArray<Qubit>.Add(quo, new QArray<Qubit>(__qsVar2__quoS__)), qTs2)));
#line 308 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    foreach (var __qsVar3__i__ in RangeReverse.Apply(new QRange(0L, (__qsVar0__len__ - 1L))))
#line hidden
                    {
#line 308 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                        MicrosoftQuantumIntrinsicSWAP.Adjoint.Controlled.Apply((__controlQubits__, (r1[__qsVar3__i__], r2[__qsVar3__i__])));
                    }

#line 308 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    DivideI.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(r1), new Microsoft.Quantum.Arithmetic.LittleEndian(r2), new Microsoft.Quantum.Arithmetic.LittleEndian(quo))));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(__qsVar1__s2Pad__);
#line hidden
                        Release.Apply(__qsVar2__quoS__);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.DivideI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(DivideI));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
            this.MicrosoftQuantumIntrinsicSWAP = this.Factory.Get<IUnitary<(Qubit,Qubit)>>(typeof(Microsoft.Quantum.Intrinsic.SWAP));
            this.SignedMultiply = this.Factory.Get<IUnitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)>>(typeof(SignedMultiply));
            this.SignedSubtract = this.Factory.Get<IUnitary<(IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit)>>(typeof(SignedSubtract));
            this.RangeReverse = this.Factory.Get<ICallable<QRange, QRange>>(typeof(Microsoft.Quantum.Core.RangeReverse));
        }

        public override IApplyData __dataIn((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> r1, IQArray<Qubit> r2, IQArray<Qubit> s1, IQArray<Qubit> s2, IQArray<Qubit> quo, IQArray<Qubit> qTs2, Qubit anc1, Qubit anc2)
        {
            return __m__.Run<CFIteration, (IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit), QVoid>((r1, r2, s1, s2, quo, qTs2, anc1, anc2));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.Body, 337, 363)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.Adjoint, 336, 337)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.Controlled, 363, 394)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.ControlledAdjoint, 336, 337)]
    public partial class CFCheck : Unitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit)>, ICallable
    {
        public CFCheck(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit)>, IApplyData
        {
            public In((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3)?.Qubits, ((IApplyData)Data.Item4)?.Qubits);
                }
            }
        }

        String ICallable.Name => "CFCheck";
        String ICallable.FullName => "ContinuedFractions.CFCheck";
        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)> CompareGTI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        protected ICallable Length
        {
            get;
            set;
        }

        protected IAdjointable MicrosoftQuantumCanonApplyToEachA
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit), QVoid> Body => (__in__) =>
        {
            var (r2,s2,m,C) = __in__;
#line hidden
            {
#line 340 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                var (C2,C3,mPad) = (Allocate.Apply(), Allocate.Apply(), Allocate.Apply());
#line hidden
                bool __arg1__ = true;
                try
                {
#line 342 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    CompareGTI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(s2?.Slice(new QRange(0L, (s2.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(m, new QArray<Qubit>(mPad))), C2));
#line 344 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, r2));
#line 345 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Controlled.Apply((r2, C3));
#line 346 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, r2));
#line 348 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(C2);
#line 349 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(C3);
#line 350 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(C2, C3), C));
#line 351 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(C2);
#line 352 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(C3);
#line 353 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(C);
#line 355 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, r2));
#line 356 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Controlled.Apply((r2, C3));
#line 357 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, r2));
#line 359 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    CompareGTI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(s2?.Slice(new QRange(0L, (s2.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(m, new QArray<Qubit>(mPad))), C2));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(C2);
#line hidden
                        Release.Apply(C3);
#line hidden
                        Release.Apply(mPad);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit), QVoid> AdjointBody => (__in__) =>
        {
            var (r2,s2,m,C) = __in__;
#line 336 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            {
#line 336 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                var (__qsVar0__C2__,__qsVar1__C3__,__qsVar2__mPad__) = (Allocate.Apply(), Allocate.Apply(), Allocate.Apply());
#line hidden
                bool __arg1__ = true;
                try
                {
#line 336 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    CompareGTI.Adjoint.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(s2?.Slice(new QRange(0L, (s2.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(m, new QArray<Qubit>(__qsVar2__mPad__))), __qsVar0__C2__));
#line 336 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumCanonApplyToEachA.Adjoint.Apply((MicrosoftQuantumIntrinsicX, r2));
#line 336 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Controlled.Adjoint.Apply((r2, __qsVar1__C3__));
#line 336 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumCanonApplyToEachA.Adjoint.Apply((MicrosoftQuantumIntrinsicX, r2));
#line 336 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Adjoint.Apply(C);
#line 336 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Adjoint.Apply(__qsVar1__C3__);
#line 336 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Adjoint.Apply(__qsVar0__C2__);
#line 336 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Controlled.Adjoint.Apply((new QArray<Qubit>(__qsVar0__C2__, __qsVar1__C3__), C));
#line 336 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Adjoint.Apply(__qsVar1__C3__);
#line 336 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Adjoint.Apply(__qsVar0__C2__);
#line 336 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumCanonApplyToEachA.Adjoint.Apply((MicrosoftQuantumIntrinsicX, r2));
#line 336 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Controlled.Adjoint.Apply((r2, __qsVar1__C3__));
#line 336 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumCanonApplyToEachA.Adjoint.Apply((MicrosoftQuantumIntrinsicX, r2));
#line 336 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    CompareGTI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(s2?.Slice(new QRange(0L, (s2.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(m, new QArray<Qubit>(__qsVar2__mPad__))), __qsVar0__C2__));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(__qsVar0__C2__);
#line hidden
                        Release.Apply(__qsVar1__C3__);
#line hidden
                        Release.Apply(__qsVar2__mPad__);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit)), QVoid> ControlledBody => (__in__) =>
        {
            var (cs,(r2,s2,m,C)) = __in__;
#line hidden
            {
#line 366 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                var (C2,C3,mPad) = (Allocate.Apply(), Allocate.Apply(), Allocate.Apply());
#line hidden
                bool __arg1__ = true;
                try
                {
#line 368 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    CompareGTI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(s2?.Slice(new QRange(0L, (s2.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(m, new QArray<Qubit>(mPad))), C2));
#line 370 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, r2));
#line 371 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Controlled.Apply((r2, C3));
#line 372 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, r2));
#line 374 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(C2);
#line 375 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(C3);
#line 376 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(C2, C3), C));
#line 377 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(C2);
#line 378 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(C3);
#line 379 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(C);
#line 381 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, r2));
#line 382 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Controlled.Apply((r2, C3));
#line 383 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicX, r2));
#line 385 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    CompareGTI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(s2?.Slice(new QRange(0L, (s2.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(m, new QArray<Qubit>(mPad))), C2));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(C2);
#line hidden
                        Release.Apply(C3);
#line hidden
                        Release.Apply(mPad);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit)), QVoid> ControlledAdjointBody => (__in__) =>
        {
            var (cs,(r2,s2,m,C)) = __in__;
#line 336 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            {
#line 336 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                var (__qsVar0__C2__,__qsVar1__C3__,__qsVar2__mPad__) = (Allocate.Apply(), Allocate.Apply(), Allocate.Apply());
#line hidden
                bool __arg1__ = true;
                try
                {
#line 336 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    CompareGTI.Adjoint.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(s2?.Slice(new QRange(0L, (s2.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(m, new QArray<Qubit>(__qsVar2__mPad__))), __qsVar0__C2__));
#line 336 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumCanonApplyToEachA.Adjoint.Apply((MicrosoftQuantumIntrinsicX, r2));
#line 336 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Controlled.Adjoint.Apply((r2, __qsVar1__C3__));
#line 336 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumCanonApplyToEachA.Adjoint.Apply((MicrosoftQuantumIntrinsicX, r2));
#line 336 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Adjoint.Apply(C);
#line 336 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Adjoint.Apply(__qsVar1__C3__);
#line 336 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Adjoint.Apply(__qsVar0__C2__);
#line 336 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Controlled.Adjoint.Apply((new QArray<Qubit>(__qsVar0__C2__, __qsVar1__C3__), C));
#line 336 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Adjoint.Apply(__qsVar1__C3__);
#line 336 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Adjoint.Apply(__qsVar0__C2__);
#line 336 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumCanonApplyToEachA.Adjoint.Apply((MicrosoftQuantumIntrinsicX, r2));
#line 336 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumIntrinsicX.Controlled.Adjoint.Apply((r2, __qsVar1__C3__));
#line 336 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    MicrosoftQuantumCanonApplyToEachA.Adjoint.Apply((MicrosoftQuantumIntrinsicX, r2));
#line 336 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    CompareGTI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(s2?.Slice(new QRange(0L, (s2.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(m, new QArray<Qubit>(__qsVar2__mPad__))), __qsVar0__C2__));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(__qsVar0__C2__);
#line hidden
                        Release.Apply(__qsVar1__C3__);
#line hidden
                        Release.Apply(__qsVar2__mPad__);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.CompareGTI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)>>(typeof(CompareGTI));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumCanonApplyToEachA = this.Factory.Get<IAdjointable>(typeof(Microsoft.Quantum.Canon.ApplyToEachA<>));
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
        }

        public override IApplyData __dataIn((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> r2, IQArray<Qubit> s2, IQArray<Qubit> m, Qubit C)
        {
            return __m__.Run<CFCheck, (IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit), QVoid>((r2, s2, m, C));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.Body, 394, 407)]
    public partial class MinimalMultiplyI : Operation<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid>, ICallable
    {
        public MinimalMultiplyI(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)>, IApplyData
        {
            public In((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3)?.Qubits);
                }
            }
        }

        String ICallable.Name => "MinimalMultiplyI";
        String ICallable.FullName => "ContinuedFractions.MinimalMultiplyI";
        protected ICallable Length
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,String), QVoid> MicrosoftQuantumDiagnosticsEqualityFactI
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> MicrosoftQuantumDiagnosticsAssertAllZero
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> AddI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid> Body => (__in__) =>
        {
            var (xs,ys,result) = __in__;
#line 395 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var lenXs = xs.Length;
#line 396 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var lenYs = ys.Length;
#line 399 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply(((lenXs + lenYs), result.Length, "Minimal multiplication requires result register to be equal to sum of multiplcan registers"));
#line 400 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumDiagnosticsAssertAllZero.Apply(result);
#line 402 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            foreach (var i in new QRange(0L, (lenXs - 1L)))
#line hidden
            {
#line 403 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                AddI.Controlled.Apply((new QArray<Qubit>(xs[i]), (new Microsoft.Quantum.Arithmetic.LittleEndian(ys), new Microsoft.Quantum.Arithmetic.LittleEndian(result?.Slice(new QRange(i, (i + lenYs)))))));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumDiagnosticsEqualityFactI = this.Factory.Get<ICallable<(Int64,Int64,String), QVoid>>(typeof(Microsoft.Quantum.Diagnostics.EqualityFactI));
            this.MicrosoftQuantumDiagnosticsAssertAllZero = this.Factory.Get<IUnitary<IQArray<Qubit>>>(typeof(Microsoft.Quantum.Diagnostics.AssertAllZero));
            this.AddI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(AddI));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
        }

        public override IApplyData __dataIn((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> xs, IQArray<Qubit> ys, IQArray<Qubit> result)
        {
            return __m__.Run<MinimalMultiplyI, (IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid>((xs, ys, result));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.Body, 408, 427)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.Adjoint, 427, 431)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.Controlled, 407, 408)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.ControlledAdjoint, 407, 408)]
    public partial class SignedSubtract : Unitary<(IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit)>, ICallable
    {
        public SignedSubtract(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit)>, IApplyData
        {
            public In((IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3)?.Qubits, ((IApplyData)Data.Item4)?.Qubits);
                }
            }
        }

        String ICallable.Name => "SignedSubtract";
        String ICallable.FullName => "ContinuedFractions.SignedSubtract";
        protected ICallable<(Int64,Int64,String), QVoid> MicrosoftQuantumDiagnosticsEqualityFactI
        {
            get;
            set;
        }

        protected ICallable Length
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> MicrosoftQuantumIntrinsicCNOT
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)> CompareGTI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> MicrosoftQuantumIntrinsicSWAP
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> AddI
        {
            get;
            set;
        }

        protected ICallable<QRange, QRange> RangeReverse
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit), QVoid> Body => (__in__) =>
        {
            var (a,b,anc,anc2) = __in__;
#line 409 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((a.Length, (b.Length + 1L), "Signed Subtraction, a must have one more qubit than b"));
#line 410 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Apply((a[(a.Length - 1L)], anc2));
#line 411 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Apply((b[(b.Length - 1L)], anc2));
#line 412 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumIntrinsicX.Apply(anc2);
#line 415 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            CompareGTI.Controlled.Apply((new QArray<Qubit>(anc2), (new Microsoft.Quantum.Arithmetic.LittleEndian(b?.Slice(new QRange(0L, (b.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(a?.Slice(new QRange(0L, (a.Length - 3L)))), anc)));
#line 416 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            foreach (var i in new QRange(0L, (a.Length - 3L)))
#line hidden
            {
#line 417 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                MicrosoftQuantumIntrinsicSWAP.Controlled.Apply((new QArray<Qubit>(anc, anc2), (a[i], b[i])));
            }

#line 419 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            AddI.Adjoint.Controlled.Apply((new QArray<Qubit>(anc2), (new Microsoft.Quantum.Arithmetic.LittleEndian(b?.Slice(new QRange(0L, (b.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(a?.Slice(new QRange(0L, (a.Length - 3L)))))));
#line 420 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(anc, anc2), a[(a.Length - 1L)]));
#line 423 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumIntrinsicX.Apply(anc2);
#line 424 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            AddI.Controlled.Apply((new QArray<Qubit>(anc2), (new Microsoft.Quantum.Arithmetic.LittleEndian(b?.Slice(new QRange(0L, (b.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(a?.Slice(new QRange(0L, (a.Length - 2L)))))));
#line 425 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumIntrinsicX.Apply(anc2);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit), QVoid> AdjointBody => (__in__) =>
        {
            var (a,b,anc,anc2) = __in__;
#line 427 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((a.Length, (b.Length + 1L), "Signed Subtraction, a must have one more qubit than b"));
#line 427 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumIntrinsicX.Adjoint.Apply(anc2);
#line 427 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            AddI.Controlled.Adjoint.Apply((new QArray<Qubit>(anc2), (new Microsoft.Quantum.Arithmetic.LittleEndian(b?.Slice(new QRange(0L, (b.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(a?.Slice(new QRange(0L, (a.Length - 2L)))))));
#line 427 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumIntrinsicX.Adjoint.Apply(anc2);
#line 427 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumIntrinsicX.Controlled.Adjoint.Apply((new QArray<Qubit>(anc, anc2), a[(a.Length - 1L)]));
#line 427 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            AddI.Adjoint.Controlled.Adjoint.Apply((new QArray<Qubit>(anc2), (new Microsoft.Quantum.Arithmetic.LittleEndian(b?.Slice(new QRange(0L, (b.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(a?.Slice(new QRange(0L, (a.Length - 3L)))))));
#line 427 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            foreach (var __qsVar0__i__ in RangeReverse.Apply(new QRange(0L, (a.Length - 3L))))
#line hidden
            {
#line 427 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                MicrosoftQuantumIntrinsicSWAP.Controlled.Adjoint.Apply((new QArray<Qubit>(anc, anc2), (a[__qsVar0__i__], b[__qsVar0__i__])));
            }

#line 427 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            CompareGTI.Controlled.Adjoint.Apply((new QArray<Qubit>(anc2), (new Microsoft.Quantum.Arithmetic.LittleEndian(b?.Slice(new QRange(0L, (b.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(a?.Slice(new QRange(0L, (a.Length - 3L)))), anc)));
#line 427 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumIntrinsicX.Adjoint.Apply(anc2);
#line 427 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Adjoint.Apply((b[(b.Length - 1L)], anc2));
#line 427 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Adjoint.Apply((a[(a.Length - 1L)], anc2));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit)), QVoid> ControlledBody => (__in__) =>
        {
            var (__controlQubits__,(a,b,anc,anc2)) = __in__;
#line 407 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((a.Length, (b.Length + 1L), "Signed Subtraction, a must have one more qubit than b"));
#line 407 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Controlled.Apply((__controlQubits__, (a[(a.Length - 1L)], anc2)));
#line 407 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Controlled.Apply((__controlQubits__, (b[(b.Length - 1L)], anc2)));
#line 407 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumIntrinsicX.Controlled.Apply((__controlQubits__, anc2));
#line 407 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            CompareGTI.Controlled.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(anc2), (new Microsoft.Quantum.Arithmetic.LittleEndian(b?.Slice(new QRange(0L, (b.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(a?.Slice(new QRange(0L, (a.Length - 3L)))), anc))));
#line 407 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            foreach (var i in new QRange(0L, (a.Length - 3L)))
#line hidden
            {
#line 407 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                MicrosoftQuantumIntrinsicSWAP.Controlled.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(anc, anc2), (a[i], b[i]))));
            }

#line 407 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            AddI.Adjoint.Controlled.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(anc2), (new Microsoft.Quantum.Arithmetic.LittleEndian(b?.Slice(new QRange(0L, (b.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(a?.Slice(new QRange(0L, (a.Length - 3L))))))));
#line 407 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumIntrinsicX.Controlled.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(anc, anc2), a[(a.Length - 1L)])));
#line 407 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumIntrinsicX.Controlled.Apply((__controlQubits__, anc2));
#line 407 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            AddI.Controlled.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(anc2), (new Microsoft.Quantum.Arithmetic.LittleEndian(b?.Slice(new QRange(0L, (b.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(a?.Slice(new QRange(0L, (a.Length - 2L))))))));
#line 407 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumIntrinsicX.Controlled.Apply((__controlQubits__, anc2));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit)), QVoid> ControlledAdjointBody => (__in__) =>
        {
            var (__controlQubits__,(a,b,anc,anc2)) = __in__;
#line 407 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((a.Length, (b.Length + 1L), "Signed Subtraction, a must have one more qubit than b"));
#line 407 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumIntrinsicX.Adjoint.Controlled.Apply((__controlQubits__, anc2));
#line 407 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            AddI.Controlled.Adjoint.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(anc2), (new Microsoft.Quantum.Arithmetic.LittleEndian(b?.Slice(new QRange(0L, (b.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(a?.Slice(new QRange(0L, (a.Length - 2L))))))));
#line 407 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumIntrinsicX.Adjoint.Controlled.Apply((__controlQubits__, anc2));
#line 407 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumIntrinsicX.Controlled.Adjoint.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(anc, anc2), a[(a.Length - 1L)])));
#line 407 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            AddI.Adjoint.Controlled.Adjoint.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(anc2), (new Microsoft.Quantum.Arithmetic.LittleEndian(b?.Slice(new QRange(0L, (b.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(a?.Slice(new QRange(0L, (a.Length - 3L))))))));
#line 407 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            foreach (var __qsVar0__i__ in RangeReverse.Apply(new QRange(0L, (a.Length - 3L))))
#line hidden
            {
#line 407 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                MicrosoftQuantumIntrinsicSWAP.Controlled.Adjoint.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(anc, anc2), (a[__qsVar0__i__], b[__qsVar0__i__]))));
            }

#line 407 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            CompareGTI.Controlled.Adjoint.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(anc2), (new Microsoft.Quantum.Arithmetic.LittleEndian(b?.Slice(new QRange(0L, (b.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(a?.Slice(new QRange(0L, (a.Length - 3L)))), anc))));
#line 407 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumIntrinsicX.Adjoint.Controlled.Apply((__controlQubits__, anc2));
#line 407 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Adjoint.Controlled.Apply((__controlQubits__, (b[(b.Length - 1L)], anc2)));
#line 407 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Adjoint.Controlled.Apply((__controlQubits__, (a[(a.Length - 1L)], anc2)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumDiagnosticsEqualityFactI = this.Factory.Get<ICallable<(Int64,Int64,String), QVoid>>(typeof(Microsoft.Quantum.Diagnostics.EqualityFactI));
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumIntrinsicCNOT = this.Factory.Get<IUnitary<(Qubit,Qubit)>>(typeof(Microsoft.Quantum.Intrinsic.CNOT));
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
            this.CompareGTI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)>>(typeof(CompareGTI));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
            this.MicrosoftQuantumIntrinsicSWAP = this.Factory.Get<IUnitary<(Qubit,Qubit)>>(typeof(Microsoft.Quantum.Intrinsic.SWAP));
            this.AddI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(AddI));
            this.RangeReverse = this.Factory.Get<ICallable<QRange, QRange>>(typeof(Microsoft.Quantum.Core.RangeReverse));
        }

        public override IApplyData __dataIn((IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> a, IQArray<Qubit> b, Qubit anc, Qubit anc2)
        {
            return __m__.Run<SignedSubtract, (IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit), QVoid>((a, b, anc, anc2));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.Body, 433, 443)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.Adjoint, 443, 447)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.Controlled, 431, 433)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.ControlledAdjoint, 431, 433)]
    public partial class SignedMultiply : Unitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)>, ICallable
    {
        public SignedMultiply(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)>, IApplyData
        {
            public In((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3)?.Qubits);
                }
            }
        }

        String ICallable.Name => "SignedMultiply";
        String ICallable.FullName => "ContinuedFractions.SignedMultiply";
        protected ICallable<(Int64,Int64,String), QVoid> MicrosoftQuantumDiagnosticsEqualityFactI
        {
            get;
            set;
        }

        protected ICallable Length
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> MicrosoftQuantumIntrinsicCNOT
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> MultiplyI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid> Body => (__in__) =>
        {
            var (a,b,c) = __in__;
#line 434 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((((2L * a.Length) - 1L), c.Length, "Signed multiplication requires a (2n-1)-bit result register."));
#line 435 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var aS = a[(a.Length - 1L)];
#line 436 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var bS = b[(b.Length - 1L)];
#line 437 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var cS = c[(c.Length - 1L)];
#line 438 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Apply((aS, cS));
#line 439 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Apply((bS, cS));
#line 441 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MultiplyI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(a?.Slice(new QRange(0L, (a.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(b?.Slice(new QRange(0L, (b.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(c?.Slice(new QRange(0L, (c.Length - 2L))))));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid> AdjointBody => (__in__) =>
        {
            var (a,b,c) = __in__;
#line 443 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((((2L * a.Length) - 1L), c.Length, "Signed multiplication requires a (2n-1)-bit result register."));
#line 443 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var __qsVar0__aS__ = a[(a.Length - 1L)];
#line 443 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var __qsVar1__bS__ = b[(b.Length - 1L)];
#line 443 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var __qsVar2__cS__ = c[(c.Length - 1L)];
#line 443 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MultiplyI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(a?.Slice(new QRange(0L, (a.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(b?.Slice(new QRange(0L, (b.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(c?.Slice(new QRange(0L, (c.Length - 2L))))));
#line 443 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Adjoint.Apply((__qsVar1__bS__, __qsVar2__cS__));
#line 443 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Adjoint.Apply((__qsVar0__aS__, __qsVar2__cS__));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)), QVoid> ControlledBody => (__in__) =>
        {
            var (__controlQubits__,(a,b,c)) = __in__;
#line 431 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((((2L * a.Length) - 1L), c.Length, "Signed multiplication requires a (2n-1)-bit result register."));
#line 431 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var aS = a[(a.Length - 1L)];
#line 431 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var bS = b[(b.Length - 1L)];
#line 431 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var cS = c[(c.Length - 1L)];
#line 431 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Controlled.Apply((__controlQubits__, (aS, cS)));
#line 431 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Controlled.Apply((__controlQubits__, (bS, cS)));
#line 431 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MultiplyI.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(a?.Slice(new QRange(0L, (a.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(b?.Slice(new QRange(0L, (b.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(c?.Slice(new QRange(0L, (c.Length - 2L)))))));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)), QVoid> ControlledAdjointBody => (__in__) =>
        {
            var (__controlQubits__,(a,b,c)) = __in__;
#line 431 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((((2L * a.Length) - 1L), c.Length, "Signed multiplication requires a (2n-1)-bit result register."));
#line 431 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var __qsVar0__aS__ = a[(a.Length - 1L)];
#line 431 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var __qsVar1__bS__ = b[(b.Length - 1L)];
#line 431 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var __qsVar2__cS__ = c[(c.Length - 1L)];
#line 431 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MultiplyI.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(a?.Slice(new QRange(0L, (a.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(b?.Slice(new QRange(0L, (b.Length - 2L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(c?.Slice(new QRange(0L, (c.Length - 2L)))))));
#line 431 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Adjoint.Controlled.Apply((__controlQubits__, (__qsVar1__bS__, __qsVar2__cS__)));
#line 431 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumIntrinsicCNOT.Adjoint.Controlled.Apply((__controlQubits__, (__qsVar0__aS__, __qsVar2__cS__)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumDiagnosticsEqualityFactI = this.Factory.Get<ICallable<(Int64,Int64,String), QVoid>>(typeof(Microsoft.Quantum.Diagnostics.EqualityFactI));
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumIntrinsicCNOT = this.Factory.Get<IUnitary<(Qubit,Qubit)>>(typeof(Microsoft.Quantum.Intrinsic.CNOT));
            this.MultiplyI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(MultiplyI));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
        }

        public override IApplyData __dataIn((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> a, IQArray<Qubit> b, IQArray<Qubit> c)
        {
            return __m__.Run<SignedMultiply, (IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid>((a, b, c));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.Body, 449, 452)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.Adjoint, 472, 473)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.Controlled, 452, 472)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.ControlledAdjoint, 473, 478)]
    public partial class DivideI : Unitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>, ICallable
    {
        public DivideI(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>, IApplyData
        {
            public In((Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1?.Data)?.Qubits, ((IApplyData)Data.Item2?.Data)?.Qubits, ((IApplyData)Data.Item3?.Data)?.Qubits);
                }
            }
        }

        String ICallable.Name => "DivideI";
        String ICallable.FullName => "ContinuedFractions.DivideI";
        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> self
        {
            get;
            set;
        }

        protected ICallable Length
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,String), QVoid> MicrosoftQuantumDiagnosticsEqualityFactI
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> MicrosoftQuantumDiagnosticsAssertAllZero
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)> CompareGTI
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> AddI
        {
            get;
            set;
        }

        protected ICallable<QRange, QRange> RangeReverse
        {
            get;
            set;
        }

        public override Func<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid> Body => (__in__) =>
        {
            var (xs,ys,result) = __in__;
#line 450 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            self.Controlled.Apply((QArray<Qubit>.Create(0L), (xs, ys, result)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid> AdjointBody => (__in__) =>
        {
            var (xs,ys,result) = __in__;
#line 472 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            self.Controlled.Adjoint.Apply((QArray<Qubit>.Create(0L), (xs, ys, result)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)), QVoid> ControlledBody => (__in__) =>
        {
            var (controls,(xs,ys,result)) = __in__;
#line 453 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var n = result.Data.Length;
#line 455 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((n, ys.Data.Length, "Integer division requires\n                        equally-sized registers ys and result."));
#line 457 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((n, xs.Data.Length, "Integer division\n                        requires an n-bit dividend registers."));
#line 459 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumDiagnosticsAssertAllZero.Apply(result.Data);
#line 461 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var xpadded = new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(xs.Data, result.Data));
#line 463 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            foreach (var i in new QRange((n - 1L), -(1L), 0L))
#line hidden
            {
#line 464 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                var xtrunc = new Microsoft.Quantum.Arithmetic.LittleEndian(xpadded.Data?.Slice(new QRange(i, ((i + n) - 1L))));
#line 466 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                CompareGTI.Controlled.Apply((controls, (ys, xtrunc, result.Data[i])));
#line 468 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                MicrosoftQuantumIntrinsicX.Controlled.Apply((controls, result.Data[i]));
#line 469 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                AddI.Adjoint.Controlled.Apply((new QArray<Qubit>(result.Data[i]), (ys, xtrunc)));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)), QVoid> ControlledAdjointBody => (__in__) =>
        {
            var (controls,(xs,ys,result)) = __in__;
#line 473 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var __qsVar0__n__ = result.Data.Length;
#line 473 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((__qsVar0__n__, ys.Data.Length, "Integer division requires\n                        equally-sized registers ys and result."));
#line 473 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((__qsVar0__n__, xs.Data.Length, "Integer division\n                        requires an n-bit dividend registers."));
#line 473 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var __qsVar1__xpadded__ = new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(xs.Data, result.Data));
#line 473 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            foreach (var __qsVar2__i__ in RangeReverse.Apply(new QRange((__qsVar0__n__ - 1L), -(1L), 0L)))
#line hidden
            {
#line 473 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                var __qsVar3__xtrunc__ = new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar1__xpadded__.Data?.Slice(new QRange(__qsVar2__i__, ((__qsVar2__i__ + __qsVar0__n__) - 1L))));
#line 473 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                AddI.Adjoint.Controlled.Adjoint.Apply((new QArray<Qubit>(result.Data[__qsVar2__i__]), (ys, __qsVar3__xtrunc__)));
#line 473 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                MicrosoftQuantumIntrinsicX.Controlled.Adjoint.Apply((controls, result.Data[__qsVar2__i__]));
#line 473 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                CompareGTI.Controlled.Adjoint.Apply((controls, (ys, __qsVar3__xtrunc__, result.Data[__qsVar2__i__])));
            }

#line 473 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumDiagnosticsAssertAllZero.Adjoint.Apply(result.Data);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.self = this;
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumDiagnosticsEqualityFactI = this.Factory.Get<ICallable<(Int64,Int64,String), QVoid>>(typeof(Microsoft.Quantum.Diagnostics.EqualityFactI));
            this.MicrosoftQuantumDiagnosticsAssertAllZero = this.Factory.Get<IUnitary<IQArray<Qubit>>>(typeof(Microsoft.Quantum.Diagnostics.AssertAllZero));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
            this.CompareGTI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)>>(typeof(CompareGTI));
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
            this.AddI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(AddI));
            this.RangeReverse = this.Factory.Get<ICallable<QRange, QRange>>(typeof(Microsoft.Quantum.Core.RangeReverse));
        }

        public override IApplyData __dataIn((Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Microsoft.Quantum.Arithmetic.LittleEndian xs, Microsoft.Quantum.Arithmetic.LittleEndian ys, Microsoft.Quantum.Arithmetic.LittleEndian result)
        {
            return __m__.Run<DivideI, (Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid>((xs, ys, result));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.Body, 478, 494)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.Adjoint, 478, 494)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.Controlled, 478, 494)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.ControlledAdjoint, 478, 494)]
    public partial class AddI : Unitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>, ICallable
    {
        public AddI(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>, IApplyData
        {
            public In((Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1?.Data)?.Qubits, ((IApplyData)Data.Item2?.Data)?.Qubits);
                }
            }
        }

        String ICallable.Name => "AddI";
        String ICallable.FullName => "ContinuedFractions.AddI";
        protected ICallable Length
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> MicrosoftQuantumArithmeticRippleCarryAdderNoCarryTTK
        {
            get;
            set;
        }

        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)> MicrosoftQuantumArithmeticRippleCarryAdderTTK
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        protected ICallable MicrosoftQuantumArraysMost
        {
            get;
            set;
        }

        protected ICallable MicrosoftQuantumArraysTail
        {
            get;
            set;
        }

        public override Func<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid> Body => (__in__) =>
        {
            var (xs,ys) = __in__;
#line 479 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            if ((xs.Data.Length == ys.Data.Length))
            {
#line 480 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                MicrosoftQuantumArithmeticRippleCarryAdderNoCarryTTK.Apply((xs, ys));
            }
            else if ((ys.Data.Length > xs.Data.Length))
            {
#line hidden
                {
#line 483 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    var qs = Allocate.Apply(((ys.Data.Length - xs.Data.Length) - 1L));
#line hidden
                    bool __arg1__ = true;
                    try
                    {
#line 484 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                        MicrosoftQuantumArithmeticRippleCarryAdderTTK.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(xs.Data, qs)), new Microsoft.Quantum.Arithmetic.LittleEndian(MicrosoftQuantumArraysMost.Apply<IQArray<Qubit>>(ys.Data)), MicrosoftQuantumArraysTail.Apply<Qubit>(ys.Data)));
                    }
#line hidden
                    catch
                    {
                        __arg1__ = false;
                        throw;
                    }
#line hidden
                    finally
                    {
                        if (__arg1__)
                        {
#line hidden
                            Release.Apply(qs);
                        }
                    }
                }
            }
            else
            {
#line 489 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                throw new ExecutionFailException("xs must not contain more qubits than ys!");
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid> AdjointBody => (__in__) =>
        {
            var (xs,ys) = __in__;
#line 478 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            if ((xs.Data.Length == ys.Data.Length))
            {
#line 478 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                MicrosoftQuantumArithmeticRippleCarryAdderNoCarryTTK.Adjoint.Apply((xs, ys));
            }
            else if ((ys.Data.Length > xs.Data.Length))
            {
#line 478 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                {
#line 478 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    var __qsVar0__qs__ = Allocate.Apply(((ys.Data.Length - xs.Data.Length) - 1L));
#line hidden
                    bool __arg1__ = true;
                    try
                    {
#line 478 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                        MicrosoftQuantumArithmeticRippleCarryAdderTTK.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(xs.Data, __qsVar0__qs__)), new Microsoft.Quantum.Arithmetic.LittleEndian(MicrosoftQuantumArraysMost.Apply<IQArray<Qubit>>(ys.Data)), MicrosoftQuantumArraysTail.Apply<Qubit>(ys.Data)));
                    }
#line hidden
                    catch
                    {
                        __arg1__ = false;
                        throw;
                    }
#line hidden
                    finally
                    {
                        if (__arg1__)
                        {
#line hidden
                            Release.Apply(__qsVar0__qs__);
                        }
                    }
                }
            }
            else
            {
#line 478 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                throw new ExecutionFailException("xs must not contain more qubits than ys!");
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)), QVoid> ControlledBody => (__in__) =>
        {
            var (__controlQubits__,(xs,ys)) = __in__;
#line 478 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            if ((xs.Data.Length == ys.Data.Length))
            {
#line 478 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                MicrosoftQuantumArithmeticRippleCarryAdderNoCarryTTK.Controlled.Apply((__controlQubits__, (xs, ys)));
            }
            else if ((ys.Data.Length > xs.Data.Length))
            {
#line 478 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                {
#line 478 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    var qs = Allocate.Apply(((ys.Data.Length - xs.Data.Length) - 1L));
#line hidden
                    bool __arg1__ = true;
                    try
                    {
#line 478 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                        MicrosoftQuantumArithmeticRippleCarryAdderTTK.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(xs.Data, qs)), new Microsoft.Quantum.Arithmetic.LittleEndian(MicrosoftQuantumArraysMost.Apply<IQArray<Qubit>>(ys.Data)), MicrosoftQuantumArraysTail.Apply<Qubit>(ys.Data))));
                    }
#line hidden
                    catch
                    {
                        __arg1__ = false;
                        throw;
                    }
#line hidden
                    finally
                    {
                        if (__arg1__)
                        {
#line hidden
                            Release.Apply(qs);
                        }
                    }
                }
            }
            else
            {
#line 478 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                throw new ExecutionFailException("xs must not contain more qubits than ys!");
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)), QVoid> ControlledAdjointBody => (__in__) =>
        {
            var (__controlQubits__,(xs,ys)) = __in__;
#line 478 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            if ((xs.Data.Length == ys.Data.Length))
            {
#line 478 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                MicrosoftQuantumArithmeticRippleCarryAdderNoCarryTTK.Adjoint.Controlled.Apply((__controlQubits__, (xs, ys)));
            }
            else if ((ys.Data.Length > xs.Data.Length))
            {
#line 478 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                {
#line 478 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    var __qsVar0__qs__ = Allocate.Apply(((ys.Data.Length - xs.Data.Length) - 1L));
#line hidden
                    bool __arg1__ = true;
                    try
                    {
#line 478 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                        MicrosoftQuantumArithmeticRippleCarryAdderTTK.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(xs.Data, __qsVar0__qs__)), new Microsoft.Quantum.Arithmetic.LittleEndian(MicrosoftQuantumArraysMost.Apply<IQArray<Qubit>>(ys.Data)), MicrosoftQuantumArraysTail.Apply<Qubit>(ys.Data))));
                    }
#line hidden
                    catch
                    {
                        __arg1__ = false;
                        throw;
                    }
#line hidden
                    finally
                    {
                        if (__arg1__)
                        {
#line hidden
                            Release.Apply(__qsVar0__qs__);
                        }
                    }
                }
            }
            else
            {
#line 478 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                throw new ExecutionFailException("xs must not contain more qubits than ys!");
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumArithmeticRippleCarryAdderNoCarryTTK = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(Microsoft.Quantum.Arithmetic.RippleCarryAdderNoCarryTTK));
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MicrosoftQuantumArithmeticRippleCarryAdderTTK = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)>>(typeof(Microsoft.Quantum.Arithmetic.RippleCarryAdderTTK));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
            this.MicrosoftQuantumArraysMost = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Arrays.Most<>));
            this.MicrosoftQuantumArraysTail = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Arrays.Tail<>));
        }

        public override IApplyData __dataIn((Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Microsoft.Quantum.Arithmetic.LittleEndian xs, Microsoft.Quantum.Arithmetic.LittleEndian ys)
        {
            return __m__.Run<AddI, (Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid>((xs, ys));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.Body, 494, 499)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.Adjoint, 494, 499)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.Controlled, 494, 499)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.ControlledAdjoint, 494, 499)]
    public partial class CompareGTI : Unitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)>, ICallable
    {
        public CompareGTI(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)>, IApplyData
        {
            public In((Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1?.Data)?.Qubits, ((IApplyData)Data.Item2?.Data)?.Qubits, ((IApplyData)Data.Item3)?.Qubits);
                }
            }
        }

        String ICallable.Name => "CompareGTI";
        String ICallable.FullName => "ContinuedFractions.CompareGTI";
        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)> MicrosoftQuantumArithmeticGreaterThan
        {
            get;
            set;
        }

        public override Func<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit), QVoid> Body => (__in__) =>
        {
            var (xs,ys,result) = __in__;
#line 496 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumArithmeticGreaterThan.Apply((xs, ys, result));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit), QVoid> AdjointBody => (__in__) =>
        {
            var (xs,ys,result) = __in__;
#line 494 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumArithmeticGreaterThan.Adjoint.Apply((xs, ys, result));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)), QVoid> ControlledBody => (__in__) =>
        {
            var (__controlQubits__,(xs,ys,result)) = __in__;
#line 494 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumArithmeticGreaterThan.Controlled.Apply((__controlQubits__, (xs, ys, result)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)), QVoid> ControlledAdjointBody => (__in__) =>
        {
            var (__controlQubits__,(xs,ys,result)) = __in__;
#line 494 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumArithmeticGreaterThan.Adjoint.Controlled.Apply((__controlQubits__, (xs, ys, result)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumArithmeticGreaterThan = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)>>(typeof(Microsoft.Quantum.Arithmetic.GreaterThan));
        }

        public override IApplyData __dataIn((Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Microsoft.Quantum.Arithmetic.LittleEndian xs, Microsoft.Quantum.Arithmetic.LittleEndian ys, Qubit result)
        {
            return __m__.Run<CompareGTI, (Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit), QVoid>((xs, ys, result));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.Body, 501, 514)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.Adjoint, 531, 532)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.Controlled, 514, 531)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.ControlledAdjoint, 532, 537)]
    public partial class MultiplyI : Unitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>, ICallable
    {
        public MultiplyI(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>, IApplyData
        {
            public In((Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1?.Data)?.Qubits, ((IApplyData)Data.Item2?.Data)?.Qubits, ((IApplyData)Data.Item3?.Data)?.Qubits);
                }
            }
        }

        String ICallable.Name => "MultiplyI";
        String ICallable.FullName => "ContinuedFractions.MultiplyI";
        protected ICallable Length
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,String), QVoid> MicrosoftQuantumDiagnosticsEqualityFactI
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> MicrosoftQuantumDiagnosticsAssertAllZero
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> AddI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        protected ICallable<QRange, QRange> RangeReverse
        {
            get;
            set;
        }

        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> MicrosoftQuantumIntrinsicCNOT
        {
            get;
            set;
        }

        public override Func<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid> Body => (__in__) =>
        {
            var (xs,ys,result) = __in__;
#line 502 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var n = xs.Data.Length;
#line 504 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((n, ys.Data.Length, "Integer multiplication requires\n                        equally-sized registers xs and ys."));
#line 506 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply(((2L * n), result.Data.Length, "Integer multiplication\n                        requires a 2n-bit result registers."));
#line 508 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumDiagnosticsAssertAllZero.Apply(result.Data);
#line 510 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            foreach (var i in new QRange(0L, (n - 1L)))
#line hidden
            {
#line 511 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                AddI.Controlled.Apply((new QArray<Qubit>(xs.Data[i]), (ys, new Microsoft.Quantum.Arithmetic.LittleEndian(result.Data?.Slice(new QRange(i, (i + n)))))));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid> AdjointBody => (__in__) =>
        {
            var (xs,ys,result) = __in__;
#line 531 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var __qsVar0__n__ = xs.Data.Length;
#line 531 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((__qsVar0__n__, ys.Data.Length, "Integer multiplication requires\n                        equally-sized registers xs and ys."));
#line 531 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply(((2L * __qsVar0__n__), result.Data.Length, "Integer multiplication\n                        requires a 2n-bit result registers."));
#line 531 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            foreach (var __qsVar1__i__ in RangeReverse.Apply(new QRange(0L, (__qsVar0__n__ - 1L))))
#line hidden
            {
#line 531 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                AddI.Controlled.Adjoint.Apply((new QArray<Qubit>(xs.Data[__qsVar1__i__]), (ys, new Microsoft.Quantum.Arithmetic.LittleEndian(result.Data?.Slice(new QRange(__qsVar1__i__, (__qsVar1__i__ + __qsVar0__n__)))))));
            }

#line 531 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumDiagnosticsAssertAllZero.Adjoint.Apply(result.Data);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)), QVoid> ControlledBody => (__in__) =>
        {
            var (controls,(xs,ys,result)) = __in__;
#line 515 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var n = xs.Data.Length;
#line 517 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((n, ys.Data.Length, "Integer multiplication requires\n                        equally-sized registers xs and ys."));
#line 519 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply(((2L * n), result.Data.Length, "Integer multiplication\n                        requires a 2n-bit result registers."));
#line 521 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumDiagnosticsAssertAllZero.Apply(result.Data);
#line hidden
            {
#line 523 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                var anc = Allocate.Apply();
#line hidden
                bool __arg1__ = true;
                try
                {
#line 524 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    foreach (var i in new QRange(0L, (n - 1L)))
#line hidden
                    {
#line 525 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                        MicrosoftQuantumIntrinsicCNOT.Controlled.Apply((controls, (xs.Data[i], anc)));
#line 526 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                        AddI.Controlled.Apply((new QArray<Qubit>(anc), (ys, new Microsoft.Quantum.Arithmetic.LittleEndian(result.Data?.Slice(new QRange(i, (i + n)))))));
#line 527 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                        MicrosoftQuantumIntrinsicCNOT.Controlled.Apply((controls, (xs.Data[i], anc)));
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(anc);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)), QVoid> ControlledAdjointBody => (__in__) =>
        {
            var (controls,(xs,ys,result)) = __in__;
#line 532 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var __qsVar0__n__ = xs.Data.Length;
#line 532 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply((__qsVar0__n__, ys.Data.Length, "Integer multiplication requires\n                        equally-sized registers xs and ys."));
#line 532 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply(((2L * __qsVar0__n__), result.Data.Length, "Integer multiplication\n                        requires a 2n-bit result registers."));
#line 532 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            {
#line 532 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                var __qsVar1__anc__ = Allocate.Apply();
#line hidden
                bool __arg1__ = true;
                try
                {
#line 532 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    foreach (var __qsVar2__i__ in RangeReverse.Apply(new QRange(0L, (__qsVar0__n__ - 1L))))
#line hidden
                    {
#line 532 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                        MicrosoftQuantumIntrinsicCNOT.Controlled.Adjoint.Apply((controls, (xs.Data[__qsVar2__i__], __qsVar1__anc__)));
#line 532 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                        AddI.Controlled.Adjoint.Apply((new QArray<Qubit>(__qsVar1__anc__), (ys, new Microsoft.Quantum.Arithmetic.LittleEndian(result.Data?.Slice(new QRange(__qsVar2__i__, (__qsVar2__i__ + __qsVar0__n__)))))));
#line 532 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                        MicrosoftQuantumIntrinsicCNOT.Controlled.Adjoint.Apply((controls, (xs.Data[__qsVar2__i__], __qsVar1__anc__)));
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(__qsVar1__anc__);
                    }
                }
            }

#line 532 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumDiagnosticsAssertAllZero.Adjoint.Apply(result.Data);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumDiagnosticsEqualityFactI = this.Factory.Get<ICallable<(Int64,Int64,String), QVoid>>(typeof(Microsoft.Quantum.Diagnostics.EqualityFactI));
            this.MicrosoftQuantumDiagnosticsAssertAllZero = this.Factory.Get<IUnitary<IQArray<Qubit>>>(typeof(Microsoft.Quantum.Diagnostics.AssertAllZero));
            this.AddI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(AddI));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
            this.RangeReverse = this.Factory.Get<ICallable<QRange, QRange>>(typeof(Microsoft.Quantum.Core.RangeReverse));
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MicrosoftQuantumIntrinsicCNOT = this.Factory.Get<IUnitary<(Qubit,Qubit)>>(typeof(Microsoft.Quantum.Intrinsic.CNOT));
        }

        public override IApplyData __dataIn((Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Microsoft.Quantum.Arithmetic.LittleEndian xs, Microsoft.Quantum.Arithmetic.LittleEndian ys, Microsoft.Quantum.Arithmetic.LittleEndian result)
        {
            return __m__.Run<MultiplyI, (Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid>((xs, ys, result));
        }
    }

    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.Body, 538, 541)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.Adjoint, 557, 558)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.Controlled, 541, 557)]
    [SourceLocation("/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs", OperationFunctor.ControlledAdjoint, 558, -1)]
    public partial class SquareI : Unitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>, ICallable
    {
        public SquareI(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>, IApplyData
        {
            public In((Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1?.Data)?.Qubits, ((IApplyData)Data.Item2?.Data)?.Qubits);
                }
            }
        }

        String ICallable.Name => "SquareI";
        String ICallable.FullName => "ContinuedFractions.SquareI";
        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> self
        {
            get;
            set;
        }

        protected ICallable Length
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,String), QVoid> MicrosoftQuantumDiagnosticsEqualityFactI
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> MicrosoftQuantumDiagnosticsAssertAllZero
        {
            get;
            set;
        }

        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> MicrosoftQuantumIntrinsicCNOT
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> AddI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        protected ICallable<QRange, QRange> RangeReverse
        {
            get;
            set;
        }

        public override Func<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid> Body => (__in__) =>
        {
            var (xs,result) = __in__;
#line 539 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            self.Controlled.Apply((QArray<Qubit>.Create(0L), (xs, result)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid> AdjointBody => (__in__) =>
        {
            var (xs,result) = __in__;
#line 557 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            self.Controlled.Adjoint.Apply((QArray<Qubit>.Create(0L), (xs, result)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)), QVoid> ControlledBody => (__in__) =>
        {
            var (controls,(xs,result)) = __in__;
#line 542 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var n = xs.Data.Length;
#line 544 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply(((2L * n), result.Data.Length, "Integer multiplication\n                        requires a 2n-bit result registers."));
#line 546 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumDiagnosticsAssertAllZero.Apply(result.Data);
#line hidden
            {
#line 548 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                var anc = Allocate.Apply();
#line hidden
                bool __arg1__ = true;
                try
                {
#line 549 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    foreach (var i in new QRange(0L, (n - 1L)))
#line hidden
                    {
#line 550 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                        MicrosoftQuantumIntrinsicCNOT.Controlled.Apply((controls, (xs.Data[i], anc)));
#line 551 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                        AddI.Controlled.Apply((new QArray<Qubit>(anc), (xs, new Microsoft.Quantum.Arithmetic.LittleEndian(result.Data?.Slice(new QRange(i, (i + n)))))));
#line 553 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                        MicrosoftQuantumIntrinsicCNOT.Controlled.Apply((controls, (xs.Data[i], anc)));
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(anc);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)), QVoid> ControlledAdjointBody => (__in__) =>
        {
            var (controls,(xs,result)) = __in__;
#line 558 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            var __qsVar0__n__ = xs.Data.Length;
#line 558 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumDiagnosticsEqualityFactI.Apply(((2L * __qsVar0__n__), result.Data.Length, "Integer multiplication\n                        requires a 2n-bit result registers."));
#line 558 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            {
#line 558 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                var __qsVar1__anc__ = Allocate.Apply();
#line hidden
                bool __arg1__ = true;
                try
                {
#line 558 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                    foreach (var __qsVar2__i__ in RangeReverse.Apply(new QRange(0L, (__qsVar0__n__ - 1L))))
#line hidden
                    {
#line 558 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                        MicrosoftQuantumIntrinsicCNOT.Controlled.Adjoint.Apply((controls, (xs.Data[__qsVar2__i__], __qsVar1__anc__)));
#line 558 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                        AddI.Controlled.Adjoint.Apply((new QArray<Qubit>(__qsVar1__anc__), (xs, new Microsoft.Quantum.Arithmetic.LittleEndian(result.Data?.Slice(new QRange(__qsVar2__i__, (__qsVar2__i__ + __qsVar0__n__)))))));
#line 558 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
                        MicrosoftQuantumIntrinsicCNOT.Controlled.Adjoint.Apply((controls, (xs.Data[__qsVar2__i__], __qsVar1__anc__)));
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(__qsVar1__anc__);
                    }
                }
            }

#line 558 "/Users/Matt/Documents/Masters/Dissertation/Quantum/Operators/Continued_Fractions/Program.qs"
            MicrosoftQuantumDiagnosticsAssertAllZero.Adjoint.Apply(result.Data);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.self = this;
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumDiagnosticsEqualityFactI = this.Factory.Get<ICallable<(Int64,Int64,String), QVoid>>(typeof(Microsoft.Quantum.Diagnostics.EqualityFactI));
            this.MicrosoftQuantumDiagnosticsAssertAllZero = this.Factory.Get<IUnitary<IQArray<Qubit>>>(typeof(Microsoft.Quantum.Diagnostics.AssertAllZero));
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MicrosoftQuantumIntrinsicCNOT = this.Factory.Get<IUnitary<(Qubit,Qubit)>>(typeof(Microsoft.Quantum.Intrinsic.CNOT));
            this.AddI = this.Factory.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(AddI));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(Microsoft.Quantum.Arithmetic.LittleEndian));
            this.RangeReverse = this.Factory.Get<ICallable<QRange, QRange>>(typeof(Microsoft.Quantum.Core.RangeReverse));
        }

        public override IApplyData __dataIn((Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Microsoft.Quantum.Arithmetic.LittleEndian xs, Microsoft.Quantum.Arithmetic.LittleEndian result)
        {
            return __m__.Run<SquareI, (Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid>((xs, result));
        }
    }
}